#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.disk  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025063001'

DESCRIPTION = """A tool to update the Linuxfabrik monitoring plugins README files at certain points.
                 Run this tool within the mp root directory."""

DEFAULT_PATH = '.'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(3)

    # fetch data
    readmes = lib.disk.walk_directory(
        './',
        exclude_pattern=r'',
        include_pattern=r'.*README.md',
        relative=True,
    )

    # for each README do something good
    for readme_path in sorted(readmes):
        if 'check-plugins/' not in readme_path:
            continue

        # get the plugin name
        plugin = readme_path.replace('check-plugins/', '').replace('/README.md', '')
        # run `plugin-name --help`
        _help, stderr, retc = lib.base.coe(lib.shell.shell_exec(
            'check-plugins/{}/{} --help'.format(plugin, plugin)
        ))
        # prepend 4 spaces to every non-empty line of the output
        _help = '\n'.join('    {}'.format(line) if line.strip() else line for line in _help.split('\n'))
        _help = '    ' + _help.strip()

        # got the plugin name, it's help output and the path to the README.

        # build the "Help" section and update the README file.
        # nice: _help's layout is already 80-columns.
        readme = lib.base.coe(lib.disk.read_file(readme_path))
        readme = re.sub(
            r'## Help\s*```text\s*?(.*?)\s*```\s*## Usage Examples',
            '## Help\n\n```text\n{}\n```\n\n## Usage Examples'.format(
                _help
            ),
            readme,
            flags=re.DOTALL, # to match dots across all lines
        )
        lib.base.coe(lib.disk.write_file(readme_path, readme))

        print('Updated {}'.format(readme_path))


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
