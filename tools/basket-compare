#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

from deepdiff import DeepDiff

import lib.base  # pylint: disable=C0413
import lib.disk  # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025062501'

DESCRIPTION = """Compare two Icinga Director Baskets and highlight the differences."""


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version=f'%(prog)s: v{__version__} by {__author__}'
    )

    parser.add_argument(
        'current_basket',
        help='Path to current Icinga Director Basket export.json. ',
    )

    parser.add_argument(
        'new_basket',
        help='Path to new Icinga Director Basket json. ',
    )

    return parser.parse_args()


def get_val(d):
    if isinstance(d, bool):
        tmp = str(d)
    elif isinstance(d, dict):
        tmp = json.dumps(d)
    elif isinstance(d, float):
        tmp = str(d)
    elif isinstance(d, int):
        tmp = str(d)
    else:
        tmp = d
    if d is None:
        tmp = 'None'
    if len(tmp) > 80:
        return f'{len(tmp)} chars in {type(d)}!'
    return tmp


def normalize_datafields(basket):
    result = {}
    for d in basket['Datafield'].values():
        uuid = d.get('uuid')[-12:]
        result[uuid] = {}
        result[uuid]['datatype'] = d.get('datatype')
        result[uuid]['format'] = d.get('format')
        for k, v in d.get('settings', {}).items():
            result[uuid][f'settings.{k}'] = v
        result[uuid]['uuid'] = uuid
        result[uuid]['varname'] = d.get('varname')

    return {'Datafield': result}


def normalize_commands(basket):
    result = {}
    for d in basket['Command'].values():
        uuid = d.get('uuid')[-12:]
        result[uuid] = {}

        for k, v in d.get('arguments', {}).items():
            # convert old format to new format
            k = k.replace('--', '')
            if isinstance(v, str):
                v = {'value': v}
            for kk, vv in v.items():
                result[uuid][f'arguments.{k}.{kk}'] = vv

        result[uuid]['command'] = d.get('command')
        if result[uuid]['command']:
            result[uuid]['command'] = result[uuid]['command'].replace('C:\\Program Files\\icinga2\\sbin\\linuxfabrik\\', '')
            result[uuid]['command'] = result[uuid]['command'].replace('C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\', '')
            result[uuid]['command'] = result[uuid]['command'].replace('/usr/lib64/nagios/plugins/', '')
        result[uuid]['disabled'] = d.get('disabled', False)

        for f in d.get('fields', []):
            # lookup the uuid of the datafield
            dfuuid = basket['Datafield'][str(f['datafield_id'])]['uuid']
            result[uuid][f'fields.{dfuuid}.datafield_id'] = dfuuid
            result[uuid][f'fields.{dfuuid}.is_required'] = f['is_required']
            result[uuid][f'fields.{dfuuid}.var_filter'] = f['var_filter']

        result[uuid]['imports'] = d.get('imports', [])
        result[uuid]['is_string'] = d.get('is_string')
        result[uuid]['methods_execute'] = d.get('methods_execute')
        result[uuid]['object_name'] = d.get('object_name', '')
        result[uuid]['object_type'] = d.get('object_type', '')
        result[uuid]['timeout'] = str(d.get('timeout', '')).replace('None', '')
        result[uuid]['uuid'] = uuid

        for k, v in d.get('vars', {}).items():
            result[uuid][f'vars.{k}'] = v

        result[uuid]['zone'] = d.get('zone')

    return {'Command': result}


def normalize_host_templates(basket):
    # deactivated those that are not of interest
    result = {}
    for d in basket['HostTemplate'].values():
        uuid = d.get('uuid')[-12:]
        result[uuid] = {}
        result[uuid]['accept_config'] = d.get('accept_config')
        result[uuid]['action_url'] = d.get('action_url')
        result[uuid]['address'] = d.get('address')
        result[uuid]['address6'] = d.get('address6')
        result[uuid]['api_key'] = d.get('api_key')
        result[uuid]['check_command'] = d.get('check_command')
        result[uuid]['check_interval'] = str(d.get('check_interval', '')).replace('None', '')
        result[uuid]['check_period'] = d.get('check_period')
        result[uuid]['check_timeout'] = str(d.get('check_timeout', '')).replace('None', '')
        result[uuid]['command_endpoint'] = d.get('command_endpoint')
        result[uuid]['disabled'] = d.get('disabled', False)
        result[uuid]['display_name'] = d.get('display_name')
        result[uuid]['enable_active_checks'] = d.get('enable_active_checks')
        result[uuid]['enable_event_handler'] = d.get('enable_event_handler')
        result[uuid]['enable_flapping'] = d.get('enable_flapping')
        result[uuid]['enable_notifications'] = d.get('enable_notifications')
        result[uuid]['enable_passive_checks'] = d.get('enable_passive_checks')
        result[uuid]['enable_perfdata'] = d.get('enable_perfdata')
        result[uuid]['event_command'] = d.get('event_command')

        for f in d.get('fields', []):
            # lookup the uuid of the datafield
            dfuuid = basket['Datafield'][str(f['datafield_id'])]['uuid']
            result[uuid][f'fields.{dfuuid}.datafield_id'] = dfuuid
            result[uuid][f'fields.{dfuuid}.is_required'] = f['is_required']
            result[uuid][f'fields.{dfuuid}.var_filter'] = f['var_filter']

        result[uuid]['flapping_threshold_high'] = d.get('flapping_threshold_high')
        result[uuid]['flapping_threshold_low'] = d.get('flapping_threshold_low')
        result[uuid]['groups'] = d.get('groups', [])
        result[uuid]['has_agent'] = d.get('has_agent')
        # result[uuid]['icon_image'] = d.get('icon_image')
        # result[uuid]['icon_image_alt'] = d.get('icon_image_alt')
        result[uuid]['imports'] = d.get('imports', [])
        result[uuid]['master_should_connect'] = d.get('master_should_connect')
        result[uuid]['max_check_attempts'] = str(d.get('max_check_attempts', '')).replace('None', '')
        result[uuid]['notes'] = d.get('notes')
        result[uuid]['notes_url'] = d.get('notes_url')
        result[uuid]['object_name'] = d.get('object_name', '')
        result[uuid]['object_type'] = d.get('object_type', '')
        result[uuid]['retry_interval'] = str(d.get('retry_interval', '')).replace('None', '')
        result[uuid]['template_choice'] = d.get('template_choice')
        result[uuid]['uuid'] = uuid

        for k, v in d.get('vars', {}).items():
            result[uuid][f'vars.{k}'] = v

        result[uuid]['volatile'] = d.get('volatile')
        result[uuid]['zone'] = d.get('zone')

    return {'HostTemplate': result}


def normalize_service_templates(basket):
    # deactivated those that are not of interest
    result = {}
    for d in basket['ServiceTemplate'].values():
        uuid = d.get('uuid')[-12:]
        result[uuid] = {}

        result[uuid]['action_url'] = d.get('action_url')
        result[uuid]['apply_for'] = d.get('apply_for')
        result[uuid]['assign_filter'] = d.get('assign_filter')
        result[uuid]['check_command'] = d.get('check_command')
        result[uuid]['check_interval'] = str(d.get('check_interval', '')).replace('None', '')
        result[uuid]['check_period'] = d.get('check_period')
        result[uuid]['check_timeout'] = str(d.get('check_timeout', '')).replace('None', '')
        result[uuid]['command_endpoint'] = d.get('command_endpoint')
        result[uuid]['disabled'] = d.get('disabled', False)
        result[uuid]['display_name'] = d.get('display_name')
        result[uuid]['enable_active_checks'] = d.get('enable_active_checks')
        result[uuid]['enable_event_handler'] = d.get('enable_event_handler')
        result[uuid]['enable_flapping'] = d.get('enable_flapping')
        result[uuid]['enable_notifications'] = d.get('enable_notifications')
        result[uuid]['enable_passive_checks'] = d.get('enable_passive_checks')
        result[uuid]['enable_perfdata'] = d.get('enable_perfdata')
        result[uuid]['event_command'] = d.get('event_command')

        for f in d.get('fields', []):
            # lookup the uuid of the datafield
            dfuuid = basket['Datafield'][str(f['datafield_id'])]['uuid']
            result[uuid][f'fields.{dfuuid}.datafield_id'] = dfuuid
            result[uuid][f'fields.{dfuuid}.is_required'] = f['is_required']
            result[uuid][f'fields.{dfuuid}.var_filter'] = f['var_filter']

        result[uuid]['flapping_threshold_high'] = d.get('flapping_threshold_high')
        result[uuid]['flapping_threshold_low'] = d.get('flapping_threshold_low')
        result[uuid]['groups'] = d.get('groups', [])
        result[uuid]['host'] = d.get('host')
        # result[uuid]['icon_image'] = d.get('icon_image', '')
        # result[uuid]['icon_image_alt'] = d.get('icon_image_alt')
        result[uuid]['imports'] = d.get('imports', [])
        result[uuid]['max_check_attempts'] = str(d.get('max_check_attempts', '')).replace('None', '')
        # result[uuid]['notes'] = d.get('notes')
        # result[uuid]['notes_url'] = d.get('notes_url')
        result[uuid]['object_name'] = d.get('object_name', '')
        result[uuid]['object_type'] = d.get('object_type', '')
        result[uuid]['retry_interval'] = str(d.get('retry_interval', '')).replace('None', '')
        result[uuid]['service_set'] = d.get('service_set')
        result[uuid]['template_choice'] = d.get('template_choice')
        result[uuid]['use_agent'] = d.get('use_agent')
        result[uuid]['use_var_overrides'] = d.get('use_var_overrides')
        result[uuid]['uuid'] = uuid

        for k, v in d.get('vars', {}).items():
            result[uuid][f'vars.{k}'] = v

        result[uuid]['volatile'] = d.get('volatile')
        result[uuid]['zone'] = d.get('zone')

    return {'ServiceTemplate': result}


def normalize_service_sets(basket):
    # deactivated those that are not of interest
    result = {}
    for d in basket['ServiceSet'].values():
        uuid = d.get('uuid')[-12:]
        result[uuid] = {}

        result[uuid]['assign_filter'] = d.get('assign_filter', '')
        # result[uuid]['description'] = d.get('description')
        result[uuid]['object_name'] = d.get('object_name', '')
        result[uuid]['object_type'] = d.get('object_type', '')

        # services: in old format it is a list, in new format it is a dict
        if isinstance(d['services'], list):
            tmp = {}
            for s in d['services']:
                tmp[s['object_name']] = s
            services = normalize_service_templates({'ServiceTemplate': tmp})['ServiceTemplate']
        else:
            services = normalize_service_templates({'ServiceTemplate': d['services']})['ServiceTemplate']
        # ignore those
        result[uuid]['services'] = services

        result[uuid]['uuid'] = uuid

    return {'ServiceSet': result}


def compare_datafields(left, right):
    added = []
    changed = []
    removed = []
    for l in left['Datafield'].values():
        found_in_r = False
        for r in right['Datafield'].values():
            if l == r:
                # exactly the same, so nothing to do, next in outer loop
                found_in_r = True
                break
            if l['uuid'] == r['uuid']:
                # found, but something has changed
                found_in_r = True
                ddiff = DeepDiff(l, r, ignore_order=True, verbose_level=2)
                if ddiff:
                    changed.append({'uuid': r['uuid'], 'varname': r['varname'], 'diff': ddiff})
                break
        else:
            # last element
            if r['uuid'] not in added:
                added.append({'uuid': r['uuid'], 'varname': r['varname'], 'diff': None})
        if not found_in_r:
            removed.append({'uuid': r['uuid'], 'varname': r['varname'], 'diff': None})

    return added, changed, removed


def compare_commands(left, right):
    added = []
    changed = []
    removed = []
    for l in left['Command'].values():
        found_in_r = False
        for r in right['Command'].values():
            if l == r:
                # exactly the same, so nothing to do, next in outer loop
                found_in_r = True
                break
            if l['uuid'] == r['uuid']:
                # found, but something has changed
                found_in_r = True
                ddiff = DeepDiff(l, r, ignore_order=True, verbose_level=2)
                if ddiff:
                    changed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': ddiff})
                break
        else:
            # last element
            if r['uuid'] not in added:
                added.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})
        if not found_in_r:
            removed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})

    return added, changed, removed


def compare_host_templates(left, right):
    added = []
    changed = []
    removed = []
    for l in left['HostTemplate'].values():
        found_in_r = False
        for r in right['HostTemplate'].values():
            if l == r:
                # exactly the same, so nothing to do, next in outer loop
                found_in_r = True
                break
            if l['uuid'] == r['uuid']:
                # found, but something has changed
                found_in_r = True
                ddiff = DeepDiff(l, r, ignore_order=True, verbose_level=2)
                if ddiff:
                    changed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': ddiff})
                break
        else:
            # last element
            if r['uuid'] not in added:
                added.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})
        if not found_in_r:
            removed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})

    return added, changed, removed


def compare_service_templates(left, right):
    added = []
    changed = []
    removed = []
    for l in left['ServiceTemplate'].values():
        found_in_r = False
        for r in right['ServiceTemplate'].values():
            if l == r:
                # exactly the same, so nothing to do, next in outer loop
                found_in_r = True
                break
            if l['uuid'] == r['uuid']:
                # found, but something has changed
                found_in_r = True
                ddiff = DeepDiff(l, r, ignore_order=True, verbose_level=2)
                if ddiff:
                    changed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': ddiff})
                break
        else:
            # last element
            if r['uuid'] not in added:
                added.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})
        if not found_in_r:
            removed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})

    return added, changed, removed


def compare_service_sets(left, right):
    added = []
    changed = []
    removed = []
    for l in left['ServiceSet'].values():
        found_in_r = False
        for r in right['ServiceSet'].values():
            if l == r:
                # exactly the same, so nothing to do, next in outer loop
                found_in_r = True
                break
            if l['uuid'] == r['uuid']:
                # found, but something has changed
                found_in_r = True
                ddiff = DeepDiff(l, r, ignore_order=True, verbose_level=2)
                if ddiff:
                    changed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': ddiff})
                break
        else:
            # last element
            if r['uuid'] not in added:
                added.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})
        if not found_in_r:
            removed.append({'uuid': r['uuid'], 'object_name': r['object_name'], 'diff': None})

    return added, changed, removed


def get_datafields_diff(diff):
    table_data = []
    for d in diff:
        for category, changes in d['diff'].items():
            if category == 'values_changed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['varname'] = d['varname']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'value changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = get_val(v['old_value'])
                    tmp['new_value'] = get_val(v['new_value'])
                    table_data.append(tmp)
            else:
                print(f'!!! Currently unhandled category {category}.')
                exit()

    return table_data


def get_commands_diff(diff):
    table_data = []
    for d in diff:
        for category, changes in d['diff'].items():
            if category == 'dictionary_item_removed':
                # not of any interest
                continue
            if category == 'dictionary_item_added':
                # not of any interest
                continue
            if category == 'values_changed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'value changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = get_val(v['old_value'])
                    tmp['new_value'] = get_val(v['new_value'])
                    table_data.append(tmp)
            elif category == 'type_changes':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'type changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = f'{v["old_type"]} ("{get_val(v["old_value"])}")'
                    tmp['new_value'] = f'{v["new_type"]} ("{get_val(v["new_value"])}")'
                    table_data.append(tmp)
            else:
                print(f'!!! Currently unhandled category {category}.')
                exit()

    return table_data


def get_host_templates_diff(diff):
    table_data = []
    for d in diff:
        for category, changes in d['diff'].items():
            if category == 'dictionary_item_removed':
                # not of any interest
                continue
            if category == 'dictionary_item_added':
                # not of any interest
                continue
            if category == 'values_changed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'value changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = get_val(v['old_value'])
                    tmp['new_value'] = get_val(v['new_value'])
                    table_data.append(tmp)
            elif category == 'type_changes':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'type changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = f'{v["old_type"]} ("{get_val(v["old_value"])}")'
                    tmp['new_value'] = f'{v["new_type"]} ("{get_val(v["new_value"])}")'
                    table_data.append(tmp)
            else:
                print(f'!!! Currently unhandled category {category}.')
                exit()

    return table_data


def get_service_templates_diff(diff):
    table_data = []
    for d in diff:
        for category, changes in d['diff'].items():
            if category == 'dictionary_item_removed':
                # not of any interest
                continue
            if category == 'dictionary_item_added':
                # not of any interest
                continue
            if category == 'values_changed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'value changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = get_val(v['old_value'])
                    tmp['new_value'] = get_val(v['new_value'])
                    table_data.append(tmp)
            elif category == 'type_changes':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'type changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = f'{v["old_type"]} ("{get_val(v["old_value"])}")'
                    tmp['new_value'] = f'{v["new_type"]} ("{get_val(v["new_value"])}")'
                    table_data.append(tmp)
            elif category == 'iterable_item_removed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'item removed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = get_val(v)
                    tmp['new_value'] = '-'
                    table_data.append(tmp)
            elif category == 'iterable_item_added':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'item added'
                    tmp['changed'] = k.replace("root['", '').replace("']", '')
                    tmp['old_value'] = '-'
                    tmp['new_value'] = get_val(v)
                    table_data.append(tmp)
            else:
                print(f'!!! Currently unhandled category {category}.')
                exit()

    return table_data


def get_service_sets_diff(diff):
    table_data = []
    for d in diff:
        for category, changes in d['diff'].items():
            if category == 'dictionary_item_removed':
                # not of any interest
                continue
            if category == 'dictionary_item_added':
                # not of any interest
                continue
            if category == 'values_changed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'value changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '').replace("services['", '') + "']"
                    tmp['old_value'] = get_val(v['old_value'])
                    tmp['new_value'] = get_val(v['new_value'])
                    table_data.append(tmp)
            elif category == 'type_changes':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'type changed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '').replace("services['", '') + "']"
                    tmp['old_value'] = f'{v["old_type"]} ("{get_val(v["old_value"])}")'
                    tmp['new_value'] = f'{v["new_type"]} ("{get_val(v["new_value"])}")'
                    table_data.append(tmp)
            elif category == 'iterable_item_removed':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'item removed'
                    tmp['changed'] = k.replace("root['", '').replace("']", '').replace("services['", '') + "']"
                    tmp['old_value'] = get_val(v)
                    tmp['new_value'] = '-'
                    table_data.append(tmp)
            elif category == 'iterable_item_added':
                for k, v in changes.items():
                    tmp = {}
                    tmp['object_name'] = d['object_name']
                    tmp['uuid'] = d['uuid']
                    tmp['what'] = 'item added'
                    tmp['changed'] = k.replace("root['", '').replace("']", '').replace("services['", '') + "']"
                    tmp['old_value'] = '-'
                    tmp['new_value'] = get_val(v)
                    table_data.append(tmp)
            else:
                print(f'!!! Currently unhandled category {category}.')
                exit()

    return table_data


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # read both files
    success, current_basket = lib.disk.read_file(args.current_basket)
    if not success:
        lib.base.cu(current_basket)
    current_basket = json.loads(current_basket)
    success, new_basket = lib.disk.read_file(args.new_basket)
    if not success:
        lib.base.cu(new_basket)
    new_basket = json.loads(new_basket)

    # init some vars
    msg = ''

    # compare and print datafields
    current_datafields = normalize_datafields(current_basket)
    new_datafields = normalize_datafields(new_basket)
    added, changed, removed = compare_datafields(current_datafields, new_datafields)
    # print(f'🟢 Added Datafields:')
    if changed:
        print(f'🟡 Changed Datafields:\n')
        print(lib.base.get_table(
            get_datafields_diff(changed),
            cols=['uuid', 'varname', 'what', 'changed', 'old_value', 'new_value'],
            header=['uuid (-12:)', 'varname', 'what', 'changed', 'old value', 'new value'],
        ))
    # print(f'🔴 Removed Datafields:')

    # compare and print commands
    current_commands = normalize_commands(current_basket)
    new_commands = normalize_commands(new_basket)
    added, changed, removed = compare_commands(current_commands, new_commands)
    # print(f'🟢 Added Commands:')
    if changed:
        print(f'🟡 Changed Commands:\n')
        print(lib.base.get_table(
            get_commands_diff(changed),
            cols=['uuid', 'object_name', 'what', 'changed', 'old_value', 'new_value'],
            header=['uuid (-12:)', 'object_name', 'what', 'changed', 'old value', 'new value'],
        ))
    # print(f'🔴 Removed Commands:')

    # compare and print host templates
    current_host_templates = normalize_host_templates(current_basket)
    new_host_templates = normalize_host_templates(new_basket)
    added, changed, removed = compare_host_templates(current_host_templates, new_host_templates)
    # print(f'🟢 Added Host Templates:')
    if changed:
        print(f'🟡 Changed Host Templates:\n')
        print(lib.base.get_table(
            get_host_templates_diff(changed),
            cols=['uuid', 'object_name', 'what', 'changed', 'old_value', 'new_value'],
            header=['uuid (-12:)', 'object_name', 'what', 'changed', 'old value', 'new value'],
        ))
    # print(f'🔴 Removed Host Templates:')

    # compare and print service templates
    current_service_templates = normalize_service_templates(current_basket)
    new_service_templates = normalize_service_templates(new_basket)
    added, changed, removed = compare_service_templates(current_service_templates, new_service_templates)
    # print(f'🟢 Added Service Templates:')
    if changed:
        print(f'🟡 Changed Service Templates:\n')
        print(lib.base.get_table(
            get_service_templates_diff(changed),
            cols=['uuid', 'object_name', 'what', 'changed', 'old_value', 'new_value'],
            header=['uuid (-12:)', 'object_name', 'what', 'changed', 'old value', 'new value'],
        ))
    # print(f'🔴 Removed Service Templates:')

    # compare and print service sets
    current_service_sets = normalize_service_sets(current_basket)
    new_service_sets = normalize_service_sets(new_basket)
    added, changed, removed = compare_service_sets(current_service_sets, new_service_sets)
    # print(f'🟢 Added Service Sets:')
    if changed:
        print(f'🟡 Changed Service Sets:\n')
        print(lib.base.get_table(
            get_service_sets_diff(changed),
            cols=['uuid', 'object_name', 'what', 'changed', 'old_value', 'new_value'],
            header=['uuid (-12:)', 'object_name', 'what', 'changed', 'old value', 'new value'],
        ))
    # print(f'🔴 Removed Service Sets:')

    # over and out
    lib.base.oao(msg)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
