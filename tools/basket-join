#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import argparse
import collections
import json
import os
import sys

try:
    import colorama
    colorama.init(autoreset=True)
except ImportError:
    colorama = False

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023051201'

DESCRIPTION = 'A tool to join icingaweb2 director baskets (with or without uuids).'


skip_plugins = [
    'example',
    'dummy',
]


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V',
        '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--output-file',
        help='Set the output file.',
        dest='OUTPUT_FILE',
        type=str,
        default='icingaweb2-module-director-basket.json',
    )

    return parser.parse_args()


def warn_print(msg, **kwargs):
    msg = msg.strip()
    if colorama:
        print(colorama.Fore.YELLOW + 'Warning: {}'.format(msg), **kwargs)
    else:
        print(msg, **kwargs)


def err_print(msg, **kwargs):
    msg = msg.strip()
    if colorama:
        print(colorama.Fore.RED + 'Error: {}'.format(msg), **kwargs)
    else:
        print(msg, **kwargs)


class DuplicateKeyError(ValueError):
    pass


def raise_on_duplicate_keys(ordered_pairs):
    """Raise DuplicateKeyError if a duplicate key exists in provided ordered list of pairs, otherwise return a dict."""
    dict_out = {}
    for key, val in ordered_pairs:
        if key in dict_out:
            raise DuplicateKeyError('Duplicate key: {}'.format(key))
        else:
            dict_out[key] = val
    return dict_out


class BasketJoiner:
    def __init__(self):
        self.data = collections.defaultdict(dict)
        self.uuids2datafields = {}
        self.highest_datafield_id = 0


    def save_json_to_file(self, filename):
        try:
            with open(filename, 'w') as file:
                json.dump(self.data, file, sort_keys=False, indent=4, separators=(',', ': '))
                file.write('\n')
                print('Written to file {}'.format(filename))
        except FileNotFoundError as e:
            err_print('{}.'.format(e))
            return False
        return True


    def join_with_file(self, basket_file):
        new_datafield_ids = {} # this is reset for each file
        if os.path.isfile(basket_file):
            print('File: {}'.format(basket_file))
            with open(basket_file, 'rb') as file:
                try:
                    basket_data = json.load(file, object_pairs_hook=raise_on_duplicate_keys)
                except json.decoder.JSONDecodeError:
                    err_print('Could not parse basket file. Skipping...')
                    return False
                except DuplicateKeyError as e:
                    err_print(str(e))
                    return False

            try:
                if 'Datafield' in basket_data:
                    for key, value in basket_data['Datafield'].items():
                        uuid = value.get('uuid')
                        if uuid in self.uuids2datafields:
                            current_value = self.data['Datafield'][self.uuids2datafields[uuid]]
                            if current_value != value:
                                err_print('The objects "[Datafield][{}]" and "[Datafield][{}]" have the same uuid ("{}") but not the same content. Please fix this, aborting...'.format(
                                    value["varname"],
                                    current_value["varname"],
                                    uuid,
                                ))
                                return False
                        else:
                            self.highest_datafield_id += 1
                            if uuid:
                                self.uuids2datafields[uuid] = str(self.highest_datafield_id)
                            self.data['Datafield'][str(self.highest_datafield_id)] = value
                            new_datafield_ids[key] = self.highest_datafield_id
            except:
                err_print('Invalid basket definition file {}'.format(basket_file))
                return False

            for parent_key, parent_value in basket_data.items():
                if parent_key == 'Datafield':
                    # already done above
                    continue
                else:
                    for key, value in parent_value.items():
                        fields = value.get('fields')
                        if fields:
                            for field in fields:
                                old_datafield_id = field['datafield_id']
                                field['datafield_id'] = new_datafield_ids[str(old_datafield_id)]
                        self.data[parent_key][key] = value
        return True


    def validate_uuids(self):
        uuids = []
        objects_without_uuids = []
        for parent_key, parent_value in self.data.items():
            for key, value in parent_value.items():
                if 'uuid' in value:
                    uuids.append(value['uuid'])
                else:
                    if parent_key == 'Datafield':
                        objects_without_uuids.append('[{}][{}] (Datafield)'.format(parent_key, value["varname"]))
                    else:
                        objects_without_uuids.append('[{}][{}]'.format(parent_key, key))

                # descent into services of Service Sets
                if 'services' in value and value['services']:
                    for service_key, service_value in value['services'].items():
                        if 'uuid' in service_value:
                            uuids.append(service_value['uuid'])
                        else:
                            objects_without_uuids.append('[{}][{}][{}] (Service)'.format(parent_key, key, service_key))

        if objects_without_uuids:
            warn_print('\nFound objects without uuids:')
            print('* ', end='')
            print('\n* '.join(objects_without_uuids))

        unique_uuids = set(uuids)
        if len(uuids) != len(unique_uuids):
            for uuid in unique_uuids:
                uuids.remove(uuid)
            err_print('There are duplicate uuids:')
            print('* ', end='')
            print('\n* '.join(uuids))
            return False
        return True


def main():
    args = parse_args()

    basket_joiner = BasketJoiner()
    if basket_joiner.join_with_file('assets/icingaweb2-module-director/all-the-rest.json') is False:
        sys.exit(3)

    directories = os.listdir('check-plugins')
    for directory in directories:
        if directory in skip_plugins:
            continue

        basket_file = os.path.join('check-plugins', directory, 'icingaweb2-module-director', '{}.json'.format(directory))
        if basket_joiner.join_with_file(basket_file) is False:
            sys.exit(3)

    directories = os.listdir('notification-plugins')
    for directory in directories:
        if directory in skip_plugins:
            continue

        basket_file = os.path.join('notification-plugins', directory, 'icingaweb2-module-director', '{}.json'.format(directory))
        if basket_joiner.join_with_file(basket_file) is False:
            sys.exit(3)
    if basket_joiner.validate_uuids() is False:
        sys.exit(3)

    if basket_joiner.save_json_to_file(args.OUTPUT_FILE) is False:
        sys.exit(3)

if __name__ == '__main__':
    main()
