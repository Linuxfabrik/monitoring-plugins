#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import argparse
import importlib
import json
import os
import re
import sys
import uuid
import yaml

try:
    import colorama
    colorama.init(autoreset=True)
except ImportError:
    colorama = False

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025030901'

DESCRIPTION = 'A tool to generate Icinga Director baskets from a check plugin.'

DEFAULT_VARIANTS = [
    'linux',
]


skip_plugins = [
    'example',
    'dummy',
]


skip_params = [
    '--test'
]


# case does not matter, the regex uses the ignorecase option
regex_replace_words = {
    r'\bAES\b':              'AES',
    r'\bBorgBackup\b':       'BorgBackup',
    r'\bCPU\b':              'CPU',
    r'\bDES\b':              'DES',
    r'\bDNS\b':              'DNS',
    r'\bFAH\b':              'FAH',
    r'\bFail2ban\b':         'Fail2ban',
    r'\bFortiOS\b':          'FortiOS',
    r'\bFQDN\b':             'FQDN',
    r'\bFS RO\b':            'FS RO',
    r'\bFS\b':               'FS',
    r'\bGC\b':               'GC',
    r'\bHA\b':               'HA',
    r'\bHAProxy\b':          'HAProxy',
    r'\bhttpd\b':            'httpd',
    r'\bHypermetrodomain\b': 'Hyper Metro Domain',
    r'\bHypermetropair\b':   'Hyper Metro Pair',
    r'\bID\b':               'ID',
    r'\bidSite\b':           'idSite',
    r'\bIO\b':               'I/O',
    r'\bIPMI\b':             'IPMI',
    r'\bipv4\b':             'IPv4',
    r'\bipv6\b':             'IPv6',
    r'\bJSON\b':             'JSON',
    r'\bKEMP\b':             'KEMP',
    r'\bKThreads\b':         'KThreads',
    r'\bKVM\b':              'KVM',
    r'\bLibreNMS\b':         'LibreNMS',
    r'\bMD5\b':              'MD5',
    r'\bMem\b':              'Memory',
    r'\bMIB\b':              'MIB',
    r'\bMIBdir\b':           'MIBdir',
    r'\bMod Qos\b':          'mod_qos',
    r'\bmydumper\b':         'mydumper',
    r'\bMySQL\b':            'MySQL',
    r'\bNTP\b':              'NTP',
    r'\bOK\b':               'OK',
    r'\bOpenVPN\b':          'OpenVPN',
    r'\bPHP Fpm\b':          'PHP-FPM',
    r'\bPHP-FPM\b':          'PHP-FPM',
    r'\bPHP\b':              'PHP',
    r'\bpip\b':              'pip',
    r'\bQTS\b':              'QTS',
    r'\bRocketchat\b':       'Rocket.Chat',
    r'\bRPM\b':              'RPM',
    r'\bRW\b':               'RW',
    r'\bSEL\b':              'SEL',
    r'\bSELinux\b':          'SELinux',
    r'\bSHA\b':              'SHA',
    r'\bSlowReq\b':          'SlowReq',
    r'\bSMART\b':            'SMART',
    r'\bSNMP\b':             'SNMP',
    r'\bSNMPversion\b':      'SNMP Version',
    r'\bTCP6\b':             'TCP6',
    r'\bTCP\b':              'TCP',
    r'\bUDP6\b':             'UDP6',
    r'\bUDP\b':              'UDP',
    r'\bURL\b':              'URL',
    r'\bV3':                 'v3',
    r'\bVM\b':               'VM',
    r'\bXA\b':               'XA',
    r'\bXCA\b':              'XCA',
}


#command_field_id = 1


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V',
        '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--plugin-file',
        help='Set the plugin file. Use this if you want to generate the basket for only one plugin.',
        dest='PLUGIN_FILE',
        type=str,
    )

    parser.add_argument(
        '--auto',
        help='Automatically generate a basket for each plugin.',
        dest='AUTO',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def save_json_to_file(data, filename):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file, sort_keys=False, indent=4, separators=(',', ': '))
            file.write('\n')
    except FileNotFoundError as e:
        err_print('{}. Ignoring...'.format(e))


def find_long_param(params):
    for param in params:
        if param.startswith('--'):
            return param


def get_varname(check, param):
    param = param.lstrip("-")
    return '{}_{}'.format(check, param).replace('-', '_')


def help2description(help_text):
    help_text = re.sub(r' Default:.*%\(default\)s.*$', '', help_text)
    help_text = re.sub(r'\n\s*', ' ', help_text)
    return help_text


def lf_title(string):
    string = string.title()
    for regex, sub in regex_replace_words.items():
        string = re.sub(regex, sub, string, flags=re.IGNORECASE)
    return string


def get_caption(check, long_param):
    return lf_title('{}: {}'.format(check.replace("-", " "), long_param.lstrip("-").replace("-", " ")))


def get_visibility(varname):
    hide_if_present = [
        'password',
        'token',
    ]
    if any(hide_if_present_string in varname for hide_if_present_string in hide_if_present):
        return 'hidden'
    return 'visible'


def _return_parser(self):
    return self


def warn_print(msg):
    msg = msg.strip()
    if colorama:
        print(colorama.Fore.YELLOW + 'Warning: {}'.format(msg))
    else:
        print(msg)


def err_print(msg):
    msg = msg.strip()
    if colorama:
        print(colorama.Fore.RED + 'Error: {}'.format(msg))
    else:
        print(msg)


def get_plugin_args(plugin_file):
    check = os.path.basename(plugin_file)

    # Overwrite the parse_args() function that we usually call in our checks to simply return the parser
    argparse.ArgumentParser.parse_args = _return_parser

    spec = importlib.util.spec_from_loader(check, importlib.machinery.SourceFileLoader(check, plugin_file))
    plugin_module = importlib.util.module_from_spec(spec)

    # prevent exit() in the module from closing stdin
    orig_sys_stdin_close = sys.stdin.close
    sys.stdin.close = lambda _: None
    try:
        spec.loader.exec_module(plugin_module)
    except Exception as e:
        err_print('Exception during check execution: {}'.format(e))
        return None
    except SystemExit as e:
        err_print('SystemExit during check execution: {}'.format(e))
        return None
    finally:
        sys.stdin.close = orig_sys_stdin_close

    return plugin_module.parse_args()


def get_data_template():
    return {
        "Command": {},
        "ServiceTemplate": {},
        "Notification": {},
        "DataList": {},
        "Datafield": {},
    }


def get_command_template(data, object_name, command, imports=None, methods_execute='PluginCheck'):
    if imports is None:
        data["Command"][object_name] = {
            "arguments": {
            },
            "command": command,
            "disabled": False,
            "fields": [],
            "imports": [],
            "is_string": None,
            "methods_execute": methods_execute,
            "object_name": object_name,
            "object_type": "object",
            "timeout": "10",
            "vars": {},
            "zone": None
        }
    else:
        # only set the required options, the rest will be done by the import
        data["Command"][object_name] = {
            "arguments": {
            },
            "command": command,
            "disabled": False,
            "fields": [],
            "imports": imports,
            "is_string": None,
            "methods_execute": None,
            "object_name": object_name,
            "object_type": "object",
            "timeout": None,
            "vars": {},
            "zone": None
        }
    return data


def get_service_template(data, object_name, check_command, check_name, description, imports=None, use_agent=None):
    # description = re.sub(r'\n\s*', '\r\n', description) use this for line breaks in icingaweb2
    description = re.sub(r'\n\s*', ' ', description)
    if imports is None:
        data["ServiceTemplate"][object_name] = {
            "action_url": None,
            "apply_for": None,
            "assign_filter": None,
            "check_command": check_command,
            "check_interval": 60,
            "check_period": None,
            "check_timeout": None,
            "command_endpoint": None,
            "disabled": False,
            "display_name": None,
            "enable_active_checks": None,
            "enable_event_handler": None,
            "enable_flapping": None,
            "enable_notifications": True,
            "enable_passive_checks": None,
            "enable_perfdata": None,
            "event_command": None,
            "fields": [],
            "flapping_threshold_high": None,
            "flapping_threshold_low": None,
            "groups": [],
            "host": None,
            "icon_image": f"{check_name}.svg",
            "icon_image_alt": None,
            "imports": [
                "tpl-service-generic"
            ],
            "max_check_attempts": 5,
            "notes": f"{description}",
            "notes_url": f"https://github.com/Linuxfabrik/monitoring-plugins/tree/main/check-plugins/{check_name}",
            "object_name": object_name,
            "object_type": "template",
            "retry_interval": 15,
            "service_set": None,
            "template_choice": None,
            "use_agent": use_agent,
            "use_var_overrides": None,
            "vars": {
                "criticality": "C"
            },
            "volatile": None,
            "zone": None
        }
    else:
        # only set the required options, the rest will be done by the import
        data["ServiceTemplate"][object_name] = {
            "action_url": None,
            "apply_for": None,
            "assign_filter": None,
            "check_command": check_command,
            "check_interval": None,
            "check_period": None,
            "check_timeout": None,
            "command_endpoint": None,
            "disabled": False,
            "display_name": None,
            "enable_active_checks": None,
            "enable_event_handler": None,
            "enable_flapping": None,
            "enable_notifications": True,
            "enable_passive_checks": None,
            "enable_perfdata": None,
            "event_command": None,
            "fields": [],
            "flapping_threshold_high": None,
            "flapping_threshold_low": None,
            "groups": [],
            "host": None,
            "icon_image": None,
            "icon_image_alt": None,
            "imports": imports,
            "max_check_attempts": None,
            "notes": None,
            "notes_url": None,
            "object_name": object_name,
            "object_type": "template",
            "retry_interval": None,
            "service_set": None,
            "template_choice": None,
            "use_agent": use_agent,
            "use_var_overrides": None,
            "vars": {
                "criticality": "C"
            },
            "volatile": None,
            "zone": None
        }
    return data


def get_notification_template(data, object_name, check_command):
    data["Notification"][object_name] = {
        "apply_to": None,
        "assign_filter": None,
        "command": check_command,
        "disabled": False,
        "fields": [],
        "host": None,
        "imports": [],
        "notification_interval": 0,
        "object_name": object_name,
        "object_type": "template",
        "period": "7x24",
        "service": None,
        "states": [],
        "times_begin": 10,
        "times_end": None,
        "types": [
            "Acknowledgement",
            "Custom",
            "Problem",
            "Recovery"
        ],
        "user_groups": [],
        "users": [],
        "vars": {},
        "zone": None
    }
    return data

def offer_selection(options):
    options = list(options)
    for index, text in enumerate(options):
        print('{}: {}'.format(index, text))

    print('n: treat as a new object and generate a new uuid')

    print('- ' * 40)
    try:
        while True:
            selection = input('Please choose the corresponding object, or type "n" to generate a new uuid: ')
            if selection == 'n':
                return None
            try:
                if int(selection) < len(options):
                    return options[int(selection)]
            except ValueError:
                print('\nFailed to parse selection.')
    except KeyboardInterrupt:
        sys.exit()


def manage_uuids(data, old_data=None):
    if old_data:
        reused_uuid_objects = []
        for parent_key, parent_value in data.items():
            if parent_key == 'Datafield':
                old_varnames = {value['varname']: key for key, value in old_data.get('Datafield', {}).items()}
                for key, value in parent_value.items():
                    varname = value['varname']
                    if varname in old_varnames:
                        try:
                            data[parent_key][key]['uuid'] = old_data[parent_key][old_varnames[varname]]['uuid']
                            reused_uuid_objects.append('[{}][{}]'.format(parent_key, value["varname"]))
                        except KeyError as e:
                            if e.args[0] == 'uuid':
                                # could not find the uuid in the existing basket, therefore skipping so a new one is generated further down
                                continue
                            old_uuid = None
                    else:
                        print('\nCould not find the corresponding object for "[{}][{}]". Which uuid should I use?'.format(parent_key, value["varname"]))
                        selection = offer_selection(old_varnames.keys())
                        if selection:
                            data[parent_key][key]['uuid'] = old_data[parent_key][old_varnames[selection]]['uuid']
                            reused_uuid_objects.append('[{}][{}]'.format(parent_key, value["varname"]))

            else:
                for key, value in parent_value.items():
                    try:
                        old_uuid = old_data[parent_key][key]['uuid']
                    except KeyError as e:
                        if e.args[0] == 'uuid':
                            # could not find the uuid in the existing basket, therefore skipping so a new one is generated further down
                            continue
                        old_uuid = None

                    if old_uuid is not None:
                        data[parent_key][key]['uuid'] = old_uuid
                        reused_uuid_objects.append('[{}][{}]'.format(parent_key, key))
                    else:
                        print('\nCould not find the corresponding object for "[{}][{}]".'.format(parent_key, key))
                        selection = offer_selection(old_data.get(parent_key, {}).keys())
                        if selection:
                            data[parent_key][key]['uuid'] = old_data[parent_key][selection]['uuid']
                            reused_uuid_objects.append('[{}][{}]'.format(parent_key, key))

        if reused_uuid_objects:
            print('\nFound an object with the same name in the old basket, reusing the uuid for:\n* ', end='')
            print('\n* '.join(reused_uuid_objects))

        warn_print('\n' + r'Please make sure the generated uuid mappings are correct using `git diff --ignore-matching-lines \'\"[[:digit:]]+\": \{\' --ignore-matching-lines \'\"datafield_id\":\'`.')

    new_uuid_objects = []
    uuids = []
    for parent_key, parent_value in data.items():
        for key, value in parent_value.items():
            if 'uuid' not in value:
                if parent_key == 'Datafield':
                    new_uuid_objects.append('[{}][{}]'.format(parent_key, value["varname"]))
                else:
                    new_uuid_objects.append('[{}][{}]'.format(parent_key, key))
                data[parent_key][key]['uuid'] = str(uuid.uuid4())
            uuids.append(value['uuid'])

    unique_uuids = set(uuids)
    if len(uuids) != len(unique_uuids):
        for uuid_ in unique_uuids:
            uuids.remove(uuid_)
        err_print('There are duplicate uuids! Aborting...')
        print('* ', end='')
        print('\n* '.join(uuids))
        sys.exit(3)

    if new_uuid_objects:
        print('\nAdding uuid to the following items (this means we are assuming they are new):\n* ', end='')
        print('\n* '.join(new_uuid_objects))

    return data


def apply_overwrites(data, overwrites):
    for key, value in overwrites.items():
        try:
            exec('data{} = value'.format(key), {}, {'value': value, 'data': data})
        except KeyError:
            err_print('Could not apply overwrite "{}", as the path was not found. Continuing...'.format(key))

    return data


def sanitize_default_value(value):
    value = value.replace('$', '$$')
    if value.startswith('-'):
        value = '\\' + value
    return value


def parse_plugin_args(data, plugin_args, check_name, command_object_name, service_object_name, varname_suffix='', service_object_parent_key='ServiceTemplate', explicitly_set_fields_in_service_object=False, command_field_id=1):

    # argparse action classes
    # class BooleanOptionalAction(Action):
    # class _StoreAction(Action):
    # class _StoreConstAction(Action):
    # class _AppendAction(Action):
    # class _AppendConstAction(Action):
    # class _CountAction(Action):
    # class _HelpAction(Action):
    # class _VersionAction(Action):
    # class _SubParsersAction(Action):
    #     class _ChoicesPseudoAction(Action):

    for action in plugin_args._actions:
        long_param = find_long_param(action.option_strings)
        if action.help == argparse.SUPPRESS:
            print(f'Skipping the "{long_param}" parameter as it is suppressed')
            continue
        if not long_param:
            warn_print('Could not find a long parameter for:\n{}'.format(action))
            continue
        if long_param in skip_params:
            continue
        varname = get_varname(check_name + varname_suffix, long_param)

        if isinstance(action, argparse._VersionAction):
            continue

        if isinstance(action, argparse._HelpAction):
            continue

        if isinstance(action, (argparse._StoreAction, argparse._AppendAction)):
            data['Command'][command_object_name]['arguments'][long_param] = {
                "value": f"${varname}$"
            }
            if isinstance(action, argparse._AppendAction):
                data['Command'][command_object_name]['arguments'][long_param]['repeat_key'] = True

            data['Command'][command_object_name]['fields'].append({
                "datafield_id": command_field_id,
                "is_required": 'y' if action.required else 'n',
                "var_filter": None
            })

            if explicitly_set_fields_in_service_object:
                # needed as a workaround, as the inheritance of fields from command to notification template does not work in the icinga director
                data[service_object_parent_key][service_object_name]['fields'].append({
                    "datafield_id": command_field_id,
                    "is_required": 'y' if action.required else 'n',
                    "var_filter": None
                })

            if action.choices is not None:
                datalist_name = '{}_list'.format(varname)
                if isinstance(action, argparse._AppendAction):
                    target_data_type = 'array'
                else:
                    target_data_type = 'string'
                data['Datafield'][str(command_field_id)] = {
                    "varname": varname,
                    "caption": get_caption(check_name, long_param),
                    "description": help2description(action.help),
                    "datatype": r"Icinga\Module\Director\DataType\DataTypeDatalist",
                    "format": None,
                    "settings": {
                        "behavior": "strict",
                        "data_type": target_data_type,
                        "datalist": datalist_name
                    }
                }

                data['DataList'][datalist_name] = {
                    "list_name": datalist_name,
                    "owner": "icinga-admin",
                    "entries": [
                    ]
                }
                for choice in action.choices:
                    data['DataList'][datalist_name]['entries'].append(
                        {
                            "entry_name": choice,
                            "entry_value": lf_title(choice.replace("-", " ").replace("_", " ")),
                            "format": "string",
                            "allowed_roles": None
                        }
                    )
            elif isinstance(action, argparse._AppendAction):
                data['Datafield'][str(command_field_id)] = {
                    "varname": varname,
                    "caption": get_caption(check_name, long_param),
                    "description": help2description(action.help),
                    "datatype": r"Icinga\Module\Director\DataType\DataTypeArray",
                    "format": None,
                    "settings": {
                        "visibility": get_visibility(varname)
                    }
                }
            else:
                data['Datafield'][str(command_field_id)] = {
                    "varname": varname,
                    "caption": get_caption(check_name, long_param),
                    "description": help2description(action.help),
                    "datatype": r"Icinga\Module\Director\DataType\DataTypeString",
                    "format": None,
                    "settings": {
                        "visibility": get_visibility(varname)
                    }
                }

            if action.default is not None:
                if isinstance(action.default, str):
                    data[service_object_parent_key][service_object_name]['vars'][varname] = sanitize_default_value(action.default)
                else:
                    data[service_object_parent_key][service_object_name]['vars'][varname] = action.default

            command_field_id += 1
            continue

        if isinstance(action, argparse._StoreTrueAction):
            data['Command'][command_object_name]['arguments'][long_param] = {
                "set_if": f"${get_varname(check_name + varname_suffix, long_param)}$"
            }

            data['Command'][command_object_name]['fields'].append({
                "datafield_id": command_field_id,
                "is_required": "n",
                "var_filter": None
            })

            if explicitly_set_fields_in_service_object:
                # needed as a workaround, as the inheritance of fields from command to notification template does not work in the icinga director
                data[service_object_parent_key][service_object_name]['fields'].append({
                    "datafield_id": command_field_id,
                    "is_required": "n",
                    "var_filter": None
                })

            data['Datafield'][str(command_field_id)] = {
                "varname": varname,
                "caption": get_caption(check_name, long_param) + '?',
                "description": help2description(action.help),
                "datatype": r"Icinga\Module\Director\DataType\DataTypeBoolean",
                "format": None,
                "settings": {}
            }

            if action.default is not None:
                data[service_object_parent_key][service_object_name]['vars'][varname] = action.default

            command_field_id += 1
            continue

        warn_print('Unhandled action class: "{}".'.format(action.__class__.__name__))
    return data, command_field_id


def generate_basket(plugin_file, config=None, old_data=None):
    if config is None:
        config = {}
    if 'variants' not in config:
        config['variants'] = DEFAULT_VARIANTS

    plugin_args = get_plugin_args(plugin_file)
    if plugin_args is None:
        return None

    check_name = os.path.basename(plugin_file)

    data = get_data_template()
    command_field_id = 1

    if 'linux' in config['variants']:
        print('Generating "linux" variant.')
        command_object_name = 'cmd-check-{}'.format(check_name)
        service_object_name = 'tpl-service-{}'.format(check_name)
        command = '/usr/lib64/nagios/plugins/{}'.format(check_name)
        varname_suffix = ''

        data = get_command_template(
            data,
            command_object_name,
            command
        )

        data = get_service_template(
            data,
            service_object_name,
            command_object_name,
            check_name,
            plugin_args.description
        )

        data, command_field_id = parse_plugin_args(
            data,
            plugin_args,
            check_name,
            command_object_name,
            service_object_name,
            varname_suffix,
            command_field_id=command_field_id,
        )

    if 'sudo' in config['variants']:
        print('Generating "sudo" variant.')
        data = get_command_template(
            data,
            'cmd-check-{}-sudo'.format(check_name),
            '/usr/bin/sudo /usr/lib64/nagios/plugins/{}'.format(check_name),
            imports=[
                'cmd-check-{}'.format(check_name),
            ]
        )
        data = get_service_template(
            data,
            'tpl-service-{}-sudo'.format(check_name),
            'cmd-check-{}-sudo'.format(check_name),
            check_name,
            plugin_args.description,
            imports=[
                'tpl-service-{}'.format(check_name),
            ]
        )

    if 'no-agent' in config['variants']:
        print('Generating "no-agent" variant.')
        data = get_service_template(
            data,
            'tpl-service-{}-no-agent'.format(check_name),
            'cmd-check-{}'.format(check_name),
            check_name,
            plugin_args.description,
            imports=[
                service_object_name,
            ],
            use_agent=False
        )

    if 'windows' in config['variants']:
        print('Generating "windows" variant.')
        command_object_name = 'cmd-check-{}-windows'.format(check_name)
        service_object_name = 'tpl-service-{}-windows'.format(check_name)
        command = 'C:\\Program Files\\icinga2\\sbin\\linuxfabrik\\{}.exe'.format(check_name)
        varname_suffix = '_windows'

        data = get_command_template(
            data,
            command_object_name,
            command
        )

        # we noticed that importing the corresponding linux template (if it exists) would make the variables and settings more consistent and easier to set via the yml file.
        # after testing this, we realised that this only works if the variables have the same name in the linux and windows template.
        # this means that it works for the check execution settings and for example the criticality,
        # but not for the check-specific custom properties because we added `_windows_` into the windows variables,
        # for example `cpu_usage_warning` vs `cpu_usage_windows_warning`.
        # in retrospect, this was a mistake. if all the different template variants would use the same variables names, inheritance would work beautifully and as the user expects
        # so we will not implement this for now, as having some inherited and some non-inherited variables makes the handling very confusing.
        # at least now the windows and linux templates are strictly seperated.
        # in the future, we plan to move the default values of the variables from the service template to the command,
        # and reduce the number of different template variants.
        # perhaps we can make the variable names consistent during these changes and then use the imports.
        # when re-implementing this, make sure to remove any defaults from the windows template in get_service_template(),
        # such as the criticality - these variables should then be inherited.

        # if 'linux' in config['variants']:
        #     imports=[
        #         'tpl-service-{}'.format(check_name),
        #     ],
        # else:
        #     imports = None

        data = get_service_template(
            data,
            service_object_name,
            command_object_name,
            check_name,
            plugin_args.description,
            # imports=imports,
        )

        data, command_field_id = parse_plugin_args(
            data,
            plugin_args,
            check_name,
            command_object_name,
            service_object_name,
            varname_suffix,
            command_field_id=command_field_id,
        )

        data = get_command_template(
            data,
            'cmd-check-{}-windows-python'.format(check_name),
            'C:\\Windows\\py C:\\Program Files\\icinga2\\sbin\\linuxfabrik\\{}.py'.format(check_name),
            imports=[
                'cmd-check-{}-windows'.format(check_name),
            ]
        )

    if 'notification-plugin' in config['variants']:
        print('Generating "notification-plugin" variant.')
        command_object_name = 'cmd-notification-{}'.format(check_name)
        notification_object_name = 'tpl-notification-{}'.format(check_name)
        command = '/usr/lib64/nagios/plugins/notifications/{}'.format(check_name)
        varname_suffix = ''

        data = get_command_template(
            data,
            command_object_name,
            command,
            methods_execute='PluginNotification'
        )

        data = get_notification_template(
            data,
            notification_object_name,
            command_object_name,
        )

        data, command_field_id = parse_plugin_args(
            data,
            plugin_args,
            check_name,
            command_object_name,
            notification_object_name,
            varname_suffix,
            service_object_parent_key='Notification',
            explicitly_set_fields_in_service_object=True,
            command_field_id=command_field_id,
        )

    if 'overwrites' in config:
        print('Applying overwrites.')
        data = apply_overwrites(data, config['overwrites'])

    # delete empty parent keys, using a list to prevent "RuntimeError: dictionary changed size during iteration"
    for key in list(data.keys()):
        if not data[key]:
            del data[key]

    return manage_uuids(data, old_data)


def main():
    args = parse_args()

    if args.PLUGIN_FILE:
        plugin_dir = os.path.dirname(args.PLUGIN_FILE)
        check = os.path.basename(args.PLUGIN_FILE)

        output_file = os.path.join(plugin_dir, 'icingaweb2-module-director', '{}.json'.format(check))
        old_data = None
        if os.path.isfile(output_file):
            with open(output_file, 'rb') as file:
                print('Found an existing basket at {}, updating it.'.format(output_file))
                try:
                    old_data = json.load(file)
                except json.decoder.JSONDecodeError:
                    err_print('Could not parse existing basket file. Aborting...')
                    sys.exit(3)
        else:
            try:
                os.mkdir(os.path.join(plugin_dir, 'icingaweb2-module-director'))
            except FileExistsError:
                pass

        config_file = os.path.join(plugin_dir, 'icingaweb2-module-director', '{}.yml'.format(check))
        config = None
        if os.path.isfile(config_file):
            with open(config_file, 'rb') as file:
                print('Using config at {}.'.format(config_file))
                try:
                    config = yaml.safe_load(file)
                except yaml.scanner.ScannerError:
                    err_print('Could not parse config file. Aborting...')
                    sys.exit(3)

        save_json_to_file(generate_basket(args.PLUGIN_FILE, config, old_data), output_file)

    elif args.AUTO:
        directories = os.listdir('check-plugins')
        for directory in directories:
            if directory in skip_plugins:
                continue

            plugin_file = os.path.join('check-plugins', directory, directory)
            if os.path.isfile(plugin_file):
                print('\n' + '- ' * 40)
                print('Check: {}'.format(directory))
                print('- ' * 40)
                old_data = None
                output_file = os.path.join('check-plugins', directory, 'icingaweb2-module-director', '{}.json'.format(directory))
                if os.path.isfile(output_file):
                    with open(output_file, 'rb') as file:
                        print('Found an existing basket at {}, updating it.'.format(output_file))
                        try:
                            old_data = json.load(file)
                        except json.decoder.JSONDecodeError:
                            err_print('Could not parse existing basket file. Skipping check...')
                            continue
                else:
                    try:
                        os.mkdir(os.path.join('check-plugins', directory, 'icingaweb2-module-director'))
                    except FileExistsError:
                        pass

                config_file = os.path.join('check-plugins', directory, 'icingaweb2-module-director', '{}.yml'.format(directory))
                config = None
                if os.path.isfile(config_file):
                    with open(config_file, 'rb') as file:
                        print('Using config at {}.'.format(config_file))
                        try:
                            config = yaml.safe_load(file)
                        except yaml.scanner.ScannerError:
                            err_print('Could not parse config file. Skipping check...')
                            continue

                plugin_data = generate_basket(plugin_file, config, old_data)
                if plugin_data:
                    save_json_to_file(plugin_data, output_file)
                else:
                    err_print('No data for {}.'.format(directory))
                    sys.exit(3)

    else:
        err_print('Either --auto or --plugin-file is required.')
        sys.exit(2)


if __name__ == '__main__':
    main()
