#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import argparse
import json
import sys

try:
    import colorama
    colorama.init(autoreset=True)
except ImportError:
    colorama = False

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023112901'

DESCRIPTION = 'A tool to join icingaweb2 director baskets (with or without uuids).'


skip_plugins = [
    'example',
    'dummy',
]


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V',
        '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--input-file',
        help='Set the input file.',
        dest='INPUT_FILE',
        type=str,
        required=True,
    )

    parser.add_argument(
        '--output-file',
        help='Set the output file.',
        dest='OUTPUT_FILE',
        type=str,
        required=True,
    )

    return parser.parse_args()


def warn_print(msg, **kwargs):
    msg = msg.strip()
    if colorama:
        print(colorama.Fore.YELLOW + 'Warning: {}'.format(msg), **kwargs)
    else:
        print(msg, **kwargs)


def err_print(msg, **kwargs):
    msg = msg.strip()
    if colorama:
        print(colorama.Fore.RED + 'Error: {}'.format(msg), **kwargs)
    else:
        print(msg, **kwargs)


class DuplicateKeyError(ValueError):
    pass


def raise_on_duplicate_keys(ordered_pairs):
    """Raise DuplicateKeyError if a duplicate key exists in provided ordered list of pairs, otherwise return a dict."""
    dict_out = {}
    for key, val in ordered_pairs:
        if key in dict_out:
            raise DuplicateKeyError('Duplicate key: {}'.format(key))
        dict_out[key] = val
    return dict_out


class BasketUUIDRemover:
    def __init__(self):
        self.data = None


    def load_basket(self, filename):
        with open(filename, 'rb') as file:
            try:
                self.data = json.load(file, object_pairs_hook=raise_on_duplicate_keys)
            except json.decoder.JSONDecodeError:
                err_print('Could not parse basket file.')
                return False
            except DuplicateKeyError as e:
                err_print(str(e))
                return False
        return True


    def save_json_to_file(self, filename):
        try:
            with open(filename, 'w') as file:
                json.dump(self.data, file, sort_keys=False, indent=4, separators=(',', ': '))
                file.write('\n')
        except FileNotFoundError as e:
            err_print('{}.'.format(e))
            return False
        return True


    def remove_uuids(self):
        if self.data:
            for parent_key, parent_value in self.data.items():
                for key, value in parent_value.items():
                    if 'uuid' in value:
                        del self.data[parent_key][key]['uuid']

                    # descent into services of Service Sets
                    if 'services' in value and value['services']:
                        for service_key, service_value in value['services'].items():
                            if 'uuid' in service_value:
                                del self.data[parent_key][key]['services'][service_key]['uuid']


def main():
    args = parse_args()

    basket_uuid_remover = BasketUUIDRemover()
    basket_uuid_remover.load_basket(args.INPUT_FILE)
    basket_uuid_remover.remove_uuids()

    if basket_uuid_remover.save_json_to_file(args.OUTPUT_FILE) is False:
        sys.exit(3)

if __name__ == '__main__':
    main()
