#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

try:
    import psutil  # pylint: disable=C0413
except ImportError:
    lib.base.cu('Python module "psutil" is not installed.')


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071203'

DESCRIPTION = '''Checks the state of one or more Windows services. You have to provide the
                 case-insensitive "Service Name", not the "Display Name". Supports Python regular
                 expressions, so you are able to check multiple Windows services on a host with
                 almost the same name, for example.'''

DEFAULT_CRIT = None
DEFAULT_SEVERITY = 'warn'
DEFAULT_STATUS = ['running']
DEFAULT_STARTTYPE = 'automatic'
DEFAULT_WARN = '1:'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold. Accepts ranges. Default: "%(default)s"',
        dest='CRIT',
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--service',
        help='Name of the service. Supports Python Regular Expressions (regex).',
        dest='SERVICE',
        required=True,
    )

    parser.add_argument(
        '--starttype',
        help='Expected service start type. Default: %(default)s',
        dest='STARTTYPE',
        default=DEFAULT_STARTTYPE,
        choices=[
            'automatic',
            'disabled',
            'manual',
        ],
    )

    parser.add_argument(
        '--status',
        help='At least one expected service status (repeating). Default: running',
        dest='STATUS',
        default=None,   # due to https://bugs.python.org/issue16399, see in main() below
        action='append',
        choices=[
            'continue_pending',
            'pause_pending',
            'paused',
            'running',
            'start_pending',
            'stop_pending',
            'stopped',
        ],
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold. Accepts ranges. Default: "%(default)s"',
        dest='WARN',
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if not lib.base.WINDOWS:
        lib.base.cu('This check runs only on Windows.')

    # due to https://bugs.python.org/issue16399, set the default value here
    if args.STATUS is None:
        args.STATUS = DEFAULT_STATUS

    # init some vars
    msg = ''
    state = STATE_OK
    table_data = []
    services = {
        'continue_pending': 0,
        'pause_pending': 0,
        'paused': 0,
        'running': 0,
        'start_pending': 0,
        'stop_pending': 0,
        'stopped': 0,
    }

    # fetch data
    try:
        compiled_service_regex = re.compile(args.SERVICE, re.IGNORECASE)
        for s in psutil.win_service_iter():
            matches = re.search(compiled_service_regex, s.name())
            if matches:
                if s.status() in services.keys():
                    services[s.status()] += 1
                table_data.append(s.as_dict())
    except re.error as rerr:
        lib.base.cu('Invalid regex "{}": {}'.format(args.SERVICE, rerr))
    except psutil.NoSuchProcess:
        lib.base.cu('Service "{}" not found'.format(args.SERVICE))

    if not table_data:
        lib.base.cu('Service "{} not found'.format(args.SERVICE))

    # alert: e.g. at least 10 but not more than 20 Windows-Services must meet --status
    if not lib.base.coe(lib.base.match_range(services[args.STATUS[0]], args.CRIT)):
        state = STATE_CRIT
    elif not lib.base.coe(lib.base.match_range(services[args.STATUS[0]], args.WARN)):
        state = STATE_WARN
    else:
        state = STATE_OK

    keys = ['name', 'display_name', 'status', 'start_type']
    headers = ['Service Name', 'Display Name', 'Status', 'Startup']
    # sort table by user tags
    msg += lib.base.get_table(table_data, keys, header=headers)

    if state == STATE_OK:
        msg = 'Everything is ok.\n\n' + msg
    else:
        msg = '{} {} named "{}" with status "{}" found, but expected "{}" {}.\n\n'.format(
            services[args.STATUS[0]],
            lib.txt.pluralize('service', services[args.STATUS[0]]),
            args.SERVICE,
            ''.join(args.STATUS),
            args.CRIT if state == STATE_CRIT else args.WARN,
            lib.base.state2str(state),
        ) + msg

    # over and out
    lib.base.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
