#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../service'

    def test_if_check_runs_EXAMPLE01_00(self):
        # invalid regex
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + " --test=stdout/EXAMPLE01,, --service '*'"))
        self.assertIn('Invalid regex "*": nothing to repeat at position 0', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)

    def test_if_check_runs_EXAMPLE01_01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + " --test stdout/EXAMPLE01,,0 --service='^bfe' --status=running --warning=1:1"))
        self.assertIn("Everything is ok. 1 service named r`^bfe` and start type ['automatic'] found, 1 in status ['running'] (thresholds 1:1/None).", stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE01_02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + " --test stdout/EXAMPLE01,,0 --service='Win.*' --starttype=automatic --status=continue_pending --status=pause_pending --status=paused --status=start_pending --status=stop_pending --status=stopped --warning 0"))
        self.assertIn("3 services named r`Win.*` and start type ['automatic'] found, 1 in status ['continue_pending', 'pause_pending', 'paused', 'start_pending', 'stop_pending', 'stopped'] (thresholds 0/None) [WARNING].", stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)


if __name__ == '__main__':
    unittest.main()
