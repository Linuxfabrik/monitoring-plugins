#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../redis-status'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegexpMatches(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE01,,0'))
        self.assertIn('Redis v3.2.12, standalone mode on 127.0.0.1:6379, /etc/redis.conf', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0'))
        self.assertIn('Redis v6.0.15, standalone mode on 127.0.0.1:6379, /etc/redis.conf', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Redis v3.0.7.9, standalone mode on 127.0.0.1:6379, /path/to/redis.conf', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE04(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE04,,0'))
        self.assertIn('Redis v3.0.7.9, standalone mode on 127.0.0.1:6379, /path/to/redis.conf', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE05(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE05,,0'))
        self.assertIn('Redis v5.0.3, standalone mode on 127.0.0.1:6379, /path/to/redis.conf', stdout)
        self.assertIn('99.7% memory usage [WARNING] (9.5MiB/9.5MiB, 10.0MiB peak, 21.6MiB RSS)', stdout)
        self.assertIn('maxmemory-policy=noeviction', stdout)
        self.assertIn('1 DB (db0) with 4 keys, 0.0 evicted keys, 0.0 expired keys', stdout)
        self.assertIn('hit rate 100.0% (4.5M hits, 0.0 misses)', stdout)
        self.assertIn('2.0 denied partial resync requests [WARNING]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE05_ignore_all(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --warning=100 --critical=100 --ignore-maxmemory0 --ignore-overcommit --ignore-somaxconn --ignore-sync-partial-err --ignore-thp --test=stdout/EXAMPLE05,,0'))
        self.assertIn('Redis v5.0.3, standalone mode on 127.0.0.1:6379, /path/to/redis.conf', stdout)
        self.assertIn('99.7% memory usage (9.5MiB/9.5MiB, 10.0MiB peak, 21.6MiB RSS)', stdout)
        self.assertIn('maxmemory-policy=noeviction', stdout)
        self.assertIn('1 DB (db0) with 4 keys, 0.0 evicted keys, 0.0 expired keys', stdout)
        self.assertIn('hit rate 100.0% (4.5M hits, 0.0 misses)', stdout)
        self.assertIn('2.0 denied partial resync requests', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)


if __name__ == '__main__':
    unittest.main()
