#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import *
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../haproxy-status'

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE01,,0'))
        self.assertIn('frontend-https FRONTEND: 2666 sessions (88.9%) [WARNING], frontend-https-8443 FRONTEND: STOP', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0'))
        self.assertIn('Malformed HAProxy status info.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Proxy name          ! Server name ! Sessions ! RqBytes   ! RspBytes ! Rsp5xx ! Rq/s ! Status', stdout)
        self.assertIn('--------------------+-------------+----------+-----------+----------+--------+------+-------', stdout)
        self.assertIn('frontend-https      ! FRONTEND    ! 1/3000   ! 267.3MiB  ! 439.1MiB ! 588    ! 0    ! OPEN  ', stdout)
        self.assertIn('frontend-https-8443 ! FRONTEND    ! 0/3000   ! 1004.8KiB ! 14.8MiB  ! 72     ! 0    ! OPEN  ', stdout)
        self.assertIn('rabbitmq-35671-5672 ! FRONTEND    ! 0/3000   ! 0.0B      ! 0.0B     !        ! 0    ! OPEN  ', stdout)
        self.assertIn('rabbitmq-35671-5672 ! srvmq01     ! 0        ! 0.0B      ! 0.0B     !        !      ! UP    ', stdout)
        self.assertIn('rabbitmq-35671-5672 ! BACKEND     ! 0/300    ! 0.0B      ! 0.0B     !        !      ! UP    ', stdout)
        self.assertIn('srvvcs01-80         ! srvvcs01    ! 0        ! 111.2MiB  ! 361.6MiB ! 5      !      ! UP    ', stdout)
        self.assertIn('srvvcs01-80         ! BACKEND     ! 0/300    ! 111.2MiB  ! 361.6MiB ! 96     !      ! UP    ', stdout)
        self.assertIn('srvvcs01-5050       ! srvvcs01    ! 0        ! 150.2MiB  ! 137.4KiB ! 0      !      ! UP    ', stdout)
        self.assertIn('srvvcs01-5050       ! BACKEND     ! 0/300    ! 150.2MiB  ! 137.4KiB ! 0      !      ! UP    ', stdout)
        self.assertIn('srvlog01-9000       ! srvlog01    ! 0        ! 990.6KiB  ! 14.7MiB  ! 0      !      ! UP    ', stdout)
        self.assertIn('srvlog01-9000       ! BACKEND     ! 0/300    ! 990.6KiB  ! 14.7MiB  ! 0      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6082       ! srvapp01    ! 0        ! 973.6KiB  ! 2.8MiB   ! 0      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6082       ! BACKEND     ! 0/300    ! 974.0KiB  ! 2.8MiB   ! 3      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6081       ! srvapp01    ! 0        ! 976.0KiB  ! 2.6MiB   ! 0      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6081       ! BACKEND     ! 0/300    ! 976.2KiB  ! 2.6MiB   ! 1      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6090       ! srvapp01    ! 0        ! 979.6KiB  ! 3.2MiB   ! 0      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6090       ! BACKEND     ! 0/300    ! 979.8KiB  ! 3.2MiB   ! 1      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6083       ! srvapp01    ! 0        ! 2.0MiB    ! 65.8MiB  ! 0      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6083       ! BACKEND     ! 0/300    ! 2.0MiB    ! 65.8MiB  ! 5      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6080       ! srvapp01    ! 0        ! 1018.8KiB ! 2.8MiB   ! 0      !      ! UP    ', stdout)
        self.assertIn('srvapp01-6080       ! BACKEND     ! 0/300    ! 1019.4KiB ! 2.8MiB   ! 4      !      ! UP    ', stdout)
        self.assertIn('stats               ! FRONTEND    ! 1/3000   ! 71.2KiB   ! 1.7MiB   ! 3      ! 1    ! OPEN  ', stdout)
        self.assertIn('stats               ! BACKEND     ! 0/300    ! 71.2KiB   ! 1.7MiB   ! 3      !      ! UP', stdout)

        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE01_lengthy(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --lengthy --test=stdout/EXAMPLE01,,0'))
        self.assertIn('frontend-https FRONTEND: 2666 sessions (88.9%) [WARNING], frontend-https-8443 FRONTEND: STOP', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE02_lengthy(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --lengthy --test=stdout/EXAMPLE02,,0'))
        self.assertIn('Malformed HAProxy status info.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)

    def test_if_check_runs_EXAMPLE03_lengthy(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --lengthy --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Proxy name', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

if __name__ == '__main__':
    unittest.main()