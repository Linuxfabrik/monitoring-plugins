#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413
import time  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = """Linuxfabrik GmbH, Zurich/Switzerland;
                originally written by Dominik Riva, Universitätsspital Basel/Switzerland"""
__version__ = '2023071201'


DESCRIPTION = """This plugin checks availability and performance of an ID DIACOS® installation
                 by doing a login, search and logout.
                 (https://www.id-suisse-ag.ch/loesungen/abrechnung/id-diacos/)"""

DEFAULT_COMPUTER = 'Brower_APP'
DEFAULT_CONCEPT_FILTER = '%25R239%3BC%3BD99.99'
DEFAULT_COUNTRY = 'CH'
DEFAULT_CRITICAL = 6000  # ms
DEFAULT_FORMAT = '%25T0%25C%3F%25I%25R'
DEFAULT_NO_PROXY = False
DEFAULT_SEARCHTEXT = 'Haut'
DEFAULT_SORT_MODE = '%25T'
DEFAULT_TIMEOUT = 7
DEFAULT_WARNING = 3000  # ms
DEFAULT_YEAR = '2020'
DEFAULT_IP = '127.0.0.1'
DEFAULT_URL = 'http://localhost:9999'


def parse_args():
    """Parse command line agruments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by v{2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always return OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Critical threshold for duration of login+search+logout. Default: %(default)s (ms)',
        dest='CRITICAL',
        type=int,
        default=DEFAULT_CRITICAL,
    )

    parser.add_argument(
        '--login-computer',
        help='user.Login argument COMPUTER. Default: %(default)s',
        dest='COMPUTER',
        default=DEFAULT_COMPUTER,
    )

    parser.add_argument(
        '--login-ip',
        help='user.Login argument IP. Default: %(default)s',
        dest='IP',
        default=DEFAULT_IP,
    )

    parser.add_argument(
        '--login-licence',
        help='user.Login argument LICENCE (required)',
        dest='LICENCE',
        required=True,
    )

    parser.add_argument(
        '--login-name',
        help='user.Login argument NAME (required)',
        dest='NAME',
        required=True,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--search-concept-filter',
        help='classification.SearchDiagnoses argument CONCEPT_FILTER. Default: %(default)s',
        dest='CONCEPT_FILTER',
        default=DEFAULT_CONCEPT_FILTER,
    )

    parser.add_argument(
        '--search-country',
        help='classification.SearchDiagnoses argument COUNTRY. Default: %(default)s',
        dest='COUNTRY',
        default=DEFAULT_COUNTRY,
    )

    parser.add_argument(
        '--search-format',
        help='classification.SearchDiagnoses argument FORMAT. Default: %(default)s',
        dest='FORMAT',
        default=DEFAULT_FORMAT,
    )

    parser.add_argument(
        '--search-searchtext',
        help='classification.SearchDiagnoses argument SEARCHTEXT. Default: %(default)s',
        dest='SEARCHTEXT',
        default=DEFAULT_SEARCHTEXT,
    )

    parser.add_argument(
        '--search-sort-mode',
        help='classification.SearchDiagnoses argument SORT_MODE. Default: %(default)s',
        dest='SORT_MODE',
        default=DEFAULT_SORT_MODE,
    )

    parser.add_argument(
        '--search-year',
        help='classification.SearchDiagnoses argument YEAR. Default: %(default)s',
        dest='YEAR',
        default=DEFAULT_YEAR,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='ID DIACOS URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Warning threshold for duration of login+search+logout. Default: %(default)s (ms)',
        dest='WARNING',
        type=int,
        default=DEFAULT_WARNING,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # analyze data
    if args.TEST is None:
        start_time = time.time()

        url = '{}/axis2/idlogikrest?__format__=json&serviceName=user.Login&COMPUTER={}&IP={}&NAME={}&LICENCE={}'.format(
            args.URL,
            args.COMPUTER,
            args.IP,
            args.NAME,
            args.LICENCE,
        )
        session = lib.base.coe(lib.url.fetch_json(
            url, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT
        ))
        session_id = session['resultItems'][0]['value']
        if len(session_id) < 32 + 1 + len(args.NAME):
            lib.base.cu('Session-ID {} too short'.format(session_id))
        login_duration = session['totalTimeMillis']

        url = '{}/axis2/idlogikrest?__format__=json&serviceName=classification.SearchDiagnoses&COUNTRY={}&YEAR={}&FORMAT={}&SORT_MODE={}&CONCEPT_FILTER={}&SESSION_ID={}&SEARCHTEXT={}'.format(
            args.URL,
            args.COUNTRY,
            args.YEAR,
            args.FORMAT,
            args.SORT_MODE,
            args.CONCEPT_FILTER,
            session_id,
            args.SEARCHTEXT,
        )
        search_result = lib.base.coe(lib.url.fetch_json(
            url, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT
        ))
        search_duration = search_result['totalTimeMillis']

        url = '{}/axis2/idlogikrest?__format__=json&serviceName=user.Logoff&SESSION_ID={}'.format(
            args.URL,
            session_id,
        )
        logout_result = lib.base.coe(lib.url.fetch_json(
            url, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT
        ))
        logout_duration = logout_result['totalTimeMillis']

        runtime = (time.time() - start_time) * 1000     # we get seconds and want ms
    else:
        # do not call the command, put in test data
        args.TEST[0] += '-login'
        stdout, stderr, retc = lib.test.test(args.TEST)
        result = json.loads(stdout)
        login_duration = result['totalTimeMillis']

        args.TEST[0] = args.TEST[0].replace('-login', '-searchDiagnoses')
        stdout, stderr, retc = lib.test.test(args.TEST)
        result = json.loads(stdout)
        search_duration = result['totalTimeMillis']

        args.TEST[0] = args.TEST[0].replace('-searchDiagnoses', '-logoff')
        stdout, stderr, retc = lib.test.test(args.TEST)
        result = json.loads(stdout)
        logout_duration = result['totalTimeMillis']

        runtime = login_duration + search_duration + logout_duration

    # build the message
    state = lib.base.get_state(runtime, args.WARNING, args.CRITICAL)
    msg = '{}ms for login, search and logout{}'.format(
        round(runtime, 2),
        lib.base.state2str(state, prefix=' '),
    )
    perfdata = lib.base.get_perfdata('runtime', runtime, 'ms', args.WARNING, args.CRITICAL, 0, args.TIMEOUT * 1000)
    perfdata += lib.base.get_perfdata('login_duration', login_duration, 'ms', None, None, 0, args.TIMEOUT * 1000)
    perfdata += lib.base.get_perfdata('search_duration', search_duration, 'ms', None, None, 0, args.TIMEOUT * 1000)
    perfdata += lib.base.get_perfdata('logout_duration', logout_duration, 'ms', None, None, 0, args.TIMEOUT * 1000)

    # over and out
    lib.base.oao(msg, state, perfdata=perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
