#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import os
import subprocess
import time
import unittest

CHECK_PLUGIN = 'cpu-usage'
REMOTE_DIR = '/tmp'  # work dir in container (where to find the CHECK_PLUGIN in the container)
LOCAL_DIR = '..'  # local work dir (where to find the CHECK_PLUGIN locally)
TIMEOUT = 0
TESTS = [
    {
        'containerfile': 'containerfiles/archlinux-vlatest',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',  # vs. 'localhost'
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/debian-v11',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/debian-v12',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/fedora-v41',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/rhel-v8',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/rhel-v9',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/ubuntu-v2004',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/ubuntu-v2204',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
    {
        'containerfile': 'containerfiles/ubuntu-v2404',
        'podman-run-params': '',
        'tests': [
            {
                'run-where': 'container',
                'plugin-params': '',
                'assert-regex': r'\d+\.\d+% -.* user:',
                'assert-retc': 0,
            },
        ],
    },
]

class TestCheck(unittest.TestCase):

    def test(self):
        """
        Test all Dockerfiles in the 'unit-test/containerfiles' directory.
        Builds, runs, and tests each container and validates the output, using podman.
        """
        for testcase in TESTS:
            if not os.path.isfile(testcase['containerfile']):
                self.fail(f"Containerfile {testcase['containerfile']} not found.")

            print(f"\n=== Testing {os.path.basename(testcase['containerfile'])} ===")
            image_name = f"lfmp-{os.path.basename(testcase['containerfile']).replace('-v', ':')}"
            container_name = f"lfmp-{os.path.basename(testcase['containerfile'])}"

            try:
                # Build the container image
                podman_cmd = [
                    "podman",
                    "build",
                    "--file",
                    testcase['containerfile'],
                    "--tag",
                    image_name,
                ]
                print(f"Build the container image: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )

                podman_cmd = [
                    "podman", "run",
                    "--name", container_name,
                    "--replace",
                    "--detach",  # run in detached mode
                ] + testcase['podman-run-params'].split() + image_name.split()
                print(f"Run the container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )

                print("Give the container a few seconds to start up")
                time.sleep(3)

                podman_cmd = [
                    "podman",
                    "cp",
                    "../lib",
                    f"{container_name}:{REMOTE_DIR}/",
                ]
                print(f"Copy local files into container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )
                podman_cmd = [
                    "podman",
                    "cp",
                    f"../{CHECK_PLUGIN}",
                    f"{container_name}:{REMOTE_DIR}/{CHECK_PLUGIN}",
                ]
                print(f"Copy local files into container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )

                # Check if /tmp/venv exists in the container
                podman_cmd = [
                    "podman", "exec", container_name,
                    "sh", "-c", "test -d /tmp/venv && echo 'venv exists'"
                ]
                print(f"Check if /tmp/venv exists in the container: {' '.join(podman_cmd)}")
                venv_exists = subprocess.run(
                    podman_cmd,
                    check=False,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                ).stdout.strip() == "venv exists"
                print(f"Check if /tmp/venv exists in the container: {venv_exists}")

                print("Give server daemons a few seconds to start up")
                time.sleep(TIMEOUT)

                print("Run the test cases...")
                for test in testcase['tests']:
                    if test['run-where'] == 'container':
                        cmdline = f"python3 {CHECK_PLUGIN} {test['plugin-params']}".strip()
                        if venv_exists:
                            podman_cmd = [
                                "podman", "exec", "--workdir", REMOTE_DIR, container_name,
                                "sh", "-c", f". /tmp/venv/bin/activate && {cmdline}"
                            ]
                            print(f"Run test in container in venv: `{' '.join(podman_cmd)}`")
                        else:
                            podman_cmd = [
                                "podman", "exec", "--workdir", REMOTE_DIR, container_name,
                            ] + cmdline.split()
                            print(f"Run test in container: `{' '.join(podman_cmd)}`")
                        result = subprocess.run(
                            podman_cmd,
                            check=False,  # We'll handle checking the output ourselves
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            text=True,
                        )
                    else:
                        local_cmd = [
                            "python3",
                            os.path.join(LOCAL_DIR, CHECK_PLUGIN),
                        ] + test['plugin-params'].strip().split()
                        print(f"Run test locally: `{' '.join(local_cmd)}`")
                        result = subprocess.run(
                            local_cmd,
                            check=False,  # We'll handle checking the output ourselves
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            text=True,
                        )

                    # Check the output
                    output = result.stdout + "\n" + result.stderr
                    print(f"Script output:\n{output.strip()}")

                    # the unit test result
                    self.assertRegex(result.stdout + result.stderr, test['assert-regex'])
                    self.assertEqual(result.returncode, test['assert-retc'])

            finally:
                # Stop and remove the container no matter what
                podman_cmd = ["podman", "rm", "--force", container_name]
                print(f"Stop and remove container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=False,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )


if __name__ == '__main__':
    unittest.main()
