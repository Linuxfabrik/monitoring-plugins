#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.huawei  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071203'

DESCRIPTION = """Batch query basic information about disks on a Huawei OceanStor Dorado storage
                 system via the REST Interface, using the ``/disk`` endpoint."""

DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT  = 3

DEFAULT_SCOPE = 0
DEFAULT_CACHE_EXPIRE = 15 # minutes; default session timeout period is 20 minutes


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the credential cache expires, in minutes. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
    )

    parser.add_argument(
        '--device-id',
        help='Huawei OceanStor Dorado API Device ID.',
        dest='DEVICE_ID',
        required=True,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--password',
        help='Huawei OceanStor Dorado API Password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--scope',
        help='Huawei OceanStor Dorado API Scope.',
        dest='SCOPE',
        default=DEFAULT_SCOPE,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-u', '--url',
        help='Huawei OceanStor Dorado API URL.',
        dest='URL',
        required=True,
    )

    parser.add_argument(
        '--username',
        help='Huawei OceanStor Dorado API Username.',
        dest='USERNAME',
        required=True,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if not args.URL.startswith('http'):
        lib.base.cu('--url parameter has to start with "http://" or https://".')

    # fetch data
    if args.TEST is None:
        result = lib.huawei.get_data('disk', args)
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        result = json.loads(stdout)

    # no valuable result?
    if not result:
        lib.base.cu('Got no valuable response from {}.'.format(args.URL))
    if result.get('error').get('code') != 0:
        lib.base.oao('{} {}'.format(
            result.get('error').get('description'),
            result.get('error').get('suggestion'),
        ), STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # analyze the data
    table_data = []
    for disk in result.get('data'):
        health_state = STATE_OK
        if lib.huawei.get_health_status(disk.get('HEALTHSTATUS')) != 'Normal (1)':
            health_state = STATE_WARN
            state = lib.base.get_worst(state, health_state)

        disk['UUID'] = lib.huawei.get_uuid(disk)

        running_state = STATE_OK
        if lib.huawei.get_running_status(disk.get('RUNNINGSTATUS')) != 'Normal (1)' and \
           lib.huawei.get_running_status(disk.get('RUNNINGSTATUS')) != 'Online (27)':
            running_state = STATE_WARN
            state = lib.base.get_worst(state, running_state)

        disk['REMAINLIFE'] = int(disk['REMAINLIFE']) * 24*60*60
        disk['RUNTIME'] = int(disk['RUNTIME']) * 24*60*60

        perfdata += lib.base.get_perfdata('{}_HEALTHSTATUS'.format(disk['UUID']), disk['HEALTHSTATUS'], None, None, 2, 0, 2)
        perfdata += lib.base.get_perfdata('{}_RUNNINGSTATUS'.format(disk['UUID']), disk['RUNNINGSTATUS'], None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('{}_ABRASIONRATE'.format(disk['UUID']), disk['ABRASIONRATE'], '%', None, None, 0, 100)
        perfdata += lib.base.get_perfdata('{}_CAPACITYUSAGE'.format(disk['UUID']), disk['CAPACITYUSAGE'], '%', None, None, 0, 100)
        perfdata += lib.base.get_perfdata('{}_HEALTHMARK'.format(disk['UUID']), disk['HEALTHMARK'], None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('{}_PROGRESS'.format(disk['UUID']), disk['PROGRESS'], '%', None, None, 0, 100)
        perfdata += lib.base.get_perfdata('{}_REMAINLIFE'.format(disk['UUID']), disk['REMAINLIFE'], 's', None, None, 0, None)
        perfdata += lib.base.get_perfdata('{}_RUNTIME'.format(disk['UUID']), disk['RUNTIME'], 's', None, None, 0, None)
        perfdata += lib.base.get_perfdata('{}_TEMPERATURE'.format(disk['UUID']), disk['TEMPERATURE'], None, None, None, 0, None)

        disk['health_state'] = lib.base.state2str(health_state, empty_ok=False)
        disk['running_state'] = lib.base.state2str(running_state, empty_ok=False)
        disk['RUNTIME'] = lib.human.seconds2human(disk['RUNTIME'])

        table_data.append(disk)

    if table_data:
        keys = ['UUID', 'LOCATION', 'MANUFACTURER', 'MODEL', 'SERIALNUMBER', 'ABRASIONRATE', 'PROGRESS', 'RUNTIME', 'TEMPERATURE', 'health_state', 'running_state']
        headers = ['UUID', 'Location', 'Manufacturer', 'Model', 'SerialNumber', 'Abrasion%', 'Progress%', 'Runtime', 'Temp', 'Health', 'Running']
        msg += lib.base.get_table(table_data, keys, header=headers)

    msg += '\nFetched API {} {}'.format(
        result.get('counter', 0),
        lib.txt.pluralize('time', result.get('counter', 0),),
    )

    if state == STATE_CRIT:
        msg = 'There are critical errors.\n\n' + msg
    elif state == STATE_WARN:
        msg = 'There are warnings.\n\n' + msg
    else:
        msg = 'Everything is ok.\n\n' + msg

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
