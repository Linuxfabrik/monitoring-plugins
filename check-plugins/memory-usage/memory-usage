#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

try:
    import psutil  # pylint: disable=C0413
except ImportError:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025020401'

DESCRIPTION = """Displays amount of free and used memory in the system, checks against used memory
                in percent."""

DEFAULT_CRIT = 95 # %
DEFAULT_TOP = 5
DEFAULT_WARN = 90 # %


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold for memory usage (in percent). '
             'Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--top',
        help='List x "Top most memory consuming processes". '
             'Default: %(default)s',
        dest='TOP',
        type=int,
        default=DEFAULT_TOP,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold for memory usage (in percent). '
             'Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def top(count):
    """Get top X most memory consuming processes.
    """
    procs = {}
    msg = '\nTop {} most memory consuming processes:\n'.format(count)
    if lib.version.version(psutil.__version__) >= lib.version.version('5.3.0'):
        try:
            for p in psutil.process_iter(attrs=['name', 'memory_percent', 'memory_info']):
                try:
                    procs[p.info['name']]
                except:
                    procs[p.info['name']] = {
                        '%': 0,
                        'rss': 0,
                    }
                procs[p.info['name']]['%'] += p.info['memory_percent']
                procs[p.info['name']]['rss'] += p.info['memory_info'].rss
        except psutil.NoSuchProcess:
            pass
    else:
        try:
            for p in [x.as_dict(attrs=['name', 'memory_percent']) for x in psutil.process_iter()]:
                try:
                    procs[p.info['name']]
                except:
                    procs[p.info['name']] = {
                        '%': 0,
                        'rss': 0,
                    }
                procs[p.info['name']]['%'] += p.info['memory_percent']
                procs[p.info['name']]['rss'] += p.info['memory_info'].rss
        except psutil.NoSuchProcess:
            pass
    for i, p in enumerate(sorted(procs.items(), key=lambda d: d[1]['%'], reverse=True)):
        if i >= count:
            break
        msg += '{}. {}: {} ({:.1f}%)\n'.format(
            i + 1,
            p[0],
            lib.human.bytes2human(p[1]['rss']),
            p[1]['%'],
        )
    return msg


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    virt = psutil.virtual_memory()

    # init some vars
    msg_header, msg_body = '', ''
    state = STATE_OK
    perfdata = ''

    # analyze data and build the message
    state = lib.base.get_state(getattr(virt, 'percent', 0), args.WARN, args.CRIT, _operator='ge')

    msg_header += '{}%{} - '.format(
        getattr(virt, 'percent', 0),
        lib.base.state2str(state, prefix=' '),
    )
    msg_header += '{}: {}, '.format('total', lib.human.bytes2human(getattr(virt, 'total', 0)))
    msg_header += '{}: {}, '.format('used', lib.human.bytes2human(getattr(virt, 'used', 0)))
    msg_header += '{}: {}, '.format(
        'available',
        lib.human.bytes2human(getattr(virt, 'available', 0)),
    )
    msg_header += '{}: {}'.format('free', lib.human.bytes2human(getattr(virt, 'free', 0)))

    msg_body += '\n{}: {}, '.format('shared', lib.human.bytes2human(getattr(virt, 'shared', 0)))
    msg_body += '{}: {}, '.format('buffers',lib.human.bytes2human(getattr(virt, 'buffers', 0)))
    msg_body += '{}: {}'.format('cached',lib.human.bytes2human(getattr(virt, 'cached', 0)))

    perfdata += lib.base.get_perfdata('usage_percent', getattr(virt, 'percent', 0), '%', args.WARN, args.CRIT, 0, 100) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('total', getattr(virt, 'total', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('used', getattr(virt, 'used', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('available', getattr(virt, 'available', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('free', getattr(virt, 'free', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('shared', getattr(virt, 'shared', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('buffers', getattr(virt, 'buffers', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301
    perfdata += lib.base.get_perfdata('cached', getattr(virt, 'cached', 0), 'B', None, None, 0, virt.total) # pylint: disable=C0301

    # Top X most memory consuming processes
    msg_body += '\n' + top(args.TOP)

    # over and out
    lib.base.oao(msg_header + msg_body, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        lib.base.cu()
