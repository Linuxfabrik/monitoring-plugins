#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071203'

DESCRIPTION = '''This plugin checks the clock offset of chronyd in milliseconds
                 compared to ntp servers.'''

DEFAULT_WARN = 800  # ms offset
DEFAULT_CRIT = 86400000 # 24h in ms offset


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold for the ntp time offset, in ms. Default: %(default)sms',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold for the ntp time offset, in ms. Default: %(default)sms',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.TEST is None:
        cmd = 'chronyc tracking'
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(cmd)) # pylint: disable=W0612
        if stderr:
            lib.base.cu(stderr)
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    peer_used = False

    # analyze data
    for line in stdout.splitlines():
        line = line.strip()
        if line.startswith('Stratum'):
            stratum = int(line.split()[-1])
            peer_used = stratum != 0
            continue
        if line.startswith('Last offset'):
            last_offset = float(line.split()[-2]) * 1000  # convert to ms
            continue
        if line.startswith('RMS offset'):
            rms_offset = float(line.split()[-2]) * 1000  # convert to ms
            continue
        if line.startswith('Frequency'):
            frequency = float(line.split()[-3])
            continue
        if line.startswith('Residual freq'):
            residual_freq = float(line.split()[-2])
            continue
        if line.startswith('Skew'):
            skew = float(line.split()[-2])
            continue
        if line.startswith('Root delay'):
            root_delay = float(line.split()[-2]) * 1000  # convert to ms
            continue
        if line.startswith('Root dispersion'):
            root_dispersion = float(line.split()[-2]) * 1000  # convert to ms
            continue
        if line.startswith('Leap status'):
            leap_status = ' '.join(line.split()[3:])

    if not peer_used:
        lib.base.oao('No NTP server used.', STATE_WARN)

    # build the message
    offset_state = lib.base.get_state(abs(last_offset), args.WARN, args.CRIT)
    state = lib.base.get_worst(state, offset_state)
    msg += 'NTP offset is {}ms{}, '.format(
        round(last_offset, 3),
        lib.base.state2str(offset_state, prefix=' '),
    )
    msg += 'Stratum is {}'.format(stratum)
    if stratum >= 9:
        stratum_state = STATE_WARN
        state = lib.base.get_worst(state, stratum_state)
        msg += ' is >= 9{}'.format(lib.base.state2str(stratum_state, prefix=' '))
    msg += ', Leap status is {}'.format(leap_status)

    perfdata += lib.base.get_perfdata('frequency', frequency, None, None, None, None, None)
    perfdata += lib.base.get_perfdata('last_offset', last_offset, 'ms', args.WARN, args.CRIT, None, None)
    perfdata += lib.base.get_perfdata('residual_freq', residual_freq, None, None, None, None, None)
    perfdata += lib.base.get_perfdata('rms_offset', rms_offset, 'ms', None, None, None, None)
    perfdata += lib.base.get_perfdata('root_delay', root_delay, 'ms', None, None, None, None)
    perfdata += lib.base.get_perfdata('root_dispersion', root_dispersion, 'ms', None, None, None, None)
    perfdata += lib.base.get_perfdata('skew', skew, None, None, None, None, None)
    perfdata += lib.base.get_perfdata('stratum', stratum, None, 9, None, 0, None)

    # over and out
    lib.base.oao(msg + '\n\n' + stdout, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
