#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071201'

DESCRIPTION = """This check collects information from the PHP-FPM status page and alerts on certain
                overuse. In addition, a table is printed which contains each pool process in the
                status "Running" (information relates to the current request that is being
                served)."""

DEFAULT_WARN = 80   # %
DEFAULT_CRIT = 90   # %
DEFAULT_WARN_MAX_CHILDREN = 1
DEFAULT_CRIT_MAX_CHILDREN = 100
DEFAULT_WARN_SLOW_REQUESTS = 1
DEFAULT_CRIT_SLOW_REQUESTS = 100
DEFAULT_URL = 'http://localhost/fpm-status' # ?json&full


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold for queue usage as a percentage. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--critical-maxchildren',
        help='Set the CRIT threshold for the number of times the process limit has been reached. Default: >= %(default)s',
        dest='CRIT_MAX_CHILDREN',
        type=int,
        default=DEFAULT_CRIT_MAX_CHILDREN,
    )

    parser.add_argument(
        '--critical-slowreq',
        help='Set the CRIT threshold for slow requests. Default: >= %(default)s',
        dest='CRIT_SLOW_REQUESTS',
        type=int,
        default=DEFAULT_CRIT_SLOW_REQUESTS,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '-u', '--url',
        help='PHP-FPM Status URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold for queue usage as a percentage. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    parser.add_argument(
        '--warning-maxchildren',
        help='Set the WARN threshold for the number of times the process limit has been reached. Default: >= %(default)s',
        dest='WARN_MAX_CHILDREN',
        type=int,
        default=DEFAULT_WARN_MAX_CHILDREN,
    )

    parser.add_argument(
        '--warning-slowreq',
        help='Set the WARN threshold for slow requests. Default: >= %(default)s',
        dest='WARN_SLOW_REQUESTS',
        type=int,
        default=DEFAULT_WARN_SLOW_REQUESTS,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    if args.TEST is None:
        jsonst = lib.base.coe(lib.url.fetch(args.URL + '?json&full'))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        jsonst = stdout

    try:
        result = json.loads(jsonst)
    except:
        lib.base.cu('ValueError: No JSON object could be decoded')

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_values = []

    # analyze data
    if result['listen queue len']:
        queue_usage = round(float(result['listen queue']) / float(result['listen queue len']) * 100, 1)
    else:
        queue_usage = 0

    queue_state = lib.base.get_state(
        queue_usage,
        args.WARN,
        args.CRIT,
    )
    state = lib.base.get_worst(queue_state, state)
    children_state = lib.base.get_state(
        result['max children reached'],
        args.WARN_MAX_CHILDREN,
        args.CRIT_MAX_CHILDREN,
    )
    state = lib.base.get_worst(children_state, state)
    slow_req_state = lib.base.get_state(
        result['slow requests'],
        args.WARN_SLOW_REQUESTS,
        args.CRIT_SLOW_REQUESTS,
    )
    state = lib.base.get_worst(slow_req_state, state)

    # build the message
    msg += 'Pool {} ({}): '.format(result['pool'], result['process manager'])
    if result['listen queue']:
        msg += '{}/{} {} in queue ({}%){}, '.format(
            result['listen queue'],
            result['listen queue len'],
            lib.txt.pluralize('req', result['listen queue']),
            queue_usage,
            lib.base.state2str(queue_state, prefix=' '),
        )
    if result.get('max children reached', 0):
        msg += '{}x max children reached{}, '.format(
            result['max children reached'],
            lib.base.state2str(children_state, prefix=' '),
        )
    if result.get('slow requests', 0):
        msg += '{} slow requests{}, '.format(
            result['slow requests'],
            lib.base.state2str(slow_req_state, prefix=' '),
        )
    msg += '{} connections, '.format(
        lib.human.number2human(result['accepted conn']),
    )
    msg += '{} processes ({} active, {} idle), '.format(
        result['total processes'],
        result['active processes'],
        result['idle processes'],
    )
    msg += 'Up {} (since {}), '.format(
        lib.human.seconds2human(result['start since']),
        lib.time.epoch2iso(result['start time']),
    )

    for value in result.get('processes', ''):
        if value['state'] != 'Running':
            continue
        if '?json&full' in value['request uri']:
            continue
        table_values.append({
            'pid': value['pid'],
            'state': value['state'],
            'start time': value['start time'],
            'start since': value['start since'],
            'requests': value['requests'],
            'request duration': lib.human.seconds2human(int(value['request duration']) / 1000000),  # microseconds
            'request method': value['request method'],
            'request uri': value['request uri'],
            'content length': lib.human.bytes2human(value['content length']) if value['content length'] else '-',
            'user': value['user'],
            'script': value['script'],
            'last request cpu': value['last request cpu'],
            'last request memory': value['last request memory'],
        })

    msg = msg[:-2] + '\n\n'
    if len(table_values) > 0:
        msg += lib.base.get_table(
            table_values,
            ['pid', 'requests', 'request duration', 'request uri', 'content length', 'user'],
            header=['PID', 'Reqs', 'ReqDur', 'Request URI', 'POST', 'AuthUser'],
        )

    perfdata += lib.base.get_perfdata('accepted conn', result['accepted conn'], 'c', None, None, 0, None)
    perfdata += lib.base.get_perfdata('active processes', result['active processes'], None, None, None, 0, result['total processes'])
    perfdata += lib.base.get_perfdata('idle processes', result['idle processes'], None, None, None, 0, result['total processes'])
    perfdata += lib.base.get_perfdata('listen queue', result['listen queue'], None, None, None, 0, result['listen queue len'])
    perfdata += lib.base.get_perfdata('listen queue len', result['listen queue len'], None, None, None, 0, None)
    perfdata += lib.base.get_perfdata('max children reached', result['max children reached'], None, args.WARN_MAX_CHILDREN, args.CRIT_MAX_CHILDREN, 0, None)
    if 'slow requests' in result:
        perfdata += lib.base.get_perfdata('slow requests', result['slow requests'], None, args.WARN_SLOW_REQUESTS, args.CRIT_SLOW_REQUESTS, 0, None)
    perfdata += lib.base.get_perfdata('start since', result['start since'], 's', None, None, 0, None)

    perfdata += lib.base.get_perfdata('queue usage', queue_usage, '%', args.WARN, args.CRIT, 0, 100)

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
