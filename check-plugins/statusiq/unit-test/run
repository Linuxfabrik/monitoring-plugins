#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../statusiq --url=https://mydatacenter'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegex(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE01,,0'))
        self.assertIn('Everything is ok @ https://mydatacenter', stdout)
        self.assertIn('', stdout)
        self.assertIn('Component Name      ! Published                 ! State', stdout)
        self.assertIn('--------------------+---------------------------+------', stdout)
        self.assertIn('AutoIdent           ! 2025-03-05 08:00:00+01:00 ! [OK] ', stdout)
        self.assertIn('TrustID API Service ! 2025-02-24 23:12:10+01:00 ! [OK] ', stdout)
        self.assertIn('TrustID BO Service  ! 2025-02-10 13:15:00+01:00 ! [OK] ', stdout)
        self.assertIn('TrustID IDP Service ! 2025-02-10 13:15:00+01:00 ! [OK] ', stdout)
        self.assertIn('TrustID SSE Service ! 2025-02-10 13:15:00+01:00 ! [OK] ', stdout)
        self.assertIn('VideoIdent          ! 2025-03-05 08:00:00+01:00 ! [OK]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0'))

        self.assertIn('Everything is ok @ https://mydatacenter', stdout)
        self.assertIn('', stdout)
        self.assertIn('Component Name                 ! Published                 ! State', stdout)
        self.assertIn('-------------------------------+---------------------------+------', stdout)
        self.assertIn('Asset API - Informational      ! 2024-11-06 15:03:23+01:00 ! [OK] ', stdout)
        self.assertIn('Control Center - Informational ! 2024-11-06 15:03:28+01:00 ! [OK] ', stdout)
        self.assertIn('Control Center - Informational ! 2024-11-06 15:11:13+01:00 ! [OK] ', stdout)
        self.assertIn('Asset API                      ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Asset API                      ! 2025-01-09 22:00:00+01:00 ! [OK] ', stdout)
        self.assertIn('Asset API                      ! 2025-01-07 11:00:00+01:00 ! [OK] ', stdout)
        self.assertIn('Channel                        ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Channel                        ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Channel                        ! 2025-01-09 22:00:00+01:00 ! [OK] ', stdout)
        self.assertIn('Channel                        ! 2025-01-07 11:00:00+01:00 ! [OK] ', stdout)
        self.assertIn('Connect                        ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Connect                        ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Connect                        ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Connect                        ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Content Store                  ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertIn('Content Store                  ! 2025-02-24 21:25:29+01:00 ! [OK] ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Major incidents @ https://mydatacenter', stdout)
        self.assertIn('', stdout)
        self.assertIn('Component Name             ! Published                 ! State     ', stdout)
        self.assertIn('---------------------------+---------------------------+-----------', stdout)
        self.assertIn('GVI via SRU - Major Outage ! 2025-03-06 14:44:59+01:00 ! [CRITICAL]', stdout)
        self.assertIn('ALBERT                     ! 2025-03-05 20:54:24+01:00 ! [OK]      ', stdout)
        self.assertIn('B-TU Laubert               ! 2025-02-27 14:48:15+01:00 ! [OK]      ', stdout)
        self.assertIn('FHP FHPKat+                ! 2025-02-20 18:43:16+01:00 ! [OK]      ', stdout)
        self.assertIn('Fernleihe                  ! 2025-03-06 15:46:05+01:00 ! [OK]      ', stdout)
        self.assertIn('K2 Portal                  ! 2025-03-04 11:15:00+01:00 ! [OK]      ', stdout)
        self.assertIn('OPUS Uni WÃ¼rzburg          ! 2025-02-18 02:49:47+01:00 ! [OK]      ', stdout)
        self.assertIn('Opus Uni Potsdam           ! 2025-02-14 13:45:45+01:00 ! [OK]      ', stdout)
        self.assertIn('THW WILBERT                ! 2025-02-26 14:15:32+01:00 ! [OK]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)


if __name__ == '__main__':
    unittest.main()
