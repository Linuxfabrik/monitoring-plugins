#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023060901'

DESCRIPTION = 'Tracks if PHP is EOL.'

# from https://endoflife.date/api/php.json
ENDOFLIFE_DATE = [
  {
    "cycle": "8.2",
    "support": "2024-12-08",
    "eol": "2025-12-08",
    "latest": "8.2.3",
    "latestReleaseDate": "2023-02-13",
    "releaseDate": "2022-12-06",
    "lts": False
  },
  {
    "cycle": "8.1",
    "support": "2023-11-25",
    "eol": "2024-11-25",
    "latest": "8.1.16",
    "latestReleaseDate": "2023-02-14",
    "releaseDate": "2021-11-23",
    "lts": False
  },
  {
    "cycle": "8.0",
    "support": "2022-11-26",
    "eol": "2023-11-26",
    "latest": "8.0.28",
    "latestReleaseDate": "2023-02-14",
    "releaseDate": "2020-11-24",
    "lts": False
  },
  {
    "cycle": "7.4",
    "support": "2021-11-28",
    "eol": "2022-11-28",
    "latest": "7.4.33",
    "latestReleaseDate": "2022-10-31",
    "releaseDate": "2019-11-26",
    "lts": False
  },
  {
    "cycle": "7.3",
    "support": "2020-12-06",
    "eol": "2021-12-06",
    "latest": "7.3.33",
    "latestReleaseDate": "2021-11-16",
    "releaseDate": "2018-12-04",
    "lts": False
  },
  {
    "cycle": "7.2",
    "support": "2019-11-30",
    "eol": "2020-11-30",
    "latest": "7.2.34",
    "latestReleaseDate": "2020-09-30",
    "releaseDate": "2017-11-28",
    "lts": False
  },
  {
    "cycle": "7.1",
    "support": "2018-12-01",
    "eol": "2019-12-01",
    "latest": "7.1.33",
    "latestReleaseDate": "2019-10-22",
    "releaseDate": "2016-11-30",
    "lts": False
  },
  {
    "cycle": "7.0",
    "support": "2018-01-04",
    "eol": "2019-01-10",
    "latest": "7.0.33",
    "latestReleaseDate": "2018-12-04",
    "releaseDate": "2015-12-01",
    "lts": False
  },
  {
    "cycle": "5.6",
    "support": "2017-01-19",
    "eol": "2018-12-31",
    "latest": "5.6.40",
    "latestReleaseDate": "2019-01-09",
    "releaseDate": "2014-08-27",
    "lts": False
  },
  {
    "cycle": "5.5",
    "support": "2015-07-10",
    "eol": "2016-07-21",
    "latest": "5.5.38",
    "latestReleaseDate": "2016-07-20",
    "releaseDate": "2013-06-19",
    "lts": False
  },
  {
    "cycle": "5.4",
    "support": "2014-09-14",
    "eol": "2015-09-14",
    "latest": "5.4.45",
    "latestReleaseDate": "2015-09-01",
    "releaseDate": "2012-02-29",
    "lts": False
  },
  {
    "cycle": "5.3",
    "support": "2011-06-30",
    "eol": "2014-08-14",
    "latest": "5.3.29",
    "latestReleaseDate": "2014-08-13",
    "releaseDate": "2009-06-29",
    "lts": False
  },
  {
    "cycle": "5.2",
    "support": "2008-11-02",
    "eol": "2011-01-06",
    "latest": "5.2.17",
    "latestReleaseDate": "2011-01-06",
    "releaseDate": "2006-11-01",
    "lts": False
  },
  {
    "cycle": "5.1",
    "support": "2006-08-24",
    "eol": "2006-08-24",
    "latest": "5.1.6",
    "latestReleaseDate": "2006-08-23",
    "releaseDate": "2005-11-23",
    "lts": False
  },
  {
    "cycle": "5.0",
    "support": "2005-09-05",
    "eol": "2005-09-05",
    "latest": "5.0.5",
    "latestReleaseDate": "2005-09-05",
    "releaseDate": "2004-07-15",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def get_installed_version():
    success, result = lib.shell.shell_exec('php --version')
    if not success:
        return ''
    stdout = result[0].strip()
    # where to find the version number in output?
    # PHP 7.2.34-37+0~20230106.78+debian11~1.gbp1ece37 (cli) (built: Jan  6 2023 18:38:02) ( NTS )
    # PHP 8.1.19 (cli) (built: May 10 2023 13:43:03) (NTS gcc x86_64)
    version_regex = r'PHP (\d+\.\d+\.\d+)\W'
    stdout = re.match(version_regex, stdout)
    return stdout.group(1).strip()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = get_installed_version()
    if not installed_version:
        lib.base.oao('PHP not found.', STATE_UNKNOWN)
    try:
        installed_major, installed_minor, installed_patch = installed_version.split('.')
    except:
        installed_patch = '0'
        installed_major, installed_minor = installed_version.split('.')

    state, msg = lib.version.check_eol(
        ENDOFLIFE_DATE,
        '{}.{}'.format(installed_major, installed_minor),
    )

    # over and out
    lib.base.oao(
        'PHP v{} ({})'.format(installed_version, msg),
        state,
        lib.base.get_perfdata(
            'php-version',
            '{}.{}{}'.format(installed_major, installed_minor, installed_patch),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
