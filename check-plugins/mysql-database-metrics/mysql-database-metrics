#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.db_mysql  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
from lib.globals import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025031401'

DESCRIPTION = """Checks index sizes and consistent engine and collation use in
                 MySQL/MariaDB schemas."""

DEFAULT_DEFAULTS_FILE = '/var/spool/icinga2/.my.cnf'
DEFAULT_DEFAULTS_GROUP = 'client'
DEFAULT_TIMEOUT = 3


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--defaults-file',
        help='Specifies a cnf file to read parameters like user, host and password from '
             '(instead of specifying them on the command line), '
             'for example `/var/spool/icinga2/.my.cnf`. Default: %(default)s',
        dest='DEFAULTS_FILE',
        default=DEFAULT_DEFAULTS_FILE,
    )

    parser.add_argument(
        '--defaults-group',
        help='Group/section to read from in the cnf file. Default: %(default)s',
        dest='DEFAULTS_GROUP',
        default=DEFAULT_DEFAULTS_GROUP,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # logic taken from mysqltuner.pl:mysql_databases(), v1.9.8
    # including variable names

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    mysql_connection = {
        'defaults_file':  args.DEFAULTS_FILE,
        'defaults_group': args.DEFAULTS_GROUP,
        'timeout':        args.TIMEOUT,
    }
    conn = lib.base.coe(lib.db_mysql.connect(mysql_connection))
    lib.base.coe(lib.db_mysql.check_select_privileges(conn))

    # init some vars
    state = STATE_OK

    # SCHEMA_NAME and others must be uppercase due to MySQL 8+
    sql = '''
        select SCHEMA_NAME
        from information_schema.schemata
        where SCHEMA_NAME not in (
            "mysql", "information_schema", "performance_schema", "sys"
        );
    '''
    dblist = lib.base.coe(lib.db_mysql.select(conn, sql))

    results = {
        'index': '',
        'storengine': '',
        'collation': '',
        'tblengine': '',
        'colcharset': '',
        'colcollation': '',
    }

    for schema in dblist:
        tmp_msg = ''
        sql = '''
            select TABLE_SCHEMA,
                sum(TABLE_ROWS) as sum_rows,
                sum(DATA_LENGTH) as sum_data,
                sum(INDEX_LENGTH) as sum_index,
                sum(DATA_LENGTH+INDEX_LENGTH) as sum_data_index,
                count(distinct ENGINE) as cnt_storengines,
                count(TABLE_NAME) as cnt_tables,
                count(distinct(TABLE_COLLATION)) as cnt_collations,
                count(distinct(ENGINE)) as cnt_tableengines
            from information_schema.tables
            where TABLE_SCHEMA="{}"
            group by TABLE_SCHEMA
            order by TABLE_SCHEMA;
        '''.format(schema['SCHEMA_NAME'])
        dbinfo = lib.base.coe(lib.db_mysql.select(conn, sql, fetchone=True))
        if dbinfo is None:
            continue

        if dbinfo['sum_data'] != 'NULL' \
        and dbinfo['sum_index'] != 'NULL' \
        and (dbinfo['sum_data'] > 10*1024*1024 or dbinfo['sum_index'] > 10*1024*1024) \
        and dbinfo['sum_data'] < dbinfo['sum_index']:
            results['index'] += '{} ({} / {}), '.format(
                dbinfo['TABLE_SCHEMA'],
                lib.human.bytes2human(dbinfo['sum_index']),
                lib.human.bytes2human(dbinfo['sum_data']),
            )

        if dbinfo['cnt_storengines'] != 1:
            results['storengine'] += '{} ({}x), '.format(
                dbinfo['TABLE_SCHEMA'],
                dbinfo['cnt_storengines'],
            )

        if dbinfo['cnt_collations'] > 1:
            results['collation'] += '{} ({}x), '.format(
                dbinfo['TABLE_SCHEMA'],
                dbinfo['cnt_collations'],
            )

        if dbinfo['cnt_tableengines'] > 1:
            results['tblengine'] += '{} ({}x), '.format(
                dbinfo['TABLE_SCHEMA'],
                dbinfo['cnt_tableengines'],
            )

        sql = '''
            select distinct(CHARACTER_SET_NAME)
            from information_schema.COLUMNS
            where CHARACTER_SET_NAME is not null
                and TABLE_SCHEMA = "{}";
        '''.format(schema['SCHEMA_NAME'])
        distinct_column_charset = lib.base.coe(lib.db_mysql.select(conn, sql))
        if len(distinct_column_charset) > 1:
            results['colcharset'] += '{} ({}x), '.format(
                dbinfo['TABLE_SCHEMA'],
                len(distinct_column_charset),
            )

        sql = '''
            select distinct(COLLATION_NAME)
            from information_schema.COLUMNS
            where COLLATION_NAME is not null
                and TABLE_SCHEMA = "{}";
        '''.format(schema['SCHEMA_NAME'])
        distinct_column_collation = lib.base.coe(lib.db_mysql.select(conn, sql))
        if len(distinct_column_collation) > 1:
            results['colcollation'] += '{} ({}x), '.format(
                dbinfo['TABLE_SCHEMA'],
                len(distinct_column_collation),
            )

    lib.db_mysql.close(conn)

    msg = ''
    if results['index']:
        msg += '* Index size is larger than data size: {}\n'.format(results['index'][:-2]) 
    if results['storengine']:
        msg += '* Multi storage engines (use one storage engine for all tables): {}\n'.format(results['storengine'][:-2])
    if results['collation']:
        msg += '* Multi collations (use one collation for all tables): {}\n'.format(results['collation'][:-2])
    if results['tblengine']:
        msg += '* Multi table engines (use one engine for all tables): {}\n'.format(results['tblengine'][:-2])
    if results['colcharset']:
        msg += '* Multi charsets for text-like cols (use one charset for all cols if possible): {}\n'.format(results['colcharset'][:-2])
    if results['colcollation']:
        msg += '* Multi collations for text-like cols (use one charset for all cols if possible): {}\n'.format(results['colcollation'][:-2])

    if msg:
        state = STATE_WARN
        msg = 'There are warnings.\n\n' + msg
    else:
        msg = 'Everything is ok.'

    # over and out
    lib.base.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
