#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071203'

DESCRIPTION = 'Prints a list of all clients connected to the OpenVPN Server'

DEFAULT_FILENAME = '/var/log/openvpn-status.log'

DEFAULT_WARN = None
DEFAULT_CRIT = None


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold for the number of connected clients. Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--filename',
        help='Set the path of the log filename. Default: %(default)s',
        dest='FILENAME',
        type=str,
        default=DEFAULT_FILENAME,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold for the number of connected clients. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    if args.TEST is None:
        try:
            with open(args.FILENAME, 'r') as file:
                counter = 0
                table = []
                for line in file:
                    if line.startswith('CLIENT_LIST'):
                        counter += 1
                        line = line.split(',')
                        table.append({
                            'name': line[1],
                            'ext_ip': line[2].split(':')[0],
                            'int_ip': line[3],
                            'connection_time': line[7],
                        })
        except IOError:
            lib.base.cu('Failed to read file {}.'.format(args.FILENAME))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        lib.base.oao('TODO')

    state = lib.base.get_state(counter, args.WARN, args.CRIT)
    perfdata = lib.base.get_perfdata('clients', counter, None, args.WARN, args.CRIT, 0, None)

    msg = '{} {} connected to OpenVPN Server.\n\n'.format(
        counter,
        lib.txt.pluralize('user', counter)
    )

    msg += lib.base.get_table(
        table,
        ['name', 'ext_ip', 'int_ip', 'connection_time'],
        header=['Common Name', 'External IP', 'Internal IP', 'Connected since'],
    )

    # over and out
    lib.base.oao(msg, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
