#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
import lib.wildfly  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024031501'

DESCRIPTION = 'Checks the memory pool usage of a Wildfly/JBossAS over HTTP.'

DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:9990'
DEFAULT_USERNAME = 'wildfly-monitoring'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--instance',
        help='The instance (server-config) to check if running in domain mode.',
        dest='INSTANCE',
    )

    parser.add_argument(
        '--mode',
        help='The mode the server is running.',
        dest='MODE',
        choices=['standalone', 'domain'],
        default='standalone',
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--node',
        help='The node (host) if running in domain mode.',
        dest='NODE',
    )

    parser.add_argument(
        '-p', '--password',
        help='WildFly API password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='WildFly API URL. '
             'Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '--username',
        help='WildFly API username. '
             'Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    # https://docs.wildfly.org/23/Admin_Guide.html
    data = {
        'operation': 'read-resource',
        'include-runtime': 'true',
        'recursive': 'true',
        # /core-service/platform-mbean/type/memory-pool
        'address': [{'core-service': 'platform-mbean'}, {'type': 'memory-pool'}],
        'json': 1,
    }
    result = lib.wildfly.get_data(args, data)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_data = []

    # analyze the data
    # "Peak" values are not of interest in a monitoring scenario where values are
    # checked every minute. It is safe to ignore them.
    for name, value in result['name'].items():
        if not value['valid']:
            state = STATE_WARN
            value['name'] += ' (invalid {})'.format(lib.base.state2str(STATE_WARN))

        value['usage-calc'] = '{} / {} / {}'.format(
            lib.human.bytes2human(value['usage']['used']),
            lib.human.bytes2human(value['usage']['committed']),
            lib.human.bytes2human(value['usage']['max']),
        )
        if value['usage-threshold-exceeded']:
            state = STATE_WARN
            value['usage-calc'] += lib.base.state2str(STATE_WARN, prefix=' ')
            value['usage-calc'] += ' ({}x)'.format(value['usage-threshold-count'])

        perfdata += lib.base.get_perfdata('memory-pool-{}-usage-init'.format(name), value['usage']['init'], 'B', None, None, 0, None)
        perfdata += lib.base.get_perfdata('memory-pool-{}-usage-used'.format(name), value['usage']['used'], 'B', None, None, 0, None)
        perfdata += lib.base.get_perfdata('memory-pool-{}-usage-committed'.format(name), value['usage']['committed'], 'B', None, None, 0, None)
        perfdata += lib.base.get_perfdata('memory-pool-{}-usage-max'.format(name), value['usage']['max'], 'B', None, None, 0, None)

        if value['collection-usage']:
            value['collection-usage-calc'] = '{} / {} / {}'.format(
                lib.human.bytes2human(value['collection-usage']['used']),
                lib.human.bytes2human(value['collection-usage']['committed']),
                lib.human.bytes2human(value['collection-usage']['max']),
            )
            if value['collection-usage-threshold-exceeded']:
                state = STATE_WARN
                value['collection-usage-calc'] += lib.base.state2str(STATE_WARN, prefix=' ')
                value['collection-usage-calc'] += ' ({}x)'.format(value['collection-usage-threshold-count'])
            perfdata += lib.base.get_perfdata('memory-pool-{}-collection-usage-init'.format(name), value['collection-usage']['init'], 'B', None, None, 0, None)
            perfdata += lib.base.get_perfdata('memory-pool-{}-collection-usage-used'.format(name), value['collection-usage']['used'], 'B', None, None, 0, None)
            perfdata += lib.base.get_perfdata('memory-pool-{}-collection-usage-committed'.format(name), value['collection-usage']['committed'], 'B', None, None, 0, None)
            perfdata += lib.base.get_perfdata('memory-pool-{}-collection-usage-max'.format(name), value['collection-usage']['max'], 'B', None, None, 0, None)
        else:
            value['collection-usage-calc'] = 'N/A'

        table_data.append(value)

    if table_data:
        keys = [
            'name',
            'type',
            'usage-calc',
            'collection-usage-calc',
        ]
        headers = [
            'name',
            'Type',
            'Usage used / committed / max',
            'Collection used / committed/ max',
        ]
        msg += lib.base.get_table(table_data, keys, header=headers)

    if state == STATE_CRIT:
        msg = 'There are critical errors.\n\n' + msg
    elif state == STATE_WARN:
        msg = 'There are warnings.\n\n' + msg
    else:
        msg = 'Everything is ok.\n\n' + msg

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
