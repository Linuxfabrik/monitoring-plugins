#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../systemd-timedate-status'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegex(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE_20121017_ok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20121017-ok,,0'))
        self.assertIn('NTP synchronized: yes, NTP enabled: yes', stdout)
        self.assertIn('RTC in local TZ: no', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE_20121017_nok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20121017-nok,,0'))
        self.assertIn('NTP synchronized: no, NTP enabled: no', stdout)
        self.assertIn('The system is configured to read the RTC time in the local time zone. ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE_20140318_ok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20140318-ok,,0'))
        self.assertIn('NTP synchronized: yes, NTP enabled: yes', stdout)
        self.assertIn('RTC in local TZ: no', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE_20140318_nok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20140318-nok,,0'))
        self.assertIn('NTP synchronized: no, NTP enabled: no', stdout)
        self.assertIn('The system is configured to read the RTC time in the local time zone. ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE_20150407_ok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20150407-ok,,0'))
        self.assertIn('NTP synchronized: yes', stdout)
        self.assertIn('RTC in local TZ: no', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE_20150407_nok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20150407-nok,,0'))
        self.assertIn('NTP synchronized: no', stdout)
        self.assertIn('The system is configured to read the RTC time in the local time zone. ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE_20170921_ok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20170921-ok,,0'))
        self.assertIn('System clock synchronized: yes, systemd-timesyncd.service active: yes', stdout)
        self.assertIn('RTC in local TZ: no', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE_20170921_nok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20170921-nok,,0'))
        self.assertIn('System clock synchronized: no, systemd-timesyncd.service active: no', stdout)
        self.assertIn('The system is configured to read the RTC time in the local time zone. ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE_20201026_ok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20201026-ok,,0'))
        self.assertIn('System clock synchronized: yes, NTP service: yes', stdout)
        self.assertIn('RTC in local TZ: no', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE_20201026_nok(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE-20201026-nok,,0'))
        self.assertIn('System clock synchronized: no, NTP service: no', stdout)
        self.assertIn('The system is configured to read the RTC time in the local time zone. ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)


if __name__ == '__main__':
    unittest.main()
