#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071201'

DESCRIPTION = 'With this plugin you can track some values of the Axenita application.'

DEFAULT_URL = 'http://localhost:10000/achilles/ar'
DEFAULT_TIMEOUT = 3


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='Axenita API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    achilles_readmodel = ''
    achilles_userinfo = ''
    achilles_buildinfo = ''
    achilles_maintenance = ''

    # fetch data, get axenita info
    if args.TEST is None:
        achilles_readmodel = lib.base.coe(lib.url.fetch_json(
            args.URL + '/api/admin/readmodel/state', timeout=args.TIMEOUT
            ))
        achilles_userinfo = lib.base.coe(lib.url.fetch_json(
            args.URL + '/api/admin/user-info/number-of-current-sessions', timeout=args.TIMEOUT
            ))
        achilles_buildinfo = lib.base.coe(lib.url.fetch_json(
            args.URL + '/api/build-info', timeout=args.TIMEOUT
            ))
        achilles_maintenance = lib.base.coe(lib.url.fetch_json(
            args.URL + '/api/login/maintenance-state-active', timeout=args.TIMEOUT
            ))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)

        try:
            stdout = json.loads(stdout)
        except:
            lib.base.cu('ValueError: No JSON object could be decoded')

        if 'readmodel' in args.TEST[0]:
            achilles_readmodel = stdout
        if 'userinfo' in args.TEST[0]:
            achilles_userinfo = stdout
        if 'buildinfo' in args.TEST[0]:
            achilles_buildinfo = stdout
        if 'maintenance' in args.TEST[0]:
            achilles_maintenance = stdout

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # analyze the data
    if achilles_maintenance:
        if achilles_maintenance['state'].upper() != 'SUCCESS':
            state = lib.base.get_worst(STATE_WARN, state)
            msg = '{}/api/login/maintenance-state-active, state: {}{}'.format(args.URL, achilles_maintenance['state'], lib.base.state2str(state))
            lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
        if achilles_maintenance['data'] is not False:
            state = lib.base.get_worst(STATE_WARN, state)
            msg += 'Axenita/Achilles is in maintenance mode {}, '.format(lib.base.state2str(state))
            perfdata += lib.base.get_perfdata('maintenance', 1, None, None, None, 0, 1)
        else:
            perfdata += lib.base.get_perfdata('maintenance', 0, None, None, None, 0, 1)

    if achilles_readmodel:
        if achilles_readmodel['state'].upper() != 'SUCCESS':
            state = lib.base.get_worst(STATE_WARN, state)
            msg = '{}/api/admin/readmodel/state, state: {}{}'.format(args.URL, achilles_readmodel['state'], lib.base.state2str(state))
            lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
        if achilles_readmodel['data']['readModelState'].upper() != 'DONE':
            state = lib.base.get_worst(STATE_WARN, state)
            msg = '{}/api/admin/readmodel/state, data.readModelState: {}{}'.format(args.URL, achilles_readmodel['data']['readModelState'], lib.base.state2str(state))
            lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
        msg += 'ReadModel: {}, '.format(achilles_readmodel['data']['message'])
        perfdata += lib.base.get_perfdata('currentInitRmStep', achilles_readmodel['data']['currentInitRmStep'], None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('totalInitRmSteps', achilles_readmodel['data']['totalInitRmSteps'], None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('totalDurationInitRm', achilles_readmodel['data']['totalDurationInitRm'], None, None, None, 0, None)

    if achilles_userinfo:
        if achilles_userinfo['state'].upper() != 'SUCCESS':
            state = lib.base.get_worst(STATE_WARN, state)
            msg = '{}/api/admin/user-info/number-of-current-sessions, state: {}{}'.format(args.URL, achilles_userinfo['state'], lib.base.state2str(state))
            lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
        msg += '{} users logged in, {} active sessions, '.format(achilles_userinfo['data']['loggedInUsers'], achilles_userinfo['data']['currentActiveSessions'])
        perfdata += lib.base.get_perfdata('loggedInUsers', achilles_userinfo['data']['loggedInUsers'], None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('currentActiveSessions', achilles_userinfo['data']['currentActiveSessions'], None, None, None, 0, None)

    if achilles_buildinfo:
        if achilles_buildinfo['state'].upper() != 'SUCCESS':
            state = lib.base.get_worst(STATE_WARN, state)
            msg = '{}/api/build-info, state: {}{}'.format(args.URL, achilles_buildinfo['state'], lib.base.state2str(state))
            lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
        axenita_ver = achilles_buildinfo['data']['version']
        msg += '{} (timestamp {}), '.format(axenita_ver, achilles_buildinfo['data']['timestamp'])
        axenita_ver = axenita_ver[8:8+axenita_ver.find('-')-1].replace('.', '')
        perfdata += lib.base.get_perfdata('axenita-version', axenita_ver, None, None, None, 0, None)

    # over and out
    lib.base.oao(msg[:-2], state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
