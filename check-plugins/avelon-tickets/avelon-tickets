#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.avelon  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN, STATE_CRIT)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024033002'

DESCRIPTION = """The current tickets (alerts) of your Avelon Cloud are being reviewed, 
                 and depending on their status, critical alerts or warnings can be triggered. 
                 You need a license to access the public API of the Avelon Cloud."""

DEFAULT_NO_CLOSED_TICKET = True
DEFAULT_VERIFY  = True
DEFAULT_PROXIES = {}
DEFAULT_TIMEOUT = 8



def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--client-id',
        help='Avelon API client_id. ',
        dest='CLIENT_ID',
        required=True,
    )

    parser.add_argument(
        '--client-secret',
        help='Avelon API client_secret. ',
        dest='CLIENT_SECRET',
        required=True,
    )

    parser.add_argument(
        '--username',
        help='Avelon Cloud username. ',
        dest='USERNAME',
        required=True,
    )

    parser.add_argument(
        '--password',
        help='Avelon Cloud password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--no-closed-ticket',
        help='The option allows viewing the closed alarms as well. '
             'Default: %(default)s',
        dest='NO_CLOSED_TICKET',
        default=DEFAULT_NO_CLOSED_TICKET,
    )

    parser.add_argument(
        '--verify',
        help='This option explicitly allows to perform "insecure" SSL '
             'connections. '
             'Default: %(default)s',
        dest='VERIFY',
        default=DEFAULT_VERIFY,
    )

    parser.add_argument(
        '--proxies',
        help='This option allows you to set specific proxies. '
             'For no proxy: {"http": None, "https": None}. '
             'Default: %(default)s (System Proxy)',
        dest='PROXIES',
        action='store_true',
        default=DEFAULT_PROXIES,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. '
             'Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    return parser.parse_args()


def main():
    """The main function.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    ticket_data = []

    if args.TEST is None:
        # get token
        token = lib.avelon.get_token(
            client_id=args.CLIENT_ID,
            client_secret=args.CLIENT_SECRET,
            username=args.USERNAME,
            password=args.PASSWORD,
            verify=args.VERIFY,
            proxies=args.PROXIES,
            timeout=args.TIMEOUT,
        )

        # get tickets
        tickets = lib.avelon.get_tickets(
            access_token=token['access_token'],
            verify=args.VERIFY,
            proxies=args.PROXIES,
            timeout=args.TIMEOUT,
        )
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        tickets = json.loads(stdout)

    # analyze tickets
    used_state = STATE_OK
    locked_state = STATE_OK


    for ticket in tickets:
        state = lib.base.get_worst(state, used_state)

        if ticket['type'] == 'ALARM' and ticket['status'] == 'CLOSED':
            locked_state = STATE_OK
        if ticket['type'] == 'ALARM' and ticket['status'] == 'ACKNOWLEDGED':
            locked_state = STATE_WARN
        elif ticket['type'] == 'ALARM' and ticket['status'] == 'OPEN':
            locked_state = STATE_CRIT
        
        state = lib.base.get_worst(state, locked_state)
        ticket['state'] = lib.base.state2str(locked_state, prefix='')
        
        # Ticket filter
        if args.NO_CLOSED_TICKET == 'True' and ticket['status'] != 'CLOSED':
            ticket_data.append(ticket)
        elif args.NO_CLOSED_TICKET == 'False':
            ticket_data.append(ticket)

    if state == STATE_CRIT:
        msg = 'There are open alarm ticket(s).\n\n' + msg
    elif state == STATE_WARN:
        msg = 'There are acknowledged alarm ticket(s).\n\n' + msg
    else:
        msg = 'Everything is ok.\n\n' + msg

 # build the message
    if ticket_data:
        keys = [
            'id',
            'created',
            'type',
            'message',
            'status',
            'state',
        ]
        headers = [
            'ID',
            'Timestamp',
            'Type',
            'Message',
            'Status',
            'State',
        ]
    
    if ticket_data:
        msg += lib.base.get_table(
                sorted(ticket_data, key=lambda d: d['id']),
                keys,
                header=headers,
            )
    
    # over and out
    lib.base.oao(msg, state, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
