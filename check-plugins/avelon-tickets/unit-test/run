#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../avelon-tickets'
    def test_if_check_runs_tickets(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --client-id "CLIENTID" --client-secret "CLIENTSECRET" --username "USERNAME" --password "PASSWORD" --test=stdout/EXAMPLE01,,0'))
        self.assertIn('There are WARNING alarm ticket(s).', stdout)
        self.assertIn('', stdout)
        self.assertIn('ID       ! Timestamp                        ! Message                                                     ! State', stdout)
        self.assertIn('---------+----------------------------------+-------------------------------------------------------------+------------------------', stdout)
        self.assertIn('13927572 ! 2024-06-18 19:46:56 (5D 13h ago) ! Abschaltend: 6102/5/22: Durchfluss Notkühlung FQ201 Störung ! OPEN [WARNING]', stdout)
        self.assertIn('13927573 ! 2024-06-18 19:46:56 (5D 13h ago) ! Störung: 6102/5/0: Anlage Zustand Störung                   ! ACKNOWLEDGED [WARNING]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_tickets(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --client-id "CLIENTID" --client-secret "CLIENTSECRET" --username "USERNAME" --password "PASSWORD" --critical ACKNOWLEDGED OPEN --test=stdout/EXAMPLE01,,0'))
        self.assertIn('There are CRITICAL alarm ticket(s).', stdout)
        self.assertIn('', stdout)
        self.assertIn('ID       ! Timestamp                        ! Message                                                     ! State', stdout)
        self.assertIn('---------+----------------------------------+-------------------------------------------------------------+-------------------------', stdout)
        self.assertIn('13927572 ! 2024-06-18 19:46:56 (5D 13h ago) ! Abschaltend: 6102/5/22: Durchfluss Notkühlung FQ201 Störung ! OPEN [CRITICAL]', stdout)
        self.assertIn('13927573 ! 2024-06-18 19:46:56 (5D 13h ago) ! Störung: 6102/5/0: Anlage Zustand Störung                   ! ACKNOWLEDGED [CRITICAL]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_tickets(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --client-id "CLIENTID" --client-secret "CLIENTSECRET" --username "USERNAME" --password "PASSWORD" --warning ACKNOWLEDGED --critical OPEN --test=stdout/EXAMPLE01,,0'))
        self.assertIn('There are CRITICAL alarm ticket(s).', stdout)
        self.assertIn('', stdout)
        self.assertIn('ID       ! Timestamp                        ! Message                                                     ! State', stdout)
        self.assertIn('---------+----------------------------------+-------------------------------------------------------------+------------------------', stdout)
        self.assertIn('13927572 ! 2024-06-18 19:46:56 (5D 13h ago) ! Abschaltend: 6102/5/22: Durchfluss Notkühlung FQ201 Störung ! OPEN [CRITICAL]', stdout)
        self.assertIn('13927573 ! 2024-06-18 19:46:56 (5D 13h ago) ! Störung: 6102/5/0: Anlage Zustand Störung                   ! ACKNOWLEDGED [WARNING]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_tickets(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --client-id "CLIENTID" --client-secret "CLIENTSECRET" --username "USERNAME" --password "PASSWORD" --test=stdout/EXAMPLE02,,0'))
        self.assertIn('There are WARNING alarm ticket(s).', stdout)
        self.assertIn('', stdout)
        self.assertIn('ID       ! Timestamp                        ! Message                                   ! State', stdout)
        self.assertIn('---------+----------------------------------+-------------------------------------------+------------------------', stdout)
        self.assertIn('13927573 ! 2024-06-18 19:46:56 (5D 13h ago) ! Störung: 6102/5/0: Anlage Zustand Störung ! ACKNOWLEDGED [WARNING]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_tickets(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --client-id "CLIENTID" --client-secret "CLIENTSECRET" --username "USERNAME" --password "PASSWORD" --closed-ticket --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('', stdout)
        self.assertIn('ID       ! Timestamp                       ! Message                                                          ! State', stdout)
        self.assertIn('---------+---------------------------------+------------------------------------------------------------------+--------', stdout)
        self.assertIn('13915922 ! 2024-06-14 23:58:36 (1W 2D ago) ! Störung: 6102/5/5: Vorlauftemperatur TT201 zu tief -> Notkühlung ! CLOSED', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_tickets(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --client-id "CLIENTID" --client-secret "CLIENTSECRET" --username "USERNAME" --password "PASSWORD" --test=stdout/EXAMPLE04,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

if __name__ == '__main__':
    unittest.main()


