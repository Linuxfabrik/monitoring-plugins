#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../cometsystem'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegex(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE01,,0 --url http://example.com'))
        self.assertIn('Everything is ok on host-name SN 20961563.', stdout)
        self.assertIn('Ch# ! Name              ! Alarm ! Value  ', stdout)
        self.assertIn('----+-------------------+-------+--------', stdout)
        self.assertIn('ch1 ! Temperature       !       ! 28.9C  ', stdout)
        self.assertIn('ch2 ! Relative humidity !       ! 15.8%RH', stdout)
        self.assertIn('ch3 ! Dew point         !       ! 0.4C   ', stdout)
        self.assertIn('ch4 ! n/a               !       ! Error 2n/a', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0 --url http://example.com'))
        self.assertIn('There are warnings on Web Sensor SN 17965562.', stdout)
        self.assertIn('Ch# ! Name                 ! Alarm ! Value  ', stdout)
        self.assertIn('----+----------------------+-------+----------------', stdout)
        self.assertIn('ch1 ! Temperature          ! high  ! 27.3C [WARNING]', stdout)
        self.assertIn('ch2 ! Relative humidity    !       ! 43.1%RH', stdout)
        self.assertIn('ch3 ! Dew point            ! low   ! 13.7C [WARNING]', stdout)
        self.assertIn('ch4 ! Atmospheric pressure !       ! 958.6hPa', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE02_invalid_severity(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0 --url http://example.com --severity gobbledygook'))
        self.assertIn('Unknown states on Web Sensor SN 17965562.', stdout)
        self.assertIn('Ch# ! Name                 ! Alarm ! Value', stdout)
        self.assertIn('----+----------------------+-------+----------------', stdout)
        self.assertIn('ch1 ! Temperature          ! high  ! 27.3C [UNKNOWN]', stdout)
        self.assertIn('ch2 ! Relative humidity    !       ! 43.1%RH', stdout)
        self.assertIn('ch3 ! Dew point            ! low   ! 13.7C [UNKNOWN]', stdout)
        self.assertIn('ch4 ! Atmospheric pressure !       ! 958.6hPa', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)

    def test_if_check_runs_EXAMPLE02_all_crit(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0 --url http://example.com --severity crit'))
        self.assertIn('There are critical errors on Web Sensor SN 17965562', stdout)
        self.assertIn('Ch# ! Name                 ! Alarm ! Value', stdout)
        self.assertIn('----+----------------------+-------+-----------------', stdout)
        self.assertIn('ch1 ! Temperature          ! high  ! 27.3C [CRITICAL]', stdout)
        self.assertIn('ch2 ! Relative humidity    !       ! 43.1%RH', stdout)
        self.assertIn('ch3 ! Dew point            ! low   ! 13.7C [CRITICAL]', stdout)
        self.assertIn('ch4 ! Atmospheric pressure !       ! 958.6hPa', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE02_all_crit_order_matters(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0 --url http://example.com --severity crit --severity temp:warn'))
        self.assertIn('There are critical errors on Web Sensor SN 17965562', stdout)
        self.assertIn('Ch# ! Name                 ! Alarm ! Value', stdout)
        self.assertIn('----+----------------------+-------+-----------------', stdout)
        self.assertIn('ch1 ! Temperature          ! high  ! 27.3C [CRITICAL]', stdout)
        self.assertIn('ch2 ! Relative humidity    !       ! 43.1%RH', stdout)
        self.assertIn('ch3 ! Dew point            ! low   ! 13.7C [CRITICAL]', stdout)
        self.assertIn('ch4 ! Atmospheric pressure !       ! 958.6hPa', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE02_all_crit_except_temp(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0 --url http://example.com --severity temp:warn --severity crit'))
        self.assertIn('There are critical errors on Web Sensor SN 17965562', stdout)
        self.assertIn('Ch# ! Name                 ! Alarm ! Value', stdout)
        self.assertIn('----+----------------------+-------+-----------------', stdout)
        self.assertIn('ch1 ! Temperature          ! high  ! 27.3C [WARNING]', stdout)
        self.assertIn('ch2 ! Relative humidity    !       ! 43.1%RH', stdout)
        self.assertIn('ch3 ! Dew point            ! low   ! 13.7C [CRITICAL]', stdout)
        self.assertIn('ch4 ! Atmospheric pressure !       ! 958.6hPa', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE03,,0 --url http://example.com --severity humi:high:ok --severity humi:low:warn --severity crit'))
        self.assertIn('There are critical errors on My device SN 13940001.', stdout)
        self.assertIn('Ch# ! Name        ! Alarm ! Value', stdout)
        self.assertIn('----+-------------+-------+------------------', stdout)
        self.assertIn('ch1 ! Humidity    ! high  ! 34.94%RH', stdout)
        self.assertIn('ch2 ! Temperature !       ! 22.49F', stdout)
        self.assertIn('ch3 ! n/a         ! high  ! 22.49x [CRITICAL]', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)


if __name__ == '__main__':
    unittest.main()
