#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../docker-stats'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegex(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE01,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Container         ! CPU % ! Mem % ', stdout)
        self.assertIn('------------------+-------+-------', stdout)
        self.assertIn('traefik_traefik.2 ! 0.0   ! 0.0', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02_fullname(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0 --full-name'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Container                                   ! CPU % ! Mem % ', stdout)
        self.assertIn('--------------------------------------------+-------+-------', stdout)
        self.assertIn('traefik_traefik.2.1idw12p2yqpxutlzkcwign4at ! 0.0   ! 0.0', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Container     ! CPU % ! Mem % ', stdout)
        self.assertIn('--------------+-------+-------', stdout)
        self.assertIn('elasticsearch ! 188.8 ! 16.73', stdout)
        self.assertIn('graylog       ! 204.2 ! 5.69', stdout)
        self.assertIn('mongo         ! 0.3   ! 1.95', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE04(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE04,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Container                                                           ! CPU % ! Mem % ', stdout)
        self.assertIn('--------------------------------------------------------------------+-------+-------', stdout)
        self.assertIn('runner-7ayh6h5f-project-107-concurrent-0-37b2c7aee9359db9-build     ! 95.0  ! 1.22  ', stdout)
        self.assertIn('runner-7ayh6h5f-project-19-concurrent-0-99f0211c36d59d01-build      ! 59.5  ! 0.99  ', stdout)
        self.assertIn('runner-7ayh6h5f-project-49-concurrent-0-e180afe41fc754dc-predefined ! 79.5  ! 0.15 ', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)


if __name__ == '__main__':
    unittest.main()
