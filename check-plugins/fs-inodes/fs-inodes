#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import os  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071301'

DESCRIPTION = 'Checks the used inode space in percent, default on "/", "/tmp" and "/boot".'

DEFAULT_WARN  = 90
DEFAULT_CRIT  = 95
DEFAULT_MOUNT = '/, /tmp, /boot'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold inode usage percentage. Default: %(default)s',
        dest='CRIT',
        type=float,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--mount',
        help='The mount point, in the format "mount1,mount2". Default: "%(default)s"',
        dest='MOUNT',
        type=lambda s: [str(item).strip() for item in s.split(',')],
        default=DEFAULT_MOUNT,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold inode usage percentage. Default: %(default)s',
        dest='WARN',
        type=float,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    msg = ''
    perfdata = ''
    state = STATE_OK

    for mount in args.MOUNT:
        try:
            st = os.statvfs(mount)
            inodes_total = float(st.f_files)
            inodes_free = float(st.f_ffree)
            inodes_used = round((inodes_total - inodes_free) / inodes_total * 100, 1)

            msg += '{} {}%, '.format(mount, inodes_used)
            perfdata += lib.base.get_perfdata(mount, inodes_used, '%', args.WARN, args.CRIT, 0, 100)

            if inodes_used >= args.CRIT:
                state = lib.base.get_worst(state, STATE_CRIT)
                msg = msg[:-2] + ' (CRIT), '
            elif inodes_used >= args.WARN:
                state = lib.base.get_worst(state, STATE_WARN)
                msg = msg[:-2] + ' (WARN), '
        except Exception:
            lib.base.cu('Something seems to be wrong with the input parameter')

    # over and out
    lib.base.oao(msg[:-2], state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
