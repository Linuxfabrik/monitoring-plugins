#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import platform  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.cache  # pylint: disable=C0413
import lib.db_sqlite  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

try:
    import psutil
except ImportError as e:
    lib.base.cu('Python module "psutil" is not installed.')


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023071301'

DESCRIPTION = """Checks disk IO."""

DEFAULT_CACHE_EXPIRE = 90
DEFAULT_COUNT = 5       # measurements; if check runs once per minute, this is a 5 minute interval
DEFAULT_WARN = 80       # %
DEFAULT_CRIT = 90       # %
DEFAULT_IGNORE = [
    'sr',
    'loop',
    'zram',
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--count',
        help='Number of times the value has to be above the given thresholds. Default: %(default)s',
        dest='COUNT',
        type=int,
        default=DEFAULT_COUNT,
    )

    parser.add_argument(
        '--critical',
        help='Set the CRIT threshold for disk I/O read/write rate over the entire period as a '
             'percentage of the maximum disk I/O rate. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--ignore',
        help='Ignore disk names starting with a string like "sr" (repeating). '
             'Default: %(default)s',
        dest='IGNORE',
        default=DEFAULT_IGNORE,
        action='append',
    )

    parser.add_argument(
        '--warning',
        help='Set the CRIT threshold for disk I/O read/write rate over the entire period as a '
             'percentage of the maximum disk I/O rate. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # Kernel 5.5 added 2 more fields to /proc/diskstats, requiring another
    # change after the one for 4.18, which recently added 4 fields.
    # To prevent "ValueError: not sure how to interpret line",
    # we check the version of psutil first.
    if all([
            lib.version.version(platform.release()) >= lib.version.version('4.18.0'),
            lib.version.version(psutil.__version__) < lib.version.version('5.7.0')
        ]):
        lib.base.oao('Nothing checked. Running Kernel >= 4.18, this check needs the Python module '
            'psutil v5.7.0+ (installed {}; have a look at '
            'https://github.com/giampaolo/psutil/pull/1665 '
            'for details).'.format(psutil.__version__), STATE_OK, always_ok=args.ALWAYS_OK)

    conn = lib.base.coe(
        lib.db_sqlite.connect(filename='linuxfabrik-monitoring-plugins-disk-io.db')
    )

    # create the perfdata table
    definition = '''
            name                TEXT NOT NULL,
            busy_time           INT NOT NULL,
            read_bytes          INT NOT NULL,
            read_merged_count   INT NOT NULL,
            read_time           INT NOT NULL,
            write_bytes         INT NOT NULL,
            write_merged_count  INT NOT NULL,
            write_time          INT NOT NULL,
            timestamp           INT NOT NULL
        '''
    lib.base.coe(lib.db_sqlite.create_table(conn, definition, drop_table_first=False))
    lib.base.coe(lib.db_sqlite.create_index(conn, 'name'))

    # get disk data and store it to database
    try:
        disk_io_counters = psutil.disk_io_counters(perdisk=True)
    except ValueError as e:
        lib.base.cu('psutil raised an error')

    now = lib.time.now()

    disks = []
    for disk, values in disk_io_counters.items():
        if not disk or any(disk.startswith(i) for i in args.IGNORE):
            continue
        # read_count and write_count are the same value for all disks, so simply ignore them
        data = {}
        data['name'] = disk
        data['busy_time'] = getattr(values, 'busy_time', 0)
        data['read_bytes'] = getattr(values, 'read_bytes', 0)
        # data['read_count'] = getattr(values, 'read_count', 0)
        data['read_merged_count'] = getattr(values, 'read_merged_count', 0)
        data['read_time'] = getattr(values, 'read_time', 0)
        data['write_bytes'] = getattr(values, 'write_bytes', 0)
        # data['write_count'] = getattr(values, 'write_count', 0)
        data['write_merged_count'] = getattr(values, 'write_merged_count', 0)
        data['write_time'] = getattr(values, 'write_time', 0)
        data['timestamp'] = now
        disks.append(disk)
        lib.base.coe(lib.db_sqlite.insert(conn, data))

    lib.base.coe(lib.db_sqlite.cut(conn, _max=args.COUNT*len(disks)))
    lib.base.coe(lib.db_sqlite.commit(conn))

    # init some vars
    msg = 'No I/O.'
    perfdata = ''
    state = STATE_OK
    table_values = []

    max_rw = 0       # disk with the highest sum of r/w: show this on top later on
    # we warn about a "count" period/amount of time, not about the current situation above
    # (what might be a peak only)
    for disk in sorted(disks):
        # get all historical data rows for a specific disk, newest item first
        diskdata = lib.base.coe(lib.db_sqlite.select(
            conn,
            '''
            SELECT *
            FROM perfdata
            WHERE name = :name
            ORDER BY timestamp DESC
            ''',
            {'name': disk},
        ))
        if len(diskdata) < 2:
            lib.db_sqlite.close(conn)
            lib.base.oao('Waiting for more data.', state)

        # calculate current rates
        timestamp_diff = diskdata[0]['timestamp'] - diskdata[1]['timestamp'] # in seconds
        if timestamp_diff == 0:
            timestamp_diff = 1
        read_bytes_per_second1 = int(float(diskdata[0]['read_bytes'] - diskdata[1]['read_bytes']) / timestamp_diff) # pylint: disable=C0301
        write_bytes_per_second1 = int(float(diskdata[0]['write_bytes'] - diskdata[1]['write_bytes']) / timestamp_diff) # pylint: disable=C0301
        throughput1 = read_bytes_per_second1 + write_bytes_per_second1
        if any([
            timestamp_diff < 0,
            read_bytes_per_second1 < 0,
            write_bytes_per_second1 < 0,
            throughput1 < 0,
        ]):
            # happens after a reboot
            lib.db_sqlite.close(conn)
            lib.base.oao('Waiting for more data.', state)

        # store the max. measured throughput in cache
        throughput_db = lib.cache.get(
            'disk-io-{}-throughput-max'.format(disk),
            filename='linuxfabrik-monitoring-plugins-disk-io.db',
        )
        if throughput_db is False:
            # unknown disk, no value
            throughput_max = 10 * 1024 * 1024      # Disk should be capable of 10 MB/sec
            lib.cache.set(
                'disk-io-{}-throughput-max'.format(disk),
                throughput_max,
                filename='linuxfabrik-monitoring-plugins-disk-io.db',
            )
        elif throughput1 > int(throughput_db):
            throughput_max = throughput1
            lib.cache.set(
                'disk-io-{}-throughput-max'.format(disk),
                throughput_max,
                filename='linuxfabrik-monitoring-plugins-disk-io.db',
            )
        else:
            throughput_max = int(throughput_db)

        # perfdata
        perfdata += lib.base.get_perfdata('{}_busy_time'.format(disk), diskdata[0]['busy_time'], 'c', None, None, 0, None) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_read_bytes'.format(disk), diskdata[0]['read_bytes'], 'c', None, None, 0, None) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_read_merged_count'.format(disk), diskdata[0]['read_merged_count'], 'c', None, None, 0, None) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_read_time'.format(disk), diskdata[0]['read_time'], 'c', None, None, 0, None) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_write_bytes'.format(disk), diskdata[0]['write_bytes'], 'c', None, None, 0, None) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_write_merged_count'.format(disk), diskdata[0]['write_merged_count'], 'c', None, None, 0, None) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_write_time'.format(disk), diskdata[0]['write_time'], 'c', None, None, 0, None) # pylint: disable=C0301

        perfdata += lib.base.get_perfdata('{}_read_bytes_per_second1'.format(disk), read_bytes_per_second1, 'B', None, None, 0, throughput_max) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_write_bytes_per_second1'.format(disk), write_bytes_per_second1, 'B', None, None, 0, throughput_max) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_throughput1'.format(disk), throughput1, None, None, None, 0, throughput_max) # pylint: disable=C0301

        if throughput1 > max_rw:
            msg = '{}: {}/s read, {}/s write (current)'.format(
                disk,
                lib.human.bytes2human(read_bytes_per_second1),
                lib.human.bytes2human(write_bytes_per_second1),
            )
            max_rw = read_bytes_per_second1 + write_bytes_per_second1

        # calculate read/write rate over the entire period
        if len(diskdata) != args.COUNT:
            # not enough data yet
            continue
        timestamp_diff = diskdata[0]['timestamp'] - diskdata[args.COUNT - 1]['timestamp'] # in seconds # pylint: disable=C0301
        if timestamp_diff == 0:
            timestamp_diff = 1
        read_bytes_per_second15 = float((diskdata[0]['read_bytes'] - diskdata[args.COUNT - 1]['read_bytes']) / timestamp_diff) # pylint: disable=C0301
        read_bytes_per_second15 = max(read_bytes_per_second15, 0)
        write_bytes_per_second15 = float((diskdata[0]['write_bytes'] - diskdata[args.COUNT - 1]['write_bytes']) / timestamp_diff) # pylint: disable=C0301
        write_bytes_per_second15 = max(write_bytes_per_second15, 0)
        throughput15 = read_bytes_per_second15 + write_bytes_per_second15   # let's just call it like in cpu-usage # pylint: disable=C0301

        perfdata += lib.base.get_perfdata('{}_read_bytes_per_second15'.format(disk), read_bytes_per_second15, 'B', None, None, 0, throughput_max) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_write_bytes_per_second15'.format(disk), write_bytes_per_second15, 'B', None, None, 0, throughput_max) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}_throughput15'.format(disk), throughput15, None, throughput_max * args.WARN / 100, throughput_max * args.CRIT / 100, 0, throughput_max) # pylint: disable=C0301

        # get state based on max measured I/O values
        disk_state = lib.base.get_state(
            throughput15,
            throughput_max * args.WARN / 100,
            throughput_max * args.CRIT / 100,
        )
        state = lib.base.get_worst(disk_state, state)

        table_values.append({
            'name': disk,
            'max': lib.human.bytes2human(throughput_max),
            'r1': lib.human.bytes2human(read_bytes_per_second1),
            'w1': lib.human.bytes2human(write_bytes_per_second1),
            'r15': lib.human.bytes2human(read_bytes_per_second15),
            'w15': lib.human.bytes2human(write_bytes_per_second15),
            't15': lib.human.bytes2human(throughput15) + lib.base.state2str(disk_state, prefix=' '), # pylint: disable=C0301
        })

    lib.db_sqlite.close(conn)

    msg = msg + '\n\n'
    if len(table_values) > 0:
        msg += lib.base.get_table(
            table_values,
            [
                'name',
                'max',
                'r1',
                'w1',
                'r15',
                'w15',
                't15',
            ],
            header=[
                'Disk',
                'RWmax/s',
                'R1/s',
                'W1/s',
                'R{}/s'.format(args.COUNT),
                'W{}/s'.format(args.COUNT),
                'RW{}/s'.format(args.COUNT)
            ],
        )

    # Top3 processes that generated the most I/O traffic
    cnt = {}
    try:
        for p in [x.as_dict(attrs=['name', 'io_counters']) for x in psutil.process_iter()]:
            if p['io_counters']:
                if p['name'] not in cnt.keys():
                    cnt[p['name']] = {'r': 0, 'w': 0}
                cnt[p['name']]['r'] += p['io_counters'].read_bytes
                cnt[p['name']]['w'] += p['io_counters'].write_bytes
    except psutil.NoSuchProcess:
        pass
    # cnt.items: [
    #     ('WebKitNetworkProcess', {'r': 1716224, 'w': 0}),
    #     ('ibus-x11', {'r': 0, 'w': 0}), ...
    if cnt:
        cnt = sorted(cnt.items(), key=lambda x: x[1]['r']+x[1]['w'], reverse=True)
        if cnt[0][1]['r'] + cnt[0][1]['w'] > 0: # don't print "1. python3: 0.0B/0.0B (r/w)"
            msg += '\nTop3 processes that generated the most I/O traffic:\n'
            for i, (key, value) in enumerate(cnt):
                if i > 2:
                    break
                msg += '{}. {}: {}/{} (r/w)\n'.format(
                    i + 1,
                    key,
                    lib.human.bytes2human(value['r']),
                    lib.human.bytes2human(value['w']),
                )

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        lib.base.cu()
