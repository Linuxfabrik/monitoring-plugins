#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023060201'

DESCRIPTION = 'Tracks if RHEL is EOL.'

# from https://endoflife.date/api/rhel.json
ENDOFLIFE_DATE = [
  {
    "cycle": "9",
    "support": "2027-05-31",
    "eol": "2032-05-31",
    "extendedSupport": "2034-05-31",
    "latest": "9.2",
    "releaseDate": "2022-05-17",
    "lts": "2032-05-31",
    "latestReleaseDate": "2023-05-10"
  },
  {
    "cycle": "8",
    "support": "2024-05-31",
    "eol": "2029-05-31",
    "extendedSupport": "2031-05-31",
    "latest": "8.8",
    "releaseDate": "2019-05-07",
    "lts": "2029-05-31",
    "latestReleaseDate": "2023-05-16"
  },
  {
    "cycle": "7",
    "support": "2019-12-31",
    "eol": "2024-06-30",
    "extendedSupport": "2026-06-30",
    "latest": "7.9",
    "releaseDate": "2013-12-11",
    "lts": "2024-06-30",
    "latestReleaseDate": "2020-09-29"
  },
  {
    "cycle": "6",
    "support": "2016-05-10",
    "eol": "2020-11-30",
    "extendedSupport": "2024-06-30",
    "releaseDate": "2010-11-09",
    "lts": "2020-11-30",
    "latestReleaseDate": "2018-06-19",
    "latest": "6.10"
  },
  {
    "cycle": "5",
    "support": "2013-01-08",
    "eol": "2017-03-31",
    "extendedSupport": "2020-11-30",
    "releaseDate": "2007-03-15",
    "lts": "2017-03-31",
    "latestReleaseDate": "2014-09-16",
    "latest": "5.11"
  },
  {
    "cycle": "4",
    "support": "2009-03-31",
    "eol": "2012-02-29",
    "extendedSupport": "2017-03-31",
    "releaseDate": "2005-02-15",
    "latestReleaseDate": "2011-02-16",
    "latest": "4.9",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = lib.version.get_os_info()
    state, msg = lib.version.check_eol(
        ENDOFLIFE_DATE,
        re.search(r'\d', installed_version).group(0),
    )

    # over and out
    lib.base.oao(
        '{} ({})'.format(installed_version, msg),
        state,
        lib.base.get_perfdata(
            'rhel-version',
            re.search(r'[\d\.]+', installed_version).group(0).replace('.', ''),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
