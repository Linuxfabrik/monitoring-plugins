#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.infomaniak  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023062601'

DESCRIPTION = """Checks each device / slot of all your Infomaniak Swiss backup products via the
                 Infomaniak API."""

DEFAULT_CRIT = 95
DEFAULT_SEVERITY = 'warn'
DEFAULT_WARN = 90


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--account-id',
        help='Infomaniak Account-ID',
        dest='ACCOUNT_ID',
        required=True,
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold as a percentage. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--severity',
        help='Severity for alerting other values. Default: %(default)s',
        dest='SEVERITY',
        default=DEFAULT_SEVERITY,
        choices=['warn', 'crit'],
    )

    parser.add_argument(
        '--token',
        help='Infomaniak API token',
        dest='TOKEN',
        required=True,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold as a percentage. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch list of products
    if args.TEST is None:
        slots = lib.base.coe(lib.infomaniak.get_swiss_backup_slots(args.ACCOUNT_ID, args.TOKEN))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        slots = json.loads(stdout)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_data = []

    # analyze data
    for slot in slots:
        for slot_data in slot.get('data'):
            if slot_data.get('storage_used', 0):
                used = round(slot_data.get('storage_used') / slot_data.get('size') * 100, 1)
                used_state = lib.base.get_state(used, args.WARN, args.CRIT)
            else:
                # Swiss Backup ordered / paid, but not used / no backups found - throw a warning
                used = 0
                used_state = STATE_WARN
            state = lib.base.get_worst(state, used_state)

            if args.SEVERITY == 'warn':
                locked_state = lib.base.get_state(
                    slot_data.get('locked', False),
                    True,
                    None,
                    _operator='eq',
                )
            else:
                locked_state = lib.base.get_state(
                    slot_data.get('locked', False),
                    None,
                    True,
                    _operator='eq',
                )
            state = lib.base.get_worst(state, locked_state)

            perfdata += lib.base.get_perfdata('{}-locked'.format(slot_data.get('id')), int(slot_data.get('locked', False)), None, None, None, 0, None) # pylint: disable=C0301
            perfdata += lib.base.get_perfdata('{}-percent'.format(slot_data.get('id')), used, '%', args.WARN, args.CRIT, 0, 100) # pylint: disable=C0301
            perfdata += lib.base.get_perfdata('{}-total'.format(slot_data.get('id')), slot_data.get('size'), 'B', None, None, 0, slot_data.get('size')) # pylint: disable=C0301
            perfdata += lib.base.get_perfdata('{}-usage'.format(slot_data.get('id')), slot_data.get('storage_used'), 'B', None, None, 0, slot_data.get('size')) # pylint: disable=C0301

            if slot_data.get('usage_last_check') is None:
                slot_data['usage_last_check'] = 0

            table_data.append({
                'activate_notifications': slot_data.get('activate_notifications'),
                'connection_type': slot_data.get('connection_type'),
                'created_at': slot_data.get('created_at'),
                'customer_name': slot_data.get('customer_name'),
                'id': slot_data.get('id'),
                'lang': slot_data.get('lang'),
                'locked': '{}{}'.format(
                    slot_data.get('locked', False),
                    lib.base.state2str(locked_state, prefix=' '),
                ),
                'product_customer_name': slot.get('product_customer_name'),
                'product_tags': ', '.join([i['name'] for i in slot.get('product_tags')]),
                'subtype': slot_data.get('subtype'),
                'type': slot_data.get('type'),
                'unit_admin': slot_data.get('unit_admin'),
                'usage_last_check': '{} ago'.format(
                    lib.human.seconds2human(lib.time.now(as_type='epoch') - slot_data['usage_last_check']), # pylint: disable=C0301
                ),
                'used': '{} / {}'.format(
                    lib.human.bytes2human(slot_data.get('storage_used')),
                    lib.human.bytes2human(slot_data.get('size')),
                ),
                'used_percent': '{}%{}'.format(
                    used,
                    lib.base.state2str(used_state, prefix=' '),
                ),
                'username': slot_data.get('username'),
            })

    # build the message
    if table_data:
        keys = [
            'id',
            'product_customer_name',
            'product_tags',
            'username',
            'customer_name',
            'connection_type',
            'locked',
            'usage_last_check',
            'used',
            'used_percent',
        ]
        headers = [
            'ID',
            'Customer',
            'Tag',
            'User',
            'Name',
            'Type',
            'Locked',
            'Usage Upd.',
            'Used',
            'Used %',
        ]
        # sort table by user tags
        msg += lib.base.get_table(
            sorted(table_data, key=lambda d: d['product_tags']),
            keys,
            header=headers,
        )

    if state == STATE_CRIT:
        msg = 'There are critical errors.\n\n' + msg
    elif state == STATE_WARN:
        msg = 'There are warnings.\n\n' + msg
    else:
        msg = 'Everything is ok.\n\n' + msg

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
