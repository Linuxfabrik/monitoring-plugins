#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
import lib.lftest  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

try:
    import psutil  # pylint: disable=C0413
except ImportError:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025090101'

DESCRIPTION = """A monitoring plugin, querying the Better EHR Health JSON endpoint.
                http://server:port/health (application/json response)"""

DEFAULT_WARN = 80
DEFAULT_CRIT = 90
DEFAULT_INSECURE = True
DEFAULT_NO_PROXY = False
DEFAULT_URL = 'http://localhost:80/health'
DEFAULT_TIMEOUT  = 3

def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version=f'%(prog)s: v{__version__} by {__author__}'
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold as a percentage. '
             'Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--url',
        help='Better EHR Health Endpoint. '
             'Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold as a percentage. '
             'Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    parser.add_argument(
        '-v', '--verbose',
        help='Set the verbosity level.',
        dest='VERBOSITY',
        action='count',
        default=0
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    if args.TEST is None:
        if not args.URL.startswith('http'):
            lib.base.cu('--url parameter has to start with "http://" or https://".')
        if not args.URL.endswith('/health'):
            lib.base.cu('--url parameter has to end in "/health".')
        url = args.URL

        header = {
            'Accept': 'application/json'
        }
        # and get the info from the API
        success, jsonst = lib.url.fetch_json(
            url,
            header=header,
            insecure=args.INSECURE,
            no_proxy=args.NO_PROXY,
            timeout=args.TIMEOUT,
            extended=True,
        )
        
        if args.VERBOSITY > 2:
            print(success, jsonst, type(jsonst))
        try:
            result = jsonst['response_json']
            status_code = jsonst['status_code']
        except:
            lib.base.cu('ValueError: No JSON object could be decoded')
    else:
        # do not call the command, put in test data
        result, retc = lib.lftest.test(args.TEST)

    if args.VERBOSITY > 2:
            print(status_code, result)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_data = []

    # analyze data
    #HTTP response code is 200 for server status UP and 503 for statuses DEGRADED and DOWN.
    if status_code == 503:
        state = STATE_WARN

    if result['status'] == 'DOWN':
        state = STATE_CRIT

    # build the message

    table_cols = ["Component", "Status", "Details"]

    for component, info in result['components'].items():
        status = info.get('status')
        details = info.get('details', {})
        # Flatten details dict to a string
        table_data.append({'Component': component, 'Status': status, 'Details': ''})
        for k, v in details.items():
            table_data.append({'Component': '', 'Status': '', 'Details': '{}={}'.format(k,v)})
            if isinstance(v, (int, float)):
                if k == 'threshold':
                    continue
                if k == 'total':
                    continue
                warn_threshold = details.get('threshold', '')
                crit_threshold = details.get('threshold', '')
                lable = '_'.join([component, k])
                value = v
                uom = ''
                total = threshold = details.get('total', '')
                if isinstance(v, bool):
                    value = int(v)
                    warn_threshold = ''
                    crit_threshold = ''
                    total = ''
                perfdata += lib.base.get_perfdata(
                    lable,
                    value,
                    uom,
                    warn_threshold,
                    crit_threshold,
                    total)

    msg += '{} Status: {}'.format(lib.base.state2str(state, prefix=' '), result['status'])
    msg += '\n{}'.format(lib.base.get_table(table_data, table_cols, table_cols))
    #perfdata += lib.base.get_perfdata('usage_percent', value, '%', args.WARN, args.CRIT, 0, 100)

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
