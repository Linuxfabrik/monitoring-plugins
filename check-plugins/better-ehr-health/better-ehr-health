#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
import lib.lftest  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

try:
    import psutil  # pylint: disable=C0413
except ImportError:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2025090101'

DESCRIPTION = """A monitoring plugin, querying the Better EHR Health JSON endpoint.
                http://server:port/health (application/json response)"""

DEFAULT_INSECURE = True
DEFAULT_NO_PROXY = False
DEFAULT_URL = 'http://localhost:80/health'
DEFAULT_TIMEOUT  = 3

def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version=f'%(prog)s: v{__version__} by {__author__}'
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--url',
        help='Better EHR Health Endpoint. '
             'Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--override-status',
        metavar='COMPONENT:API_STATE:NAGIOS_STATE',
        action='append',
        help=(
            'Override mapping from API state to Nagios state. '
            'Format: component:api_state:nagios_state '
            'Example: diskSpace:DEGRADED:WARN'
        )
    )

    parser.add_argument(
        '--override-threshold',
        metavar='COMPONENT:DETAIL[:WARN[:CRIT]]',
        action='append',
        help=(
            'Override threshold check for a component detail. '
        'Nagios format: component:detail[:warn[:crit]] '
        'Example: diskSpace:free::20000000'
        )
    )

    parser.add_argument(
        '-v', '--verbose',
        help='Set the verbosity level.',
        dest='VERBOSITY',
        action='count',
        default=0
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    status_overrides = []
    for item in args.override_status or []:
        try:
            comp, api_state, nagios_state = item.split(':', 2)
            status_overrides.append({
                'component': comp,
                'api_state': api_state.upper(),
                'nagios_state': nagios_state.upper(),
            })
        except ValueError:
            lib.base.cu('Invalid status override: {}'.format(item))

    threshold_overrides = []
    for item in args.override_threshold or []:
        parts = item.split(':')
        if len(parts) < 2:
            lib.base.cu('Invalid threshold override: {}'.format(item))
        threshold_overrides.append({
            'component': parts[0],
            'detail': parts[1],
            'warn': parts[2] if len(parts) > 2 and parts[2] != '' else None,
            'crit': parts[3] if len(parts) > 3 and parts[3] != '' else None,
        })

    # fetch data
    if args.TEST is None:
        if not args.URL.startswith('http'):
            lib.base.cu('--url parameter has to start with "http://" or https://".')
        if not args.URL.endswith('/health'):
            lib.base.cu('--url parameter has to end in "/health".')
        url = args.URL

        header = {
            'Accept': 'application/json'
        }
        # and get the info from the API
        success, jsonst = lib.url.fetch_json(
            url,
            header=header,
            insecure=args.INSECURE,
            no_proxy=args.NO_PROXY,
            timeout=args.TIMEOUT,
            extended=True,
        )
        
        if args.VERBOSITY > 2:
            print(success, jsonst, type(jsonst))
        try:
            result = jsonst['response_json']
            status_code = jsonst['status_code']
        except:
            lib.base.cu('ValueError: No JSON object could be decoded')
    else:
        # do not call the command, put in test data
        result, retc = lib.lftest.test(args.TEST)

    if args.VERBOSITY > 2:
            print(status_code, result)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_cols = ['Component', 'Status', 'Details']
    table_data = []
    s_o_s = state
    t_o_s = state

    # analyze data and build message
    #HTTP response code is 200 for server status UP and 503 for statuses DEGRADED and DOWN.
    if status_code == 503:
        state = STATE_WARN

    if result['status'] == 'DOWN':
        state = STATE_CRIT

    # Go over components and check for state overrides
    # build the table while we're at it
    for component, info in result['components'].items():
        status = info.get('status')
        details = info.get('details', {})

        # Check for status overrides
        for s_o in status_overrides:
            if s_o['component'] == component:
                api_state = info.get('status', '').upper()
                if api_state == s_o['api_state']:
                    temp_state = {
                        'CRIT': STATE_CRIT,
                        'CRITICAL': STATE_CRIT,
                        'WARN': STATE_WARN,
                        'WARNING': STATE_WARN,
                        'OK': STATE_OK,
                        'UNKNOWN': STATE_UNKNOWN,
                    }.get(s_o['nagios_state'], STATE_UNKNOWN)
                    s_o_s = lib.base.get_worst(s_o_s, temp_state)
                    status = '{} -> {}'.format(status, lib.base.state2str(temp_state))

        table_data.append({'Component': component, 'Status': status, 'Details': ''})

        for k, v in details.items():
            status = ''
            warn = ''
            crit = ''
            # Apply threshold overrides that match this detail
            for t_o in threshold_overrides:
                if t_o['component'] == component and t_o['detail'] == k:
                    warn = t_o['warn']
                    crit = t_o['crit']
                    temp_state = lib.base.get_state(v, warn, crit, 'range')
                    t_o_s = lib.base.get_worst(t_o_s, temp_state)
                    status = lib.base.state2str(temp_state)

            table_data.append({'Component': '', 'Status': status, 'Details': '{}={}'.format(k,v)})

            # Generate perfdata for numeric values
            if isinstance(v, (int, float)) and k not in ('threshold', 'total'):
                if warn != '':
                    warn_threshold = warn
                else:
                    warn_threshold = details.get('threshold', '')
                if crit != '':
                    crit_threshold = crit
                else:
                    crit_threshold = details.get('threshold', '')
                lable = '_'.join([component, k])
                label = f'{component}_{k}'
                value = v
                uom = ''
                total = details.get('total', '')
                if isinstance(v, bool):
                    value = int(v)
                    warn_threshold = ''
                    crit_threshold = ''
                    total = ''
                perfdata += lib.base.get_perfdata(
                    label,
                    value,
                    uom,
                    warn_threshold,
                    crit_threshold,
                    total)

    # Final plugin state
    final_state = lib.base.get_worst(lib.base.get_worst(state, s_o_s), t_o_s)

    # Compose message
    if final_state == state:
        msg += '{} API Status: {}'.format(lib.base.state2str(state, prefix=' '), result['status'])
    else:
        msg += '{} overridden from {} API Status: {}'.format(
            lib.base.state2str(final_state, prefix=' '),
            lib.base.state2str(state, prefix=' '),
            result['status'])
    msg += '\n{}'.format(lib.base.get_table(table_data, table_cols, table_cols))

    # over and out
    lib.base.oao(msg, final_state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
