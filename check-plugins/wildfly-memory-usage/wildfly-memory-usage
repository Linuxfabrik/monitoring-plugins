#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.wildfly  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024031501'

DESCRIPTION = 'Checks the memory usage of a Wildfly/JBossAS over HTTP.'

DEFAULT_CRIT = 90
DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:9990'
DEFAULT_USERNAME = 'wildfly-monitoring'
DEFAULT_WARN = 80


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--critical',
        help='Set the critical threshold.',
        dest='CRIT',
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--instance',
        help='The instance (server-config) to check if running in domain mode.',
        dest='INSTANCE',
    )

    parser.add_argument(
        '--mode',
        help='The mode the server is running.',
        dest='MODE',
        choices=['standalone', 'domain'],
        default='standalone',
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--node',
        help='The node (host) if running in domain mode.',
        dest='NODE',
    )

    parser.add_argument(
        '-p', '--password',
        help='WildFly API password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='WildFly API URL. '
             'Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '--username',
        help='WildFly API username. '
             'Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
    )

    parser.add_argument(
        '--warning',
        help='Set the warning threshold.',
        dest='WARN',
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # fetch data
    # https://docs.wildfly.org/23/Admin_Guide.html

    data = {
        'operation': 'read-resource',
        'include-runtime': 'true',
        # /core-service/platform-mbean/type/memory
        'address': [{'core-service': 'platform-mbean'}, {'type': 'memory'}],
        'json': 1,
    }
    res = lib.wildfly.get_data(args, data)

    mem_used = res['heap-memory-usage']['used']
    mem_committed = res['heap-memory-usage']['committed']
    mem_max = res['heap-memory-usage']['max']

    used_percent = round((float(mem_used) / float(mem_max) * 100), 2)
    used_state = lib.base.get_state(used_percent, args.WARN, args.CRIT, 'ge')
    committed_percent = round((float(mem_committed) / float(mem_max) * 100), 2)
    committed_state = lib.base.get_state(committed_percent, args.WARN, args.CRIT, 'ge')

    msg += 'Heap used: {}% ({} of {}){}, Heap committed: {}% ({} of {}){}, '.format(
        used_percent, lib.human.bytes2human(mem_used), lib.human.bytes2human(mem_max), lib.base.state2str(used_state, prefix=' '),
        committed_percent, lib.human.bytes2human(mem_committed), lib.human.bytes2human(mem_max), lib.base.state2str(committed_state, prefix=' '),
    )
    state += lib.base.get_worst(used_state, committed_state)
    perfdata += lib.base.get_perfdata('heap-used-percent', used_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base.get_perfdata('heap-committed-percent', committed_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base.get_perfdata('heap-used', mem_used, 'B', None, None, 0, mem_max)
    perfdata += lib.base.get_perfdata('heap-max', mem_max, 'B', None, None, 0, mem_max)
    perfdata += lib.base.get_perfdata('heap-committed', mem_committed, 'B', None, None, 0, mem_max)

    mem_used = res['non-heap-memory-usage']['used']
    mem_committed = res['non-heap-memory-usage']['committed']
    mem_max = res['non-heap-memory-usage']['max']

    used_percent = round((float(mem_used) / float(mem_max) * 100), 2)
    used_state = lib.base.get_state(used_percent, args.WARN, args.CRIT, 'ge')
    committed_percent = round((float(mem_committed) / float(mem_max) * 100), 2)
    committed_state = lib.base.get_state(committed_percent, args.WARN, args.CRIT, 'ge')

    msg += 'Non-Heap used: {}% ({} of {}){}, Non-Heap committed: {}% ({} of {}){}, '.format(
        used_percent, lib.human.bytes2human(mem_used), lib.human.bytes2human(mem_max), lib.base.state2str(used_state, prefix=' '),
        committed_percent, lib.human.bytes2human(mem_committed), lib.human.bytes2human(mem_max), lib.base.state2str(committed_state, prefix=' '),
    )
    state += lib.base.get_worst(used_state, committed_state)
    perfdata += lib.base.get_perfdata('non-heap-used-percent', used_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base.get_perfdata('non-heap-committed-percent', committed_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base.get_perfdata('non-heap-used', mem_used, 'B', None, None, 0, mem_max)
    perfdata += lib.base.get_perfdata('non-heap-max', mem_max, 'B', None, None, 0, mem_max)
    perfdata += lib.base.get_perfdata('non-heap-committed', mem_committed, 'B', None, None, 0, mem_max)

    # over and out
    lib.base.oao(msg[:-2], state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
