#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.db_mysql  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
from lib.globals import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023092201'

DESCRIPTION = """Checks the size of the InnoDB buffer pool in MySQL/MariaDB."""

DEFAULT_DEFAULTS_FILE = '/var/spool/icinga2/.my.cnf'
DEFAULT_DEFAULTS_GROUP = 'client'
DEFAULT_TIMEOUT = 3


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--defaults-file',
        help='Specifies a cnf file to read parameters like user, host and password from '
             '(instead of specifying them on the command line), '
             'for example `/var/spool/icinga2/.my.cnf`. Default: %(default)s',
        dest='DEFAULTS_FILE',
        default=DEFAULT_DEFAULTS_FILE,
    )

    parser.add_argument(
        '--defaults-group',
        help='Group/section to read from in the cnf file. Default: %(default)s',
        dest='DEFAULTS_GROUP',
        default=DEFAULT_DEFAULTS_GROUP,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    return parser.parse_args()


def get_vars(conn):
    # Do not implement `get_all_vars()`, just fetch the ones we need for this check.
    # Without the GLOBAL modifier, SHOW VARIABLES displays the values that are used for
    # the current connection to MariaDB.
    sql = '''
        show global variables
        where variable_name like 'innodb_buffer_pool_size'
            or variable_name like 'innodb_log_file_size'
            or variable_name like 'innodb_log_files_in_group'
            or variable_name like 'innodb_redo_log_capacity'
            ;
          '''
    return lib.base.coe(lib.db_mysql.select(conn, sql))


def main():
    """The main function. Hier spielt die Musik.
    """

    # logic taken from mysqltuner.pl:mysql_innodb(), section # InnoDB Buffer Pool Size, v2.2.12
    # including variable names

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    mysql_connection = {
        'defaults_file':  args.DEFAULTS_FILE,
        'defaults_group': args.DEFAULTS_GROUP,
        'timeout':        args.TIMEOUT,
    }
    conn = lib.base.coe(lib.db_mysql.connect(mysql_connection))
    lib.base.coe(lib.db_mysql.check_select_privileges(conn))

    engines = lib.db_mysql.get_engines(conn)
    if not engines.get('have_innodb', ''):
        lib.db_mysql.close(conn)
        lib.base.cu('InnoDB Storage Engine not available.')
    if engines['have_innodb'] != 'YES':
        lib.db_mysql.close(conn)
        lib.base.cu('InnoDB Storage Engine is disabled.')

    myvar = lib.db_mysql.lod2dict(get_vars(conn))
    if myvar.get('innodb_log_files_in_group', None) is None \
    or myvar.get('innodb_log_files_in_group', 0) == 0:
        # innodb_log_files_in_group removed in MariaDB 10.6.0
        myvar['innodb_log_files_in_group'] = '1'

    sql = '''
        select sum(data_length+index_length) as InnoDB
        from information_schema.tables
        where
            table_schema not in ("information_schema", "performance_schema", "mysql")
            and engine = "innodb";
    '''
    enginestats = lib.base.coe(lib.db_mysql.select(conn, sql))
    if enginestats[0]['InnoDB'] is None:
        enginestats[0]['InnoDB'] = 0

    lib.db_mysql.close(conn)

    # calculations
    mycalc = {}
    mycalc['innodb_log_size_pct'] = int(
        int(myvar['innodb_log_file_size']) * int(myvar['innodb_log_files_in_group']) / \
        int(myvar['innodb_buffer_pool_size']) * 100
    )

    # InnoDB Buffer Pool Size
    # Output changed compared to MySQLTuner (to be more clear).

    # handling innodb_redo_log_capacity is specific to MySQL only - not implemented here
    # MariaDB: https://mariadb.com/kb/en/innodb-redo-log/
    # MySQL: https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_redo_log_capacity

    if not lib.base.X86_64 and int(myvar['innodb_buffer_pool_size']) > 4294967295:
        local_state = STATE_WARN
        state = lib.base.get_worst(state, local_state)
        msg += ('InnoDB Buffer Pool size ({}) limit reached for 32 bits architecture. '
                'Limit innodb_buffer_pool_size under {}{}.').format(
            lib.human.bytes2human(int(myvar['innodb_buffer_pool_size'])),
            lib.human.bytes2human(4294967295),
            lib.base.state2str(local_state),
        )
    if lib.base.X86_64 and int(myvar['innodb_buffer_pool_size']) > 18446744073709551615:
        local_state = STATE_WARN
        state = lib.base.get_worst(state, local_state)
        msg += ('InnoDB Buffer Pool size ({}) limit reached for 64 bits architecture. '
                'Limit innodb_buffer_pool_size under {}{}.').format(
            lib.human.bytes2human(int(myvar['innodb_buffer_pool_size'])),
            lib.human.bytes2human(18446744073709551615),
            lib.base.state2str(local_state),
        )

    msg += 'Data size: {}, innodb_buffer_pool_size: {}'.format(
        lib.human.bytes2human(int(enginestats[0]['InnoDB'])),
        lib.human.bytes2human(int(myvar['innodb_buffer_pool_size'])),
    )
    if int(myvar['innodb_buffer_pool_size']) <= int(enginestats[0]['InnoDB']):
        local_state = STATE_WARN
        state = lib.base.get_worst(state, local_state)
        msg += ' doesn\'t fit {}. Set innodb_buffer_pool_size >= {}. '.format(
            lib.base.state2str(local_state),
            lib.human.bytes2human(int(enginestats[0]['InnoDB'])),
        )

    msg += ('\nRatio innodb_log_file_size ({}) * innodb_log_files_in_group ({}) '
            'vs. innodb_buffer_pool_size ({}): {}% ').format(
        lib.human.bytes2human(int(myvar['innodb_log_file_size'])),
        myvar['innodb_log_files_in_group'],
        lib.human.bytes2human(int(myvar['innodb_buffer_pool_size'])),
        mycalc['innodb_log_size_pct'],
    )

    # badprint
    if int(mycalc['innodb_log_size_pct']) < 20 or int(mycalc['innodb_log_size_pct']) > 30:
        ratio_state = STATE_WARN
        state = lib.base.get_worst(state, ratio_state)
        msg += '{} (should be 25% of innodb_buffer_pool_size). '.format(
            lib.base.state2str(ratio_state, prefix=' '),
        )
        msg += 'Set innodb_log_file_size to {}.'.format(
            lib.human.bytes2human(
                int(myvar['innodb_buffer_pool_size']) / int(myvar['innodb_log_files_in_group']) / 4
            )
        )

    perfdata += lib.base.get_perfdata('mysql_innodb_buffer_pool_size', myvar['innodb_buffer_pool_size'], 'B', None, None, 0, None)
    perfdata += lib.base.get_perfdata('mysql_innodb_log_file_size', myvar['innodb_log_file_size'], 'B', None, None, 0, None)
    perfdata += lib.base.get_perfdata('mysql_innodb_log_files_in_group', myvar['innodb_log_files_in_group'], None, None, None, 0, None)

    perfdata += lib.base.get_perfdata('mysql_innodb_log_size_pct', mycalc['innodb_log_size_pct'], '%', None, None, 0, 100)

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
