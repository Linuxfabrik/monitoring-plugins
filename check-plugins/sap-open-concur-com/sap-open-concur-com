#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.lftest  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = """Linuxfabrik GmbH, Zurich/Switzerland;
                originally written by Dominik Riva, Universit√§tsspital Basel/Switzerland"""
__version__ = '2025021501'


DESCRIPTION = """This plugin checks for incidents mentioned at the SAP Concur Open
                (https://open.concur.com/) Service Status Dashboard."""

DEFAULT_DATACENTER = 'eu'
DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_SERVICE = 'All'
DEFAULT_TIMEOUT = 3
DEFAULT_UTC_OFFSET = lib.time.utc_offset()

services = [
    'Analysis/Intelligence',
    'Compleat (TMC Services)',
    'Expense',
    'Imaging',
    'Invoice',
    'Mobile',
    'Request',
    'Travel',
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--datacenter',
        help='Datacenter to query. '
             'Default: %(default)s',
        dest='DATACENTER',
        default=DEFAULT_DATACENTER,
        choices=[
            'us',
            'us2',
            'eu',
            'eu2',
            'cn',
            'pscc',
        ],
        required=True,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--service',
        help="""Service to check. One of "Analysis/Intelligence", "Compleat (TMC Services)",
                "Expense", "Imaging", "Invoice", "Mobile", "Request", "Travel", or simply "All".
                Check https://open.concur.com to see which service is available for which data
                center. Default: %(default)s""",
        dest='SERVICE',
        default=DEFAULT_SERVICE,
        choices=services.append('All'),
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--utc-offset',
        help='UTC offset. '
             'Default: %(default)s',
        dest='UTC_OFFSET',
        default=DEFAULT_UTC_OFFSET,
    )

    return parser.parse_args()


def get_state(concur_status):
    """Translates SAP status from open.concur.com to Nagios state.
    """
    if concur_status == 'normal':
        return STATE_OK
    if concur_status == 'degradation':
        return STATE_WARN
    if concur_status == 'disruption':
        return STATE_CRIT
    return STATE_UNKNOWN


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    if args.TEST is None:
        url = 'https://open.concur.com/api/v2/status_history?data_center={}&utc_offset={}'.format(
            args.DATACENTER, args.UTC_OFFSET
        )
        result = lib.base.coe(lib.url.fetch_json(
            url,
            insecure=args.INSECURE,
            no_proxy=args.NO_PROXY,
            timeout=args.TIMEOUT,
        ))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.lftest.test(args.TEST)
        result = json.loads(stdout)

    if args.SERVICE == 'All':
        state = STATE_OK
        msg = ''
        for service in services:
            try:
                status = result['data'][service]['Current Status']['status']
            except KeyError:
                # Not all datacenters offer all services
                continue
            if status != 'normal':
                local_state = get_state(status)
                state = lib.base.get_worst(state, local_state)
                msg += '{}: {}{}, '.format(
                    service,
                    status,
                    lib.base.state2str(local_state, prefix=' '),
                )
        if msg == '':
            msg = 'Everything is ok.'
        else:
            msg = msg[:-2]
    else:
        try:
            status = result['data'][args.SERVICE]['Current Status']['status']
        except KeyError:
            lib.base.oao('No result for {}@{}.'.format(args.SERVICE, args.DATACENTER),
                STATE_UNKNOWN
            )
        msg = '{}: {}'.format(
            args.SERVICE,
            status,
        )
        state = get_state(status)

    msg += ' (@{}, UTC{})'.format(
        args.DATACENTER,
        args.UTC_OFFSET,
    )

    # over and out
    lib.base.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
