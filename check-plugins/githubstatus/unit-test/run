#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

import sys
sys.path.append("..") # Adds higher directory to python modules path.



import unittest

from lib.globals import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base
import lib.shell


class TestCheck(unittest.TestCase):

    check = '../githubstatus'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegex(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE01,,0'))
        self.assertIn('1 incindent, 8 components affected. 2023-05-11 14:02:28, minor impact, investigating: Incident with Actions, API Requests, ', stdout)
        self.assertIn('Component      ! Status         ! Updated (Etc/UTC)  ', stdout)
        self.assertIn('---------------+----------------+--------------------', stdout)
        self.assertIn('Git Operations ! partial_outage ! 2023-05-11 13:36:06', stdout)
        self.assertIn('API Requests   ! partial_outage ! 2023-05-11 13:41:29', stdout)
        self.assertIn('Webhooks       ! partial_outage ! 2023-05-11 13:36:07', stdout)
        self.assertIn('Issues         ! partial_outage ! 2023-05-11 13:33:31', stdout)
        self.assertIn('Pull Requests  ! partial_outage ! 2023-05-11 13:33:31', stdout)
        self.assertIn('Actions        ! partial_outage ! 2023-05-11 13:36:05', stdout)
        self.assertIn('Packages       ! operational    ! 2023-04-27 09:56:19', stdout)
        self.assertIn('Pages          ! partial_outage ! 2023-05-11 13:36:06', stdout)
        self.assertIn('Codespaces     ! partial_outage ! 2023-05-11 13:40:16', stdout)
        self.assertIn('Copilot        ! operational    ! 2023-05-04 16:18:39', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE02,,0'))
        self.assertIn('1 incindent, 1 component affected. 2023-05-11 15:20:25, minor impact, investigating: Incident with Actions, API Requests, ', stdout)
        self.assertIn('Component      ! Status         ! Updated (Etc/UTC)  ', stdout)
        self.assertIn('---------------+----------------+--------------------', stdout)
        self.assertIn('Git Operations ! operational    ! 2023-05-11 14:40:16', stdout)
        self.assertIn('API Requests   ! operational    ! 2023-05-11 14:40:15', stdout)
        self.assertIn('Webhooks       ! operational    ! 2023-05-11 14:40:18', stdout)
        self.assertIn('Issues         ! operational    ! 2023-05-11 14:40:17', stdout)
        self.assertIn('Pull Requests  ! partial_outage ! 2023-05-11 13:33:31', stdout)
        self.assertIn('Actions        ! operational    ! 2023-05-11 14:40:14', stdout)
        self.assertIn('Packages       ! operational    ! 2023-04-27 09:56:19', stdout)
        self.assertIn('Pages          ! operational    ! 2023-05-11 14:46:14', stdout)
        self.assertIn('Codespaces     ! operational    ! 2023-05-11 14:40:16', stdout)
        self.assertIn('Copilot        ! operational    ! 2023-05-04 16:18:39', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE03,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('Component      ! Status      ! Updated (Etc/UTC)  ', stdout)
        self.assertIn('---------------+-------------+--------------------', stdout)
        self.assertIn('Git Operations ! operational ! 2023-05-11 14:40:16', stdout)
        self.assertIn('API Requests   ! operational ! 2023-05-11 14:40:15', stdout)
        self.assertIn('Webhooks       ! operational ! 2023-05-11 14:40:18', stdout)
        self.assertIn('Issues         ! operational ! 2023-05-11 14:40:17', stdout)
        self.assertIn('Pull Requests  ! operational ! 2023-05-11 19:00:39', stdout)
        self.assertIn('Actions        ! operational ! 2023-05-11 14:40:14', stdout)
        self.assertIn('Packages       ! operational ! 2023-04-27 09:56:19', stdout)
        self.assertIn('Pages          ! operational ! 2023-05-11 14:46:14', stdout)
        self.assertIn('Codespaces     ! operational ! 2023-05-11 14:40:16', stdout)
        self.assertIn('Copilot        ! operational ! 2023-05-04 16:18:39', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE10(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE10,,0'))
        self.assertIn('1 incindent, 2 components affected. 2014-05-14 14:35:21, critical impact, identified: Unplanned Database Outage. Our master ', stdout)
        self.assertIn('Component         ! Status         ! Updated (TZ n/a)   ', stdout)
        self.assertIn('------------------+----------------+--------------------', stdout)
        self.assertIn('API               ! partial_outage ! 2014-05-14 20:34:43', stdout)
        self.assertIn('Management Portal ! major_outage   ! 2014-05-14 20:34:44', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE11(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE11,,0'))
        self.assertIn('0 incindents, 0 components affected. Partial System Outage (major)', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE12(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE12,,0'))
        self.assertIn('0 incindents, 2 components affected. ', stdout)
        self.assertIn('Component         ! Status         ! Updated (TZ n/a)   ', stdout)
        self.assertIn('------------------+----------------+--------------------', stdout)
        self.assertIn('API               ! partial_outage ! 2014-05-14 20:34:43', stdout)
        self.assertIn('Management Portal ! major_outage   ! 2014-05-14 20:34:44', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE13(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE13,,0'))
        self.assertIn('1 incindent, 0 components affected. 2014-05-14 14:35:21, critical impact, identified: Unplanned', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE14(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE14,,0'))
        self.assertIn(' incindents, 0 components affected. 2014-05-14 14:35:21, critical impact, identified: Unplanned', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE15(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE15,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE16(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE16,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE17(self):
        stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(self.check + ' --test=stdout/EXAMPLE17,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)


if __name__ == '__main__':
    unittest.main()
