#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023082801'

DESCRIPTION = """The readiness probe checks whether the GitLab instance is ready to accept 
                traffic via Rails Controllers.
                The check also validates the dependent services (Database, Redis, Gitaly etc.)
                and gives a status for each."""

DEFAULT_SEVERITY = 'warn'
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost/-/readiness?all=1'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--severity',
        help='Severity for alerting. Default: %(default)s',
        dest='SEVERITY',
        default=DEFAULT_SEVERITY,
        choices=['warn', 'crit'],
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='GitLab readiness URL endpoint. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if not args.URL.endswith('?all=1'):
        args.URL += '?all=1'

    # init some vars
    state = STATE_OK
    table_data = []
    issues = []

    # fetch and analyze data
    if args.TEST is None:
        result = lib.base.coe(lib.url.fetch_json(args.URL, timeout=args.TIMEOUT))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        result = json.loads(stdout)

    if 'status' in result and 'cache_check' in result and not 'error' in result:
        for check in [
            'cache_check',
            'chat_check',
            'cluster_cache_check',
            'cluster_shared_state_check',
            'db_check',
            'db_load_balancing_check',
            'feature_flag_check',
            'gitaly_check',
            'master_check',
            'queues_check',
            'rate_limiting_check',
            'repository_cache_check',
            'sessions_check',
            'shared_state_check',
            'trace_chunks_check',
        ]:
            try:
                result.get(check)[0].get('status', '')
            except TypeError:
                continue
            if result.get(check)[0].get('status', '') != 'ok':
                check_state = lib.base.str2state(args.SEVERITY)
                state = lib.base.get_worst(state, check_state)
                check_msg = lib.base.state2str(check_state, suffix=' ') + \
                    result.get(check)[0].get('message', '')[0:46] + '...'
                issues.append(check)
            else:
                check_state = STATE_OK
                check_msg = 'Running'
            table_data.append({
                'check': check.replace('_check', ''),
                'msg': check_msg,
            })
        if state == STATE_OK:
            msg = 'Everything is ok.'
        else:
            msg = 'There are issues with {}. Run `curl {}` for full results.'.format(
                ', '.join(issues),
                args.URL,
            )
    elif 'status' in result and 'message' in result and not 'error' in result:
        msg = result['message']
        state = lib.base.str2state(args.SEVERITY)
    elif 'error' in result:
        msg = result['error']
        state = lib.base.str2state(args.SEVERITY)
    else:
        msg = 'Unknown error fetching URL {}'.format(args.URL)
        state = STATE_UNKNOWN
    perfdata = lib.base.get_perfdata('gitlab-readiness', state, None, None, None, 0, STATE_UNKNOWN)

    # build the message
    if table_data:
        msg += '\n\n' + lib.base.get_table(
            table_data,
            ['check', 'msg'],
            header=['Service', 'Message'],
        )

    # over and out
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
