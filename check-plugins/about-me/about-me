#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import warnings  # pylint: disable=C0413

warnings.filterwarnings('ignore', category=UserWarning, module='pymysql')

import argparse  # pylint: disable=C0413
import os  # pylint: disable=C0413
import re  # pylint: disable=C0413
import socket  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.disk  # pylint: disable=C0413
import lib.distro  # pylint: disable=C0413
import lib.dmidecode  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.net  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import STATE_OK, STATE_UNKNOWN  # pylint: disable=C0413

try:
    import psutil  # pylint: disable=C0413
    HAVE_PSUTIL = True
except ImportError:
    HAVE_PSUTIL = False


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023091401'

DESCRIPTION = 'Reports a quick overview about the host dimensions and installed software.'

DEFAULT_PUBLIC_IP_URL = None


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--public-ip-url',
        help='If you want this check to return the public IP address, specify one ore more '
             'comma-separated URLs to "what is my ip" online services. '
             'For example: '
             '"https://ipv4.icanhazip.com,https://ipecho.net/plain,https://ipinfo.io/ip" '
             '(these examples are located in the United States). '
             'Default: %(default)s',
        dest='PUBLIC_IP_URL',
        default=DEFAULT_PUBLIC_IP_URL,
    )

    parser.add_argument(
        '--tags',
        help='Guess a list of tags to apply in Icinga Director (Linuxfabrik Basket Config).',
        dest='TAGS',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def find_software(): # pylint: disable=R0915
    """Find software and some capabilities on the system.
    * display-name: Display name. If you omit display-name, it means that you just want the tags.
    * tag-name: Host Tag for your monitoring software
    * guessed: Location found, but can't say anything more
    * installed: System call was successful, so software has been somehow installed
    * version: the version string
    """
    s = {}  # sorted by s['keyname']

    output = run_cmd('/opt/acme.sh/acme.sh --version')
    s['acme.sh'] = {
        'display-name': 'acme.sh',
        'tag-name': 'acme.sh',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'v(.*)') if output is not False else None,
    }

    output = run_cmd('aide --version')
    s['aide'] = {
        'display-name': 'Aide',
        'tag-name': 'aide',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'de (.*)') if output is not False else None,
    }

    output = run_cmd('anydesk --version')
    s['anydesk'] = {
        'display-name': 'AnyDesk',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'(.*)') if output is not False else None,
    }

    output = run_cmd('command -v cockpit-bridge')
    s['cockpit'] = {
        'display-name': 'Cockpit',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('httpd -v')
    s['apache-httpd'] = {
        'display-name': 'Apache httpd',
        'tag-name': 'apache-httpd',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'/(\d+\.\d+\.\d+)') if output is not False else None,
    }

    if 'apache-httpd' not in s:
        output = run_cmd('apache2 -v')
        s['apache-httpd'] = {
            'display-name': 'Apache httpd',
            'tag-name': 'apache-httpd',
            'guessed': False,
            'installed': output is not False,
            'version': run_regex(output, r'/(\d+\.\d+\.\d+)') if output is not False else None,
        }

    output = run_cmd('tomcat version')
    s['apache-tomcat'] = {
        'display-name': 'Apache Tomcat',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/apache-tomcat') or os.path.isdir('/opt/tomcat'),
        'installed': output is not False,
        'version': run_regex(output, r'Server version: Apache Tomcat/(.*)') if output is not False else None, # pylint: disable=C0301
    }

    s['atlassian-bitbucket'] = {
        'display-name': 'Atlassian Bitbucket',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/atlassian/bitbucket'),
        'installed': False,
        'version': None,
    }

    s['atlassian-confluence'] = {
        'display-name': 'Atlassian Confluence',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/atlassian/confluence'),
        'installed': False,
        'version': None,
    }

    s['atlassian-jira'] = {
        'display-name': 'Atlassian Jira',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/atlassian/jira'),
        'installed': False,
        'version': None,
    }

    s['atomicorp'] = {
        'display-name': 'Atomicorp',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/atomicorp'),
        'installed': False,
        'version': None,
    }

    s['baccus'] = {
        'display-name': 'Bacchus',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/bacchus'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('named -v')
    s['bind'] = {
        'display-name': 'BIND',
        'tag-name': 'bind',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'^BIND (.*?)-') if output is not False else None,
    }

    output = run_cmd('borg --version')
    s['borg'] = {
        'display-name': 'Borg',
        'tag-name': 'borgbackup',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    s['brother-printer-sw'] = {
        'display-name': 'Brother Printer SW',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/brother'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('certbot --version')
    s['certbot'] = {
        'display-name': 'certbot',
        'tag-name': 'certbot',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('chronyd --version')
    s['chronyd'] = {
        'display-name': 'chronyd',
        'tag-name': 'chronyd',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('clamd --version')
    s['clamd'] = {
        'display-name': 'ClamAV',
        'tag-name': 'clamav',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*) ') if output is not False else None,
    }

    output = run_cmd('/usr/libexec/cockpit-ws --version')
    s['cockpit'] = {
        'display-name': 'cockpit',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r': ([\d\.]+)') if output is not False else None,
    }

    s['collaboraoffice'] = {
        'display-name': 'Collabora Office',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice'),
        'installed': False,
        'version': None,
    }

    s['collaboraoffice50'] = {
        'display-name': 'Collabora Office 5.0',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice5.0'),
        'installed': False,
        'version': None,
    }

    s['collaboraoffice51'] = {
        'display-name': 'Collabora Office 5.1',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice5.1'),
        'installed': False,
        'version': None,
    }

    s['collaboraoffice53'] = {
        'display-name': 'Collabora Office 5.3',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice5.3'),
        'installed': False,
        'version': None,
    }

    s['collaboraoffice60'] = {
        'display-name': 'Collabora Office 6.0',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice6.0'),
        'installed': False,
        'version': None,
    }

    s['collaboraoffice62'] = {
        'display-name': 'Collabora Office 6.2',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice6.2'),
        'installed': False,
        'version': None,
    }

    s['collaboraoffice64'] = {
        'display-name': 'Collabora Office 6.4',
        'tag-name': 'collabora-online',
        'guessed': os.path.isdir('/opt/collaboraoffice6.4'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('containerd --version')
    s['containerd'] = {
        'display-name': 'Containerd',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\.io (.*) ') if output is not False else None,
    }

    s['contao'] = {
        'display-name': 'Contao',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/html/contao'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('systemctl is-active coturn.service')
    s['coturn'] = {
        'display-name': 'coturn',
        'tag-name': 'coturn',
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    s['dcm4chee'] = {
        'display-name': 'DCM4CHEE',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/dcm4chee'),
        'installed': False,
        'version': None,
    }

    s['django'] = {
        'display-name': 'Django',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/django'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('docker --version')
    s['docker'] = {
        'display-name': 'Docker/Podman',
        'tag-name': 'docker',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (\d+\d?\.\d+\d?.\d+\d?)') if output is not False else None,
    }

    output = run_cmd('docker-compose --version')
    s['docker-compose'] = {
        'display-name': 'Docker Compose',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' version (.*?),') if output is not False else None,
    }

    output = run_cmd('duplicity --version')
    s['duplicity'] = {
        'display-name': 'duplicity',
        'tag-name': 'duplicity',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('filebeat version')
    s['elastic-filebeat'] = {
        'display-name': 'Elastic-Filebeat',
        'tag-name': 'elasticsearch',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n ([\d\.]+)') if output is not False else None,
    }

    s['elasticsearch'] = {
        'display-name': 'Elasticsearch',
        'tag-name': 'elasticsearch',
        'guessed': os.path.isfile('/usr/share/elasticsearch/bin/elasticsearch'),
        'installed': False,
        'version': None,
    }

    output = run_cmd("erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell") # pylint: disable=C0301
    s['erlang'] = {
        'display-name': 'Erlang',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\"(.*)\"') if output is not False else None,
    }

    output = run_cmd('exim --version')
    s['exim'] = {
        'display-name': 'Exim',
        'tag-name': 'exim',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n ([\d\.]+) ') if output is not False else None,
    }

    s['f5vpn'] = {
        'display-name': 'F5 VPN SW',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/f5/vpn'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('fail2ban-server --version')
    s['fail2ban'] = {
        'display-name': 'Fail2ban Server',
        'tag-name': 'fail2ban',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' v(.*)') if output is not False else None,
    }

    output = run_cmd('firefox --version')
    s['firefox'] = {
        'display-name': 'Firefox',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' Firefox (.*)') if output is not False else None,
    }

    output = run_cmd('command -v firewalld')
    s['firewalld'] = {
        #'display-name': 'firewalld',
        'tag-name': 'firewalld',
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('ipa --version')
    s['freeipa'] = {
        'display-name': 'FreeIPA',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*?),') if output is not False else None,
    }

    s['fwbuilder'] = {
        'display-name': 'Firewall Builder',
        'tag-name': 'fwbuilder',
        'guessed': os.path.isfile('/etc/fwb.sh'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('g++ --version')
    s['g++'] = {
        'display-name': 'g++',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\) ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('gcc --version')
    s['gcc'] = {
        'display-name': 'gcc',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\) ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('gdm --version')
    s['gdm'] = {
        'display-name': 'GNOME Display Manager',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\S*$', 0) if output is not False else None,
    }

    output = run_cmd('git --version')
    s['git'] = {
        'display-name': 'Git',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'git version (.*)') if output is not False else None,
    }

    s['gitlab'] = {
        'display-name': 'GitLab',
        'tag-name': 'gitlab',
        'guessed': os.path.isdir('/opt/gitlab'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('glances --version')
    s['glances'] = {
        'display-name': 'Glances',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'Glances v(.*?) ') if output is not False else None,
    }

    output = run_cmd('gnome-shell --version')
    s['gnome-shell'] = {
        'display-name': 'GNOME Shell',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'l (\S*)') if output is not False else None,
    }

    s['google-chrome'] = {
        'display-name': 'Google Chrome',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/google/chrome'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('gpg --version')
    s['gpg'] = {
        'display-name': 'gpg',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'gpg (.*)') if output is not False else None,
    }

    output = run_cmd('grafana-server -v')
    s['grafana'] = {
        'display-name': 'Grafana Server',
        'tag-name': 'grafana',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'Version (.*?) ') if output is not False else None,
    }

    s['graylog'] = {
        'display-name': 'Graylog Server',
        'tag-name': 'graylog-server',
        'guessed': os.path.isfile('/usr/share/graylog-server/bin/graylog-server'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('haproxy -v')
    s['haproxy'] = {
        'display-name': 'HAPrxoy',
        'tag-name': 'haproxy',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'version (.*) -') if output is not False else None,
    }

    s['hnet-efaktura'] = {
        'display-name': 'H-Net SecureService (eFaktura)',
        'tag-name': 'hnet-efaktura',
        'guessed': os.path.isdir('/home/hnet/HnetSecureService'),
        'installed': False,
        'version': None,
    }

    s['hostbill'] = {
        'display-name': 'Hostbill',
        'tag-name': None,
        'guessed': os.path.isdir('/home/hostbill'),
        'installed': False,
        'version': None,
    }

    s['htmly'] = {
        'display-name': 'HTMLy',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/html/htmly'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('i3 --version')
    s['i3'] = {
        'display-name': 'i3',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'version (\S+)') if output is not False else None,
    }

    output = run_cmd('icinga2 --version')
    s['icinga2'] = {
        'display-name': 'Icinga2',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\(version: (.*)\)') if output is not False else None,
    }

    output = run_cmd('influx --version')
    s['influxdb'] = {
        'display-name': 'InfluxDB',
        'tag-name': 'influxdb',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r': (.*)') if output is not False else None,
    }

    output = run_cmd('ipmitool -V')
    s['ipmitool'] = {
        'display-name': 'ipmitool',
        'tag-name': 'ipmi',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (\S*)$') if output is not False else None,
    }

    output = run_cmd('command -v iptables')
    s['iptables'] = {
        #'display-name': 'iptables',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('systemctl is-active iscsi.service')
    s['iscsi'] = {
        #'display-name': 'iscsi',
        'tag-name': 'iscsi',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('java -version')
    s['java'] = {
        'display-name': 'Java',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'(.*)').replace('version ', '').replace('"', '') if output is not False else None, # pylint: disable=C0301
    }

    s['jboss'] = {
        'display-name': 'JBoss',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/jboss'),
        'installed': False,
        'version': None,
    }

    s['jumpcloud'] = {
        'display-name': 'JumpCloud',
        'tag-name': 'jcagent',
        'guessed': os.path.isdir('/opt/jc'),
        'installed': False,
        'version': None,
    }

    s['keeweb'] = {
        'display-name': 'KeeWeb',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/KeeWeb'),
        'installed': False,
        'version': None,
    }

    s['keycloak'] = {
        'display-name': 'Keycloak',
        'tag-name': 'keycloak',
        'guessed': os.path.isdir('/opt/keycloak'),
        'installed': False,
        'version': None,
    }

    s['librenms'] = {
        'display-name': 'LibreNMS',
        'tag-name': 'librenms',
        'guessed': os.path.isdir('/opt/librenms'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('libreoffice --version')
    s['libreoffice'] = {
        'display-name': 'LibreOffice',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*?) ') if output is not False else None,
    }

    output = run_cmd('lighttpd -v')
    s['lighttpd'] = {
        'display-name': 'Lighttpd',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'lighttpd/(.*) -') if output is not False else None,
    }

    output = run_cmd('uname -r')
    s['linux'] = {
        'display-name': 'Linux Kernel',
        'tag-name': 'OS: {}, family "{}"'.format(
            lib.version.get_os_info(),
            lib.distro.get_distribution_facts()['os_family']
        ),
        'guessed': False,
        'installed': output is not False,
        'version': output if output is not False else None,
    }

    output = run_cmd('command -v loolwsd')
    s['loolwsd'] = {
        'display-name': 'LibreOffice Online (LOOL)',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('command -v lvdisplay')
    s['lvm'] = {
        #'display-name': 'lvdisplay',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('mysqld --version')
    if output:
        s['mariadb'] = {
            'display-name': 'MariaDB' if output is not False and 'MariaDB' in output else 'MySQL',
            'tag-name': 'mariadb* / mysql*',
            'guessed': False,
            'installed': output is not False,
            'version': run_regex(output, r'Ver (.*?) ') if output is not False else None,
        }
    else:
        output = run_cmd('mysql --version')
        if output:
            s['mariadb'] = {
                'display-name': 'MariaDB' if output is not False and 'MariaDB' in output else 'MySQL',
                'tag-name': 'mariadb* / mysql*',
                'guessed': False,
                'installed': output is not False,
                'version': run_regex(output, r'(?i)b (.*?),') if output is not False else None,
            }

    s['mariadb-columnstore'] = {
        'display-name': 'MariaDB ColumnStore',
        'tag-name': None,
        'guessed': os.path.isdir('/usr/local/mariadb/columnstore'),
        'installed': False,
        'version': None,
    }

    s['matomo'] = {
        'display-name': 'Matomo',
        'tag-name': 'matomo',
        'guessed': os.path.isdir('/var/www/html/matomo'),
        'installed': False,
        'version': None,
    }

    s['mediawiki'] = {
        'display-name': 'MediaWiki',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/html/mediawiki'),
        'installed': False,
        'version': None,
    }

    s['medidata'] = {
        'display-name': 'Medidata (eFaktura)',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/MPCommunicator'),
        'installed': False,
        'version': None,
    }

    s['metabase'] = {
        'display-name': 'Metabase',
        'tag-name': 'metabase',
        'guessed': os.path.isdir('/opt/metabase'),
        'installed': False,
        'version': None,
    }

    s['mod_security'] = {
        'display-name': 'mod_security',
        'tag-name': 'mod_qos',
        'guessed': os.path.isdir('/var/lib/mod_security'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('mongod --version')
    s['mongodb'] = {
        'display-name': 'MongoDB',
        'tag-name': 'mongodb',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'db version v(.*?)\n') if output is not False else None,
    }

    output = run_cmd('mydumper --version')
    s['mydumper'] = {
        'display-name': 'mydumper/myloader',
        'tag-name': 'mydumper',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*?),') if output is not False else None,
    }

    s['nextcloud'] = {
        'display-name': 'Nextcloud',
        'tag-name': 'nextcloud',
        'guessed': os.path.isdir('/var/www/nextcloud') or os.path.isdir('/var/www/html/nextcloud'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('systemctl is-active nfs-server.service')
    s['nfs-server'] = {
        #'display-name': 'nfs-server',
        'tag-name': 'nfs-server',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('command -v nft')
    s['nftables'] = {
        #'display-name': 'nftables',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('nginx -v')
    s['nginx'] = {
        'display-name': 'Nginx',
        'tag-name': 'nginx',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'nginx version: nginx/(.*)') if output is not False else None,
    }

    output = run_cmd('nikto -Version')
    s['nikto'] = {
        'display-name': 'Nikto',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'main\s*(.*)') if output is not False else None,
    }

    output = run_cmd('node --version')
    s['node'] = {
        'display-name': 'Node',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'v(.*)') if output is not False else None,
    }

    s['nodebb'] = {
        'display-name': 'NodeBB',
        'tag-name': 'nodebb',
        'guessed': os.path.isdir('/opt/nodebb'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('nodejs --version')
    s['nodejs'] = {
        'display-name': 'NodeJS',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'v(.*)') if output is not False else None,
    }

    output = run_cmd('npm --version')
    s['npm'] = {
        'display-name': 'npm',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'(.*)') if output is not False else None,
    }

    output = run_cmd('ntpq -c version')
    s['ntpd'] = {
        'display-name': 'ntpd',
        'tag-name': 'ntpd',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' ([\d\.p]+)@') if output is not False else None,
    }

    s['onlyoffice'] = {
        'display-name': 'Onlyoffice',
        'tag-name': 'onlyoffice',
        'guessed': os.path.isdir('/var/log/onlyoffice'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('openssl version')
    s['openssl'] = {
        'display-name': 'OpenSSL',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*?) ') if output is not False else None,
    }

    output = run_cmd('openvas version')
    s['openvas'] = {
        'display-name': 'OpenVAS',
        'tag-name': 'openvas',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*?)$') if output is not False else None,
    }

    output = run_cmd('vmtoolsd --version')
    s['openvmt'] = {
        'display-name': 'Open Virtual Machine Tools are installed, but throw an error. Maybe tools virtualization condition "vmware" is not met.\n' if output is not False and 'error' in output.lower() else 'Open Virtual Machine Tools', # pylint: disable=C0301
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('openvpn --version')
    if not output:
        output = run_cmd('command -v openvpn')
    s['openvpn'] = {
        'display-name': 'OpenVPN',
        'tag-name': 'openvpn-server',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'N (\d+\.\d+(\.\d+)?)') if output is not False else None,
    }

    s['owncloud'] = {
        'display-name': 'ownCloud',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/owncloud') or os.path.isdir('/var/www/html/owncloud'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('perl --version')
    s['perl'] = {
        'display-name': 'Perl',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' \(v(.*?)\) ') if output is not False else None,
    }

    output = run_cmd('php --version')
    s['php'] = {
        'display-name': 'PHP',
        'tag-name': 'php',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'PHP (.*?) \(.*') if output is not False else None,
    }

    output = run_cmd('php-fpm --version')
    s['php-fpm'] = {
        'display-name': 'PHP-FPM',
        'tag-name': 'php-fpm',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'PHP (.*?) \(.*') if output is not False else None,
    }

    s['php54'] = {
        'display-name': 'PHP 5.4 (RH)',
        'tag-name': 'php',
        'guessed': os.path.isdir('/opt/rh/rh-php54'),
        'installed': False,
        'version': None,
    }

    s['php55'] = {
        'display-name': 'PHP 5.5 (RH)',
        'tag-name': 'php',
        'guessed': os.path.isdir('/opt/rh/rh-php55'),
        'installed': False,
        'version': None,
    }

    s['php56'] = {
        'display-name': 'PHP 5.6 (RH)',
        'tag-name': 'php',
        'guessed': os.path.isdir('/opt/rh/rh-php56'),
        'installed': False,
        'version': None,
    }

    s['php70'] = {
        'display-name': 'PHP 7.0 (RH)',
        'tag-name': 'php',
        'guessed': os.path.isdir('/opt/rh/rh-php70'),
        'installed': False,
        'version': None,
    }

    s['php71'] = {
        'display-name': 'PHP 7.1 (RH)',
        'tag-name': 'php',
        'guessed': os.path.isdir('/opt/rh/rh-php71'),
        'installed': False,
        'version': None,
    }

    s['php72'] = {
        'display-name': 'PHP 7.2 (RH)',
        'tag-name': 'php',
        'guessed': os.path.isdir('/opt/rh/rh-php72'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('pip --version')
    s['pip'] = {
        'display-name': 'pip',
        'tag-name': 'pip',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'pip (.*) from') if output is not False else None,
    }

    s['piwik'] = {
        'display-name': 'Piwik',
        'tag-name': 'matomo',
        'guessed': os.path.isdir('/var/www/html/piwik'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('postconf -d mail_version')
    s['postfix'] = {
        'display-name': 'Postfix',
        'tag-name': 'postfix-mta',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'= ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('psql --version')
    s['postgresql'] = {
        'display-name': 'PostgreSQL',
        'tag-name': 'postgresql',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'\(PostgreSQL\) (.*)') if output is not False else None,
    }

    s['postgresql92'] = {
        'display-name': 'PostgreSQL 9.2 (RH)',
        'tag-name': 'postgresql',
        'guessed': os.path.isdir('/opt/rh/rh-postgresql92'),
        'installed': False,
        'version': None,
    }

    s['postgresql94'] = {
        'display-name': 'PostgreSQL 9.4 (RH)',
        'tag-name': 'postgresql',
        'guessed': os.path.isdir('/opt/rh/rh-postgresql94'),
        'installed': False,
        'version': None,
    }

    s['postgresql95'] = {
        'display-name': 'PostgreSQL 9.5 (RH)',
        'tag-name': 'postgresql',
        'guessed': os.path.isdir('/opt/rh/rh-postgresql95'),
        'installed': False,
        'version': None,
    }

    s['postgresql96'] = {
        'display-name': 'PostgreSQL 9.6 (RH)',
        'tag-name': 'postgresql-96',
        'guessed': os.path.isdir('/opt/rh/rh-postgresql96'),
        'installed': False,
        'version': None,
    }

    s['postgresql100'] = {
        'display-name': 'PostgreSQL 10.0 (RH)',
        'tag-name': 'postgresql',
        'guessed': os.path.isdir('/opt/rh/rh-postgresql10'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('python2.6 --version')
    s['python26'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python2.7 --version')
    s['python27'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python3.4 --version')
    s['python34'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python3.6 --version')
    s['python36'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python3.8 --version')
    s['python38'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python3.9 --version')
    s['python39'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python3.10 --version')
    s['python310'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python3.11 --version')
    s['python311'] = {
        'display-name': 'Python',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('python --version')
    s['python'] = {
        'display-name': '`python`',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': 'cmd mapped to ' + run_regex(output, r' (.*)') if output is not False else None, # pylint: disable=C0301
    }

    output = run_cmd('python2 --version')
    s['python2'] = {
        'display-name': '`python2`',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': 'cmd mapped to ' + run_regex(output, r' (.*)') if output is not False else None, # pylint: disable=C0301
    }

    output = run_cmd('python3 --version')
    s['python3'] = {
        'display-name': '`python3`',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': 'cmd mapped to ' + run_regex(output, r' (.*)') if output is not False else None, # pylint: disable=C0301
    }

    output = run_cmd('qemu-ga --version')
    s['qemu-ga'] = {
        'display-name': 'QEMU Guest Agent',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('rabbitmqctl version')
    s['rabbitmq-server'] = {
        'display-name': 'RabbitMQ Server',
        'tag-name': 'rabbitmq-server',
        'guessed': False,
        'installed': output is not False,
        'version': output if output is not False else None,
    }

    s['rambox'] = {
        'display-name': 'Rambox',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/Rambox'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('rasdaemon --version')
    s['rasdaemon'] = {
        'display-name': 'rasdaemon',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n (.*)') if output is not False else None,
    }

    output = run_cmd('redis-server --version')
    s['redis-server'] = {
        'display-name': 'Redis Server',
        'tag-name': 'redis',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' v=(.*?) ') if output is not False else None,
    }

    output = run_cmd('restic version')
    s['restic'] = {
        'display-name': 'restic',
        'tag-name': 'restic',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'c (.*) c') if output is not False else None,
    }

    s['rocket.chat'] = {
        'display-name': 'Rocket.Chat',
        'tag-name': 'rocketchat',
        'guessed': os.path.isdir('/opt/Rocket.Chat'),
        'installed': False,
        'version': None,
    }

    s['roundcube'] = {
        'display-name': 'Roundcube',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/html/roundcubemail'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('systemctl is-active rsyncd.service')
    s['rsyncd'] = {
        #'display-name': 'rsyncd',
        'tag-name': 'rsyncd',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('command -v sestatus')
    s['selinux'] = {
        #'display-name': 'selinux',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('smbd --version')
    s['smbd'] = {
        'display-name': 'Samba',
        'tag-name': 'samba',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n ([\d\.]+)') if output is not False else None,
    }

    output = run_cmd('snap --version')
    s['snap'] = {
        'display-name': 'Snap',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'p\W(.*)') if output is not False else None,
    }

    output = run_cmd('systemctl is-active snmpd.service')
    s['snmpd'] = {
        #'display-name': 'snmpd',
        'tag-name': 'snmpd',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('command -v spice-vdagentd')
    s['spice-vdagentd'] = {
        'display-name': 'SPICE Agent',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': None,
    }

    output = run_cmd('systemctl is-active splunk.service')
    s['splunk'] = {
        #'display-name': 'splunk',
        'tag-name': 'splunk',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('ssh -V')
    s['ssh'] = {
        'display-name': 'ssh',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'_(.+),') if output is not False else None,
    }

    output = run_cmd('subl --version')
    s['subl'] = {
        'display-name': 'Sublime Text',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'.* (.*)$') if output is not False else None,
    }

    output = run_cmd('sudo --version')
    s['sudo'] = {
        'display-name': 'sudo',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n (.+)') if output is not False else None,
    }

    output = run_cmd('swanctl --version')
    s['swanctl'] = {
        'display-name': 'swanctl',
        'tag-name': 'strongswan',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'(.*)') if output is not False else None,
    }

    output = run_cmd('systemctl is-active syslog-ng.service')
    s['syslog-ng'] = {
        #'display-name': 'syslog-ng',
        'tag-name': 'syslog-ng',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('systemctl is-active notify-and-schedule.timer')
    s['system-update'] = {
        #'display-name': 'system-update',
        'tag-name': 'system-update',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('systemctl --version')
    s['systemd'] = {
        'display-name': 'systemd',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'systemd (\d+)') if output is not False else None,
    }

    output = run_cmd('systemctl is-active systemd-timesyncd.service')
    s['systemd-timesyncd'] = {
        #'display-name': 'systemd-timesyncd',
        'tag-name': 'systemd-timesyncd',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    output = run_cmd('stap --version')
    s['stap'] = {
        'display-name': 'SystemTap',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'n (.*)\)') if output is not False else None,
    }

    s['tarifpool'] = {
        'display-name': 'Tarifpool',
        'tag-name': 'tarifppol-v2',
        'guessed': os.path.isdir('/opt/tarifpool'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('teamviewer --version')
    s['teamviewer'] = {
        'display-name': 'TeamViewer',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'.* (\S*)  ') if output is not False else None,
    }

    output = run_cmd('tmate -V')
    s['tmate'] = {
        'display-name': 'tmate',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('vagrant --version')
    s['vagrant'] = {
        'display-name': 'Vagrant',
        'tag-name': None,
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r' (.*)') if output is not False else None,
    }

    output = run_cmd('veeamagent --version')
    s['veeam'] = {
        'display-name': 'Veeam',
        'tag-name': 'veeam-backup-replication-windows',
        'guessed': False,
        'installed': output is not False,
        'version': run_regex(output, r'(.*)') if output is not False else None,
    }

    output = run_cmd('virsh --version')
    s['virsh'] = {
        'display-name': 'virsh',
        'tag-name': 'kvm-host',
        'guessed': False,
        'installed': output is not False,
        'version': output,
    }

    s['vmware-tools'] = {
        'display-name': 'VMware Tools',
        'tag-name': None,
        'guessed': os.path.isdir('/etc/vmware-tools'),
        'installed': False,
        'version': None,
    }

    output = run_cmd('systemctl is-active vsftpd.service')
    s['vsftpd'] = {
        #'display-name': 'vsftpd',
        'tag-name': 'vsftpd',
        'guessed': False,
        'installed': output == 'active',
        'version': None,
    }

    s['vtiger'] = {
        'display-name': 'Vtiger',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/html/vtigercrm'),
        'installed': False,
        'version': None,
    }

    s['wildfly'] = {
        'display-name': 'WildFly',
        'tag-name': 'wildfly',
        'guessed': os.path.isdir('/opt/wildfly'),
        'installed': False,
        'version': None,
    }

    s['wordpress'] = {
        'display-name': 'WordPress',
        'tag-name': 'wordpress',
        'guessed': os.path.isdir('/var/www/html/wordpress/wp-config.php') or os.path.isdir('/var/www/html/wp-config.php'), # pylint: disable=C0301
        'installed': False,
        'version': None,
    }

    s['yii2'] = {
        'display-name': 'Yii2',
        'tag-name': None,
        'guessed': os.path.isdir('/var/www/html/yii2') or os.path.isdir('/var/www/html/yii2-advanced') or os.path.isdir('/var/www/html/yii2-basic') or os.path.isdir('/var/www/html/yii'), # pylint: disable=C0301
        'installed': False,
        'version': None,
    }

    s['zimbra'] = {
        'display-name': 'Zimbra',
        'tag-name': None,
        'guessed': os.path.isdir('/opt/zimbra'),
        'installed': False,
        'version': None,
    }

    return s


def find_tools(): # pylint: disable=R0915
    """Find simple admin tools, same procedure as above.
    """
    s = {}  # sorted by s['keyname']

    output = run_cmd('command -v dig')
    s['dig'] = {
        'display-name': 'dig',
        'installed': output is not False,
    }

    output = run_cmd('command -v dot')
    s['dot'] = {
        'display-name': 'dot (graphviz)',
        'installed': output is not False,
    }

    output = run_cmd('command -v hdparm')
    s['hdparm'] = {
        'display-name': 'hdparm',
        'installed': output is not False,
    }

    output = run_cmd('command -v iftop')
    s['iftop'] = {
        'display-name': 'iftop',
        'installed': output is not False,
    }

    output = run_cmd('command -v iptraf-ng')
    s['iptraf-ng'] = {
        'display-name': 'iptraf-ng',
        'installed': output is not False,
    }

    output = run_cmd('command -v lsof')
    s['lsof'] = {
        'display-name': 'lsof',
        'installed': output is not False,
    }

    output = run_cmd('command -v ltrace')
    s['ltrace'] = {
        'display-name': 'ltrace',
        'installed': output is not False,
    }

    output = run_cmd('command -v memtest-setup')
    s['memtest86+'] = {
        'display-name': 'memtest86+',
        'installed': output is not False,
    }

    output = run_cmd('command -v nano')
    s['nano'] = {
        'display-name': 'nano',
        'installed': output is not False,
    }

    output = run_cmd('command -v ncat')
    s['ncat'] = {
        'display-name': 'ncat',
        'installed': output is not False,
    }

    output = run_cmd('command -v nmap')
    s['nmap'] = {
        'display-name': 'nmap',
        'installed': output is not False,
    }

    output = run_cmd('command -v rsync')
    s['rsync'] = {
        'display-name': 'rsync',
        'installed': output is not False,
    }

    output = run_cmd('command -v staprun')
    s['staprun'] = {
        'display-name': 'staprun',
        'installed': output is not False,
    }

    output = run_cmd('command -v strace')
    s['strace'] = {
        'display-name': 'strace',
        'installed': output is not False,
    }

    output = run_cmd('command -v tcpdump')
    s['tcpdump'] = {
        'display-name': 'tcpdump',
        'installed': output is not False,
    }

    output = run_cmd('command -v telnet')
    s['telnet'] = {
        'display-name': 'telnet',
        'installed': output is not False,
    }

    output = run_cmd('command -v tmux')
    s['tmux'] = {
        'display-name': 'tmux',
        'installed': output is not False,
    }

    output = run_cmd('command -v unzip')
    s['unzip'] = {
        'display-name': 'unzip',
        'installed': output is not False,
    }

    output = run_cmd('command -v vim')
    s['vim'] = {
        'display-name': 'vim',
        'installed': output is not False,
    }

    output = run_cmd('command -v wget')
    s['wget'] = {
        'display-name': 'wget',
        'installed': output is not False,
    }

    output = run_cmd('command -v whois')
    s['whois'] = {
        'display-name': 'whois',
        'installed': output is not False,
    }

    output = run_cmd('command -v valgrind')
    s['valgrind'] = {
        'display-name': 'valgrind',
        'installed': output is not False,
    }

    output = run_cmd('command -v wireshark')
    s['wireshark'] = {
        'display-name': 'wireshark',
        'installed': output is not False,
    }

    return s


def get_birthdate():
    """Using various methods to determine install date.
    """
    birthdate = '-'
    # Using stat
    cmd = 'stat / | grep "Birth" | sed "s/Birth: //g" | cut -b 2-11'
    success, result = lib.shell.shell_exec(cmd)
    if success:
        birthdate, stderr, retc = result
    if birthdate == '-':
        # nothing found so far, but not all of those are very accurate
        if os.path.isfile('/usr/bin/pacman'):
            # Arch Linux, and Arch based distros using pacman
            cmd = 'head -n 1 $PACMAN_LOG | cut -b 2-11'
        elif os.path.isfile('/usr/bin/emerge'):
            # Gentoo Linux and Gentoo based distros using portage
            cmd = 'head -n 1 $PORTAGE_LOG | cut -b 31-43'
        elif os.path.isfile('/usr/bin/rpm'):
            # Fedora, RedHat, and RPM based distros
            cmd = 'rpm -qi basesystem | grep "Install Date" | sed "s/Install Date: //g"'
        success, result = lib.shell.shell_exec(cmd)
    if success:
        birthdate, stderr, retc = result
    return birthdate.strip()


def get_boot_mode():
    return 'UEFI' if os.path.isdir('/sys/firmware/efi') else 'BIOS'


def get_crontab():
    cmd = r"grep --dereference-recursive --no-filename --invert-match '\s*#' /etc/crontab /etc/cron.d/ /etc/anacrontab /var/spool/cron"
    stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(cmd))
    msg = ''
    line_regex = re.compile(r'\S+=')
    for line in stdout.splitlines():
        line = line.strip()
        if len(line) > 0 and re.match(line_regex, line) is None:
            msg = '{}{}\n'.format(msg, line)
    return msg


def get_disks():
    result = ''
    stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec('lsblk --nodeps --output NAME,SIZE --noheadings --include 8,252,259')) # pylint: disable=C0301
    for disk in stdout.strip().splitlines():
        # zRAM devices can appear in the output of lsblk, but
        # we cannot do anything useful with them
        if disk.startswith('zram'):
            continue
        result += '{}, '.format(re.sub('\\s+', ' ', disk))
    return result[:-2]


def get_hw_info():
    msg = lib.dmidecode.dmidecode()
    return msg


def get_interfaces():
    msg = ''
    try:
        for name, interface in sorted(psutil.net_if_addrs().items()):
            if name == 'lo':
                continue
            for addr in interface:
                if addr.family == lib.net.AF_INET:
                    msg = '{}* {} {}/{}\n'.format(msg, name, addr.address, lib.net.ip_to_cidr(addr.netmask))
    except:
        pass
    return msg


def get_listening_ports():
    result = []
    try:
        nc = psutil.net_connections('inet')
        for c in nc:
            ip, port = c.laddr
            if c.type == socket.SOCK_DGRAM:
                # ignore udp
                continue
            if c.type == socket.SOCK_STREAM and c.status == psutil.CONN_LISTEN:
                proto = 'tcp'
            else:
                continue
            if c.family == socket.AF_INET:
                proto += '4'
            else:
                proto += '6'
            result.append({
                'proto': proto,
                'ip': ip if ip != '::' else '[::]',
                'port': port,
            })
        return sorted(result, key=lambda d: d['port'])
    except:
        pass
    return result


def get_nondefault_users():
    default_linux_users = [
        '_apt',
        '_rpc',
        'abrt',
        'adm',
        'avahi',
        'backup',
        'bin',
        'chrony',
        'colord',
        'daemon',
        'dbus',
        'ftp',
        'games',
        'gnats',
        'halt',
        'irc',
        'list',
        'lp',
        'mail',
        'man',
        'messagebus',
        'news',
        'nobody',
        'operator',
        'pi',
        'polkitd',
        'proxy',
        'pulse',
        'rngd',
        'root',
        'rpc',
        'rpcuser',
        'shutdown',
        'sshd',
        'sssd',
        'sync',
        'sys',
        'systemd-coredump',
        'systemd-network',
        'systemd-oom',
        'systemd-resolve',
        'systemd-timesync',
        'tcpdump',
        'tss',
        'unbound',
        'user',
        'uucp',
    ]
    passwd = lib.base.coe(lib.disk.read_file('/etc/passwd'))
    table_data = []
    header = ['user', 'pw', 'uid', 'gid', 'comment', 'home_dir', 'user_shell']
    for line in passwd.splitlines():
        data = dict(zip(header, line.split(':')))
        if data['user'] not in default_linux_users:
            table_data.append(data)

    return lib.base.get_table(
        table_data,
        header,
        header=header,
        sort_by_key='user',
    )


def get_python_modules():
    """Return a list for each of the installed and missing libraries used in total by all plugins
    (except built-in libraries, which are used, but always there and therefore commented).
    """
    installed, missing = [], []
    modules = [
        #'argparse',
        #'base64',
        'bs4',
        #'collections',
        #'csv',
        #'datetime',
        #'fnmatch',
        'flatdict',
        #'glob',
        #'json',
        #'locale',
        #'os',
        #'pathlib',
        #'platform',
        'psutil',
        'pymysql.cursors',
        'pysmbclient',
        #'re',
        'smbprotocol.exceptions',
        #'socket',
        #'sys',
        #'tempfile',
        #'time',
        #'unittest',
        #'urllib.parse',
        'vici',
        #'warnings',
        #'xml.etree.ElementTree',
        #'xmltodict',
    ]
    for m in modules:
        try:
            mymod = __import__(m)
            try:
                installed.append('{} {}'.format(m, mymod.__version__))
            except AttributeError:
                installed.append(m)
        except ImportError:
            missing.append(m)
    return installed, missing


def get_sys_dimensions():
    """get some very basic system statistics
    """
    sys_dimensions = {}
    try:
        sys_dimensions['cpu'] = psutil.cpu_count(logical=True)
        sys_dimensions['ram'] = psutil.virtual_memory().total
    except:
        pass
    return sys_dimensions


def get_systemd_default_target():
    cmd = 'systemctl get-default'
    stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(cmd))
    if stderr or retc != 0:
        return ''

    return '* {}\n'.format(stdout.strip())


def get_systemd_timers():
    # using `--output=json` sadly does not work with older systemd versions
    # (eg systemd 239 on CentOS 7), therefore we have to parse the human output.
    # in order to list for a different user (`--user`), we would need to sudo to that user
    # first - we will skip that for now

    # NEXT                         LEFT           LAST                         PASSED       UNIT                         ACTIVATES
    # Fri 2023-09-01 10:32:28 CEST 34min left     Fri 2023-09-01 09:08:17 CEST 49min ago    dnf-makecache.timer          dnf-makecache.service
    cmd = 'systemctl list-timers'
    stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(cmd))
    if stderr or retc != 0:
        return ''

    table_data = []
    next_pos = None
    left_pos = None
    last_pos = None
    passed_pos = None
    unit_pos = None
    activates_pos = None

    for line in stdout.splitlines():
        if next_pos is None:
            next_pos = line.find('NEXT')
            left_pos = line.find('LEFT')
            last_pos = line.find('LAST')
            passed_pos = line.find('PASSED')
            unit_pos = line.find('UNIT')
            activates_pos = line.find('ACTIVATES')
        if '.timer' in line:
            table_data.append({
                'unit': line[unit_pos:activates_pos].strip(),
                'activates': line[activates_pos:].strip(),
                'next': line[next_pos:left_pos].strip(),
            })

    return lib.base.get_table(
        table_data,
        ['unit', 'activates', 'next'],
        header=['unit', 'activates', 'next'],
        sort_by_key='unit',
    )


def get_systemd_units(cmd):
    # using `--output=json` sadly does not work with older systemd versions
    # (eg systemd 239 on CentOS 7), therefore we have to parse the human output.
    # in order to list for a different user (`--user`), we would need to sudo to that user
    # first - we will skip that for now
    stdout, stderr, retc = lib.base.coe(lib.shell.shell_exec(cmd))
    if stderr or retc != 0:
        return ''

    msg = ''
    for line in stdout.splitlines():
        msg = '{}* {}\n'.format(msg, line.split()[0])
    return msg


def get_tuned_active_profile():
    """ Return current active tuned profile (if any).
    """
    output = run_cmd('tuned-adm active')
    return run_regex(output, r': (.*)').strip().replace('* ', '') if output is not False else None


def get_virt_info():
    # alternative would be `/usr/sbin/virt-what` (POSIX shell script)
    success, result = lib.shell.shell_exec('systemd-detect-virt')
    if success:
        stdout, stderr, retc = result
        return stdout.strip()
    return 'Unknown'


def run_cmd(cmd, ignore_output=False):
    """Run a command and return its output. Returns stderr if cmd prints its standard output there.
    If ignore_output is set to True, returns True. Returns False if cmd is not found.
    """
    env = os.environ.copy()
    env['LC_ALL'] = 'C'
    env['PATH'] += ':/usr/local/bin:/usr/local/sbin'
    success, result = lib.shell.shell_exec(cmd, env=env)
    if not success:
        return False
    stdout, stderr, retc = result
    if retc != 0:
        # for example if using `command -v loolwsd`
        return False
    if ignore_output:
        return True
    if stdout == '' and stderr != '':
        # https://stackoverflow.com/questions/26028416/why-does-python-print-version-info-to-stderr
        # https://stackoverflow.com/questions/13483443/why-does-java-version-go-to-stderr
        stdout = stderr
    try:
        return stdout.strip().splitlines()[0].strip()
    except IndexError:
        return True


def run_regex(haystack, regex, group=1):
    """Apply a regex to a haystack, assume first match group, otherwise let us choose which one.
    """
    re_search = re.search(regex, haystack)
    if re_search:
        return re_search.group(group).strip()
    return ''


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    perfdata = ''
    guessed = ''
    features_installed = ''
    features_missing = ''
    installed = ''
    tags = ''
    tools = ''

    # fetch and analyze data
    for key, value in find_software().items():
        if 'display-name' in value and value['guessed']:
            guessed += '* {}\n'.format(value['display-name'])
        if 'display-name' in value and value['installed']:
            installed += '* {} {}\n'.format(value['display-name'], value['version'] if value['version'] else '') # pylint: disable=C0301
        if (value['guessed'] or value['installed']) and value['tag-name']:
            tags += '* {}\n'.format(value['tag-name'])
        if value['installed'] and key in ['firewalld', 'iptables', 'lvm', 'nftables', 'selinux']:
            features_installed += '{}, '.format(key)
        if not value['installed'] and key in ['firewalld', 'iptables', 'lvm', 'nftables', 'selinux']: # pylint: disable=C0301
            features_missing +=  '{}, '.format(key)

    # only tags wanted, so it's ok to stop here
    if args.TAGS:
        lib.base.oao(tags, STATE_OK)

    # fetch more data
    automounts = get_systemd_units('systemctl list-unit-files --type automount --state enabled --state static --no-legend') # pylint: disable=C0301
    birthday = get_birthdate()
    boot_mode = get_boot_mode()
    crontab = get_crontab()
    disks = get_disks()
    dmi = lib.dmidecode.get_data()
    enabled_units = get_systemd_units('systemctl list-unit-files --type service --state enabled --no-legend') # pylint: disable=C0301
    success, firmware_device_model = lib.disk.read_file('/sys/firmware/devicetree/base/model')
    if not success:
        firmware_device_model = ''
    interfaces = get_interfaces()
    mounts = get_systemd_units('systemctl list-unit-files --type mount --state static --state generated --no-legend') # pylint: disable=C0301
    nondefault_users = get_nondefault_users()
    os_info = lib.version.get_os_info()
    pm_installed, pm_missing = get_python_modules()
    ports = get_listening_ports()
    sys_dimensions = get_sys_dimensions()
    systemd_default_target = get_systemd_default_target()
    timers = get_systemd_timers()
    tuned = get_tuned_active_profile()
    virt = get_virt_info()

    for key, value in find_tools().items():
        if value['installed']:
            tools += '* {}\n'.format(value['display-name'])

    # build the message

    # first header line

    msg = '{}: '.format(socket.gethostname())

    if os_info:
        msg += '{} '.format(os_info)
    msg += 'Kernel {} '.format(run_cmd('uname -r'))

    if virt == 'none':
        msg += 'on Bare-Metal, '
    else:
        msg += 'virtualized on {}, '.format(virt)

    if firmware_device_model:
        msg += '{}, '.format(firmware_device_model)

    if dmi:
        msg += '{} {}, '.format(lib.dmidecode.manufacturer(dmi), lib.dmidecode.model(dmi))
        msg += 'Firmware: {}, '.format(lib.dmidecode.firmware(dmi))
        msg += 'SerNo: {}, '.format(lib.dmidecode.serno(dmi))
        msg += 'Proc: {}, '.format(lib.dmidecode.cpu_type(dmi))
        msg += '#Cores: {}, '.format(lib.dmidecode.cpu_cores_enabled(dmi))
        msg += '#Threads: {}, '.format(lib.dmidecode.cpu_threads(dmi))
        msg += 'Current Speed: {} MHz, '.format(lib.dmidecode.cpu_speed(dmi))
        msg += '{} RAM, '.format(lib.human.bytes2human(lib.dmidecode.ram(dmi)))
    elif sys_dimensions:
        msg += '{} {}, {} RAM, '.format(
            sys_dimensions['cpu'],
            lib.txt.pluralize('CPU', sys_dimensions['cpu']),
            lib.human.bytes2human(sys_dimensions['ram'])
        )
    else:
        msg += 'sys dimensions n/a (consider installing psutil), '

    if disks:
        msg += '{} {}, '.format(
            lib.txt.pluralize('Disk', disks.count(',')+1),
            disks,
        )

    msg += '{} boot, '.format(boot_mode)

    if tuned:
        msg += 'tuned profile "{}", '.format(tuned)

    success, pub_ip = lib.net.get_public_ip(args.PUBLIC_IP_URL)
    if success:
        msg += 'Public IP {}, '.format(pub_ip)

    if birthday and birthday != '-':
        msg += 'born {}. '.format(birthday)

    if features_installed:
        msg += 'Features: {}. '.format(features_installed[:-2])
    if features_missing:
        msg += 'Missing: {}. '.format(features_missing[:-2])

    msg += 'About-me v{}\n\n'.format(__version__)

    # multi-line content - print further lines

    if interfaces:
        msg += 'Interfaces (IPv4):\n{}\n'.format(interfaces)

    if ports:
        msg += 'Listening TCP Ports:\n'
        for p in ports:
            msg += '* {}:{}/{}\n'.format(p['ip'], p['port'], p['proto'])
        msg += '\n'

    if installed:
        msg += 'SW installed:\n{}\n'.format(installed)

    if guessed:
        msg += 'SW found/guessed:\n{}\n'.format(guessed)

    if tools:
        msg += 'Tools:\n{}\n'.format(tools)

    if nondefault_users:
        msg += 'Non-default Users:\n{}\n'.format(nondefault_users)

    if systemd_default_target:
        msg += 'systemctl get-default:\n{}\n'.format(systemd_default_target)

    if enabled_units:
        msg += 'systemctl list-unit-files --type service --state enabled:\n{}\n'.format(enabled_units) # pylint: disable=C0301

    if mounts:
        msg += 'systemctl list-unit-files --type mount --state static --state generated:\n{}\n'.format(mounts) # pylint: disable=C0301

    if automounts:
        msg += 'systemctl list-unit-files --type automount --state enabled --state static:\n{}\n'.format(automounts) # pylint: disable=C0301

    if timers:
        msg += 'systemctl list-timers:\n{}\n'.format(timers)

    if crontab:
        msg += 'crontab:\n{}\n'.format(crontab)

    msg += '3rd-party Python libs required by any of the plugins when running in source code variant:\n'
    if pm_installed:
        msg += '* Installed: {}\n'.format(', '.join(pm_installed))
    else:
        msg += '* Installed: none\n'
    if pm_missing:
        msg += '* Missing: {}\n'.format(', '.join(pm_missing))
    else:
        msg += '* Missing: none\n'
    msg += '\n'

    if tags:
        msg += 'Guessed Tags:\n{}\n'.format(tags)

    # perfdata
    if os_info:
        re_search = re.search(r'[\d\.]+', os_info)
        if re_search:
            perfdata += lib.base.get_perfdata('osversion', re_search.group(0).replace('.', ''), None, None, None, None, None) # pylint: disable=C0301
    if dmi:
        perfdata += lib.base.get_perfdata('cpu_cores_enabled', lib.dmidecode.cpu_cores_enabled(dmi), None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('cpu_threads', lib.dmidecode.cpu_threads(dmi), None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('cpu_speed', lib.dmidecode.cpu_speed(dmi), None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('ram', lib.dmidecode.ram(dmi), 'B', None, None, 0, None)
    elif sys_dimensions:
        perfdata += lib.base.get_perfdata('cpu', sys_dimensions['cpu'], None, None, None, 0, None)
        perfdata += lib.base.get_perfdata('ram', sys_dimensions['ram'], 'B', None, None, 0, None)
    perfdata += lib.base.get_perfdata('disks', disks.count(',')+1, None, None, None, 0, None)

    # over and out
    lib.base.oao(msg, STATE_OK, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
