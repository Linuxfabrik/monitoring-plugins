#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import glob  # pylint: disable=C0413
import os  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413

try:
    import lib.smb  # pylint: disable=C0413
    HAVE_SMB = True
except ModuleNotFoundError as e:
    HAVE_SMB = False
    missing_lib = e.name
import lib.test  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024011101'

DESCRIPTION = 'Checks the size for a file or directory, in bytes.'


DEFAULT_CRIT = 1024*1024*1024     # 1G (Gibibyte)
DEFAULT_PATTERN = '*'
DEFAULT_TIMEOUT = 3
DEFAULT_WARN = 1024*1024*25       # 25M (Mebibyte)


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical size threshold in bytes. Default: >= %(default)s (1G)',
        dest='CRIT',
        type=lib.args.str_or_none,
        default=str(DEFAULT_CRIT),
    )

    parser.add_argument(
        '--filename',
        help='File (or directory) name to check. Supports glob in accordance with https://docs.python.org/2.7/library/glob.html. Beware of using recursive globs. This is mutually exclusive with -u / --url.',
        dest='FILENAME',
    )

    parser.add_argument(
        '--pattern',
        help="The search string to match against the names of SMB directories or files. This pattern can use '*' as a wildcard for multiple chars and '?' as a wildcard for a single char. Does not support regex patterns. Default: %(default)s.",
        dest='PATTERN',
        default=DEFAULT_PATTERN,
    )

    parser.add_argument(
        '--password',
        help='SMB Password.',
        dest='PASSWORD',
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-u', '--url',
        help='Set the url of the file (or directory) to check, starting with "smb://". This is mutually exclusive with --filename.',
        dest='URL',
        type=str,
    )

    parser.add_argument(
        '--username',
        help='SMB Username.',
        dest='USERNAME',
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning size threshold in bytes. Default: >= %(default)s (100M)',
        dest='WARN',
        type=lib.args.str_or_none,
        default=str(DEFAULT_WARN),
    )

    return parser.parse_args()
nodigit = 0
def range2human(value):
    if value.startswith(":"):
        if (value[1:]).isdigit():
            end = (value[1:])
            end = lib.human.bytes2human(float(end))
            return str('< ' + end)
        else:
            lib.base.cu ('Error, threshold values and ranges (-w, -c arguments) must be composed of only digits')
            sys.exit(STATE_UNKNOWN)
    elif value.endswith(":"):
        if (value[:-1]).isdigit():
            start = (value[:-1])
            start = lib.human.bytes2human(float(start))
            return str('> ' + start)
        else:
            lib.base.cu ('Error, threshold values and ranges (-w, -c arguments) must be composed of only digits')
            sys.exit(STATE_UNKNOWN)
    elif ":" in value:
            start, end = map(str, value.split(":"))
            if (start).isdigit() and (end).isdigit():
                start = lib.human.bytes2human(float(start))
                end = lib.human.bytes2human(float(end))
                return start + ' - ' + end
            else:
                lib.base.cu ('Error, threshold values and ranges (-w, -c arguments) must be composed of only digits')
                sys.exit(STATE_UNKNOWN)
    else:
        if value.isdigit():
            value = float(value)
            value = lib.human.bytes2human(value)
            return str('< ' + value)
        else:
            lib.base.cu ('Error, threshold values and ranges (-w, -c arguments) must be composed of only digits')
            sys.exit(STATE_UNKNOWN)

def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.FILENAME and args.URL:
        lib.base.cu('The --filename and -u / --url parameter are mutually exclusive. Please only use one.')

    state = STATE_OK
    msg = ''
    file_count = 0
    error_count = 0

    try:
        value_string_warn = range2human(args.WARN)
        value_string_crit = range2human(args.CRIT)
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.FILENAME:
        for item in sorted(glob.iglob(args.FILENAME)):
            # ignoring directories as the size of a directory is not consistently defined across filesystems, and never is the size of the contents
            if os.path.isdir(item):
                continue

            size = os.stat(item).st_size
            item_state = lib.base.get_state(size, args.WARN, args.CRIT, 'range')
            if item_state == STATE_WARN or item_state == STATE_CRIT:
                error_count += 1
            state = lib.base.get_worst(state, item_state)
            file_count += 1
            msg += '* {}: {}{}\n'.format(item, lib.human.bytes2human(size), lib.base.state2str(item_state, prefix=" "))

    if args.URL:
        split_url = args.URL.split('://')
        if len(split_url) != 2:
            lib.base.cu('Could not parse the protocol of the url "{}".'.format(args.URL))
        proto, url = split_url

        if proto == 'smb':
            if not HAVE_SMB:
                lib.base.cu('Python module "{}" is not installed.'.format(missing_lib))
            for item in lib.base.coe(lib.smb.glob(url, args.USERNAME, args.PASSWORD, args.TIMEOUT, pattern=args.PATTERN)):
                # ignoring directories as the size of a directory is not consistently defined across filesystems, and never is the size of the contents
                if item.is_dir():
                    continue

                size = item.stat().st_size
                item_state = lib.base.get_state(size, args.WARN, args.CRIT, 'range')
                if item_state == STATE_WARN or item_state == STATE_CRIT:
                    error_count += 1
                state = lib.base.get_worst(state, item_state)
                file_count += 1
                msg += '* {}: {}{}\n'.format(item, lib.human.bytes2human(size), lib.base.state2str(item_state, prefix=" "))
        else:
            lib.base.cu('The protocol "{}" is not supported.'.format(proto))

    if file_count == 0:
        msg = 'No files found.'
        lib.base.oao(msg, STATE_UNKNOWN, always_ok=args.ALWAYS_OK)
    if ':' in args.WARN or ':' in args.CRIT:
        msg = 'Critical  (Accepted Range): {}.\n\n'.format(
        value_string_crit,
        ) + msg
        msg = 'Warning   (Accepted Range): {}.\n'.format(
        value_string_warn,
        ) + msg
        msg = '{} {} {} outside the given threshold ranges of:\n'.format(
        error_count,
        lib.txt.pluralize("file", error_count),
        lib.txt.pluralize('', error_count, 'is,are'),
        ) + msg
    else:
        msg = '{} {} {} above the given size thresholds ({}/ {}).\n'.format(
        error_count,
        lib.txt.pluralize("file", error_count),
        lib.txt.pluralize('', error_count, 'is,are'),
        lib.human.bytes2human(float(args.WARN)),
        lib.human.bytes2human(float(args.CRIT)),
        ) + msg

    # over and out
    lib.base.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
