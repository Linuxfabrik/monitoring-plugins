#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import os  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024031501'

DESCRIPTION = 'Tracks if Nextcloud is EOL.'

DEFAULT_CHECK_MAJOR = False
DEFAULT_CHECK_MINOR = False
DEFAULT_CHECK_PATCH = False
DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_OFFSET_EOL = -30 # days
DEFAULT_PATH = '/var/www/html/nextcloud'
DEFAULT_TIMEOUT = 8


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--check-major',
        help='Alert me when there is a new major release available, '
             'even if the current version of my product is not EOL. '
             'Example: Notify when I run v26 (not yet EOL) and v27 is available. '
             'Default: %(default)s',
        dest='CHECK_MAJOR',
        action='store_true',
        default=DEFAULT_CHECK_MAJOR,
    )

    parser.add_argument(
        '--check-minor',
        help='Alert me when there is a new major.minor release available, '
             'even if the current version of my product is not EOL. '
             'Example: Notify when I run v26.2 (not yet EOL) and v26.3 is available. '
             'Default: %(default)s',
        dest='CHECK_MINOR',
        action='store_true',
        default=DEFAULT_CHECK_MINOR,
    )

    parser.add_argument(
        '--check-patch',
        help='Alert me when there is a new major.minor.patch release available, '
             'even if the current version of my product is not EOL. '
             'Example: Notify when I run v26.2.7 (not yet EOL) and v26.2.8 is available. '
             'Default: %(default)s',
        dest='CHECK_PATCH',
        action='store_true',
        default=DEFAULT_CHECK_PATCH,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--offset-eol',
        help='Alert me n days before ("-30") or after an EOL date ("30" or "+30"). '
             'Default: %(default)s days',
        dest='OFFSET_EOL',
        type=int,
        default=DEFAULT_OFFSET_EOL,
    )

    parser.add_argument(
        '--path',
        help='Local path to your Nextcloud installation, typically within your Webserver\'s '
             'Document Root. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    return parser.parse_args()


def get_owner(file):
    """Returns the user ID of the owner of a file (for example "0" for "root").
    Returns -1 on failure.
    """
    try:
        return os.stat(file).st_uid
    except:
        return -1


def run_occ(path, cmd, _format='json'):
    """Run the Nextcloud OCC command.
    """
    # get the owner of config.php
    user = get_owner(os.path.join(path, 'config/config.php'))
    occ = os.path.join(path, 'occ')
    # When running a command as a UID, many shells require
    # that the `#` be escaped with a backslash (`\`).
    stdout, stderr, _ = lib.base.coe(
        lib.shell.shell_exec('sudo -u \\#{} {} {}'.format(user, occ, cmd))
    )
    if stderr:
        lib.base.cu(stderr)
    try:
        if _format == 'json':
            return json.loads(stdout)
        return stdout.strip()
    except:
        lib.base.cu('ValueError: No JSON object could be decoded')


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    config = run_occ(args.PATH, 'config:list')

    state, msg = lib.version.check_eol(
        'https://endoflife.date/api/nextcloud.json',
        config['system']['version'],
        offset_eol=args.OFFSET_EOL,
        check_major=args.CHECK_MAJOR,
        check_minor=args.CHECK_MINOR,
        check_patch=args.CHECK_PATCH,
        insecure=args.INSECURE,
        no_proxy=args.NO_PROXY,
        timeout=args.TIMEOUT,
    )

    # over and out
    lib.base.oao(
        'Nextcloud v{} ({})'.format(config['system']['version'], msg),
        state,
        lib.base.get_perfdata(
            'nextcloud-version',
            lib.version.version2float(config['system']['version']),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
