#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023061201'

DESCRIPTION = 'Tracks if Postfix is EOL.'

# from https://endoflife.date/api/postfix.json
ENDOFLIFE_DATE = [
  {
    "cycle": "3.8",
    "releaseDate": "2023-04-17",
    "eol": False,
    "latest": "3.8.1",
    "latestReleaseDate": "2023-06-06",
    "link": "https://www.postfix.org/announcements/postfix-3.8.1.html",
    "lts": False
  },
  {
    "cycle": "3.7",
    "eol": False,
    "latest": "3.7.6",
    "latestReleaseDate": "2023-06-06",
    "releaseDate": "2022-02-06",
    "link": "https://www.postfix.org/announcements/postfix-3.8.1.html",
    "lts": False
  },
  {
    "cycle": "3.6",
    "eol": False,
    "latest": "3.6.10",
    "latestReleaseDate": "2023-06-06",
    "releaseDate": "2021-04-29",
    "link": "https://www.postfix.org/announcements/postfix-3.8.1.html",
    "lts": False
  },
  {
    "cycle": "3.5",
    "eol": False,
    "latest": "3.5.20",
    "latestReleaseDate": "2023-06-06",
    "releaseDate": "2020-03-15",
    "link": "https://www.postfix.org/announcements/postfix-3.8.1.html",
    "lts": False
  },
  {
    "cycle": "3.4",
    "eol": "2023-04-17",
    "latest": "3.4.29",
    "latestReleaseDate": "2023-04-19",
    "releaseDate": "2019-02-27",
    "link": "https://www.postfix.org/announcements/postfix-3.7.5.html",
    "lts": False
  },
  {
    "cycle": "3.3",
    "eol": "2022-02-05",
    "latest": "3.3.22",
    "latestReleaseDate": "2022-02-06",
    "releaseDate": "2018-02-22",
    "link": "https://www.postfix.org/announcements/postfix-3.6.5.html",
    "lts": False
  },
  {
    "cycle": "3.2",
    "eol": "2021-04-29",
    "latest": "3.2.22",
    "latestReleaseDate": "2021-04-12",
    "releaseDate": "2017-02-28",
    "link": "https://www.postfix.org/announcements/postfix-3.5.10.html",
    "lts": False
  },
  {
    "cycle": "3.1",
    "eol": "2020-03-15",
    "latest": "3.1.15",
    "latestReleaseDate": "2020-02-03",
    "releaseDate": "2016-02-24",
    "link": "https://www.postfix.org/announcements/postfix-3.5.10.html",
    "lts": False
  },
  {
    "cycle": "3.0",
    "eol": "2019-02-27",
    "latest": "3.1.15",
    "latestReleaseDate": "2019-02-26",
    "releaseDate": "2015-02-08",
    "link": "https://www.postfix.org/announcements/postfix-3.3.3.html",
    "lts": False
  },
  {
    "cycle": "2.11",
    "eol": "2018-02-21",
    "latest": "2.11.11",
    "latestReleaseDate": "2018-01-28",
    "releaseDate": "2014-01-15",
    "link": "https://www.postfix.org/announcements/postfix-3.2.5.html",
    "lts": False
  },
  {
    "cycle": "2.10",
    "eol": "2017-02-28",
    "latest": "2.10.10",
    "latestReleaseDate": "2016-05-15",
    "releaseDate": "2013-02-11",
    "link": "https://www.postfix.org/announcements/postfix-3.1.1.html",
    "lts": False
  },
  {
    "cycle": "2.9",
    "eol": "2016-02-24",
    "latest": "2.9.15",
    "latestReleaseDate": "2015-10-10",
    "releaseDate": "2012-02-01",
    "link": "https://www.postfix.org/announcements/postfix-3.0.3.html",
    "lts": False
  },
  {
    "cycle": "2.8",
    "eol": "2015-02-08",
    "latest": "2.8.20",
    "latestReleaseDate": "2015-02-08",
    "releaseDate": "2011-01-20",
    "link": "https://www.postfix.org/announcements/postfix-2.11.4.html",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def get_installed_version():
    success, result = lib.shell.shell_exec('postconf -d mail_version')
    if not success:
        return ''
    stdout = result[0].strip()
    # where to find the version number in output?
    version_regex = r'= ([\d\.]+)'
    try:
        stdout = re.search(version_regex, stdout)
        return stdout.group(1).strip()
    except:
        return ''


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = get_installed_version()
    if not installed_version:
        lib.base.oao('Postfix not found.', STATE_UNKNOWN)
    try:
        installed_major, installed_minor, installed_patch = installed_version.split('.')
    except:
        installed_patch = '0'
        installed_major, installed_minor = installed_version.split('.')

    state, msg = lib.version.check_eol(
        ENDOFLIFE_DATE,
        '{}.{}'.format(installed_major, installed_minor),
    )

    # over and out
    lib.base.oao(
        'Postfix v{} ({})'.format(installed_version, msg),
        state,
        lib.base.get_perfdata(
            'postfix-version',
            '{}.{}{}'.format(installed_major, installed_minor, installed_patch),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
