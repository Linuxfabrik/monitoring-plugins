#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.md

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023112901'

DESCRIPTION = 'This check just returns the given message, state and perfdata.'

DEFAULT_MSG = 'Everything is ok.'
DEFAULT_STATE = 'ok'
DEFAULT_PERFDATA = None


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--message',
        help='The message to return. Default:  %(default)s',
        dest='MESSAGE',
        default=DEFAULT_MSG,
    )

    parser.add_argument(
        '--perfdata',
        help='The perfdata to return, formatted according to the nagios guidelines. Default:  %(default)s',
        dest='PERFDATA',
        default=DEFAULT_PERFDATA,
    )

    parser.add_argument(
        '--state',
        help='The state to return (ok, warn, crit, unk). Default:  %(default)s',
        choices=['ok', 'warn', 'crit', 'unk'],
        dest='STATE',
        default=DEFAULT_STATE,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # over and out
    lib.base.oao(args.MESSAGE, lib.base.str2state(args.STATE), args.PERFDATA, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
